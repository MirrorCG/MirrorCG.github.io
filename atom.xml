<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mirror的个人博客</title>
  
  <subtitle>Mirror的博客</subtitle>
  <link href="http://mirrorcg.github.io/atom.xml" rel="self"/>
  
  <link href="http://mirrorcg.github.io/"/>
  <updated>2022-12-12T13:56:17.000Z</updated>
  <id>http://mirrorcg.github.io/</id>
  
  <author>
    <name>Mirror</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maya创建操纵器</title>
    <link href="http://mirrorcg.github.io/posts/20221212a1.html"/>
    <id>http://mirrorcg.github.io/posts/20221212a1.html</id>
    <published>2022-12-12T13:14:17.000Z</published>
    <updated>2022-12-12T13:56:17.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">在 maya 中创建操纵器的示例<span id="more"></span>，根据官方文档描述，所有要创建的操纵器，都应该满足以下要求：</p><ul><li>所有基本操纵器都应该在实例化的 OpenMayaMPx.MPxManipContainer() 容器中生成</li><li>在容器中实现 createChildren(self) 函数功能，使用与容器对应的方法生成指定的操纵器</li><li>connectToDependNode(self, node) 函数用于链接操纵器到选中的节点的属性接口</li><li>完成 addPlugToManipConversion(theIndex) 和 manipToPlugConversion(index) 并通过其对应的回调函数,分别可以进行节点属性接口控制容器值，以及容器值控制节点属性接口的目的</li></ul>  <p style="text-indent:2em">以下示例插件完成类似Maya默认快捷键“T”的方向操纵器的功能：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding:utf-8 -*-# !&#x2F;usr&#x2F;bin&#x2F;env python2# Author: Mirror# File: MayaPlugins_AimMinapulator.py# Time: 2022-12-03 21:43# Update： 2022-12-11 22:05# Environment:PyCharm# Blog: www.mirrorcg.com# Description: 旨在给 arnold 面光源添加一个方向操控器，在大纲中不产生节点，可用于任何节点# 插件工具架使用示例:#         import maya.mel as mm#         import maya.cmds as cmds##         if not cmds.shelfLayout(&quot;Shelf1&quot;,q&#x3D;1,ex&#x3D;1) :#             mainTopShelfTab &#x3D; mm.eval(&#39;global string $gShelfTopLevel;string $a&#x3D;$gShelfTopLevel;&#39;)  # 获取工具架顶级布局#             newShelfLayout &#x3D; cmds.shelfLayout(&quot;Shelf1&quot;,p&#x3D;mainTopShelfTab)  # 创建工具架分页#         cmds.loadPlugin(&quot;MayaPlugins_AimMinapulator.py&quot;)#         if not cmds.aimManipCtxCmd(&quot;aimManipCtxCmd1&quot;, ex&#x3D;1, q&#x3D;1):#             cmds.aimManipCtxCmd( &#39;spAimManipContext1&#39; )#         cmds.setParent( &#39;AimMinap&#39; )#         cmds.toolButton( &#39;aimManip&#39;, cl&#x3D;&#39;toolCluster&#39;, t&#x3D;&#39;spAimManipContext1&#39;, i1&#x3D;&quot;aimManip.xpm&quot; )# 这将在工具架的&quot;Shelf1&quot;选项卡中创建一个名为&quot;AimMinap&quot;的新按钮。创建一个arnold 面光源，然后单击工具架上的按钮。选择对象时，将出现Z轴方向操纵器。## 插件快捷键使用示例：#         在快捷键中设置以下命令,并设置快捷键为 Ctrl+Shift+T(可自行设置):#             import maya.mel as mm#             import maya.cmds as cmds#             pluginNmae &#x3D; &#39;Maya_pythonPlugin.py&#39;#             try:#                 if not cmds.pluginInfo(pluginNmae,l&#x3D;True,q&#x3D;1):#                     cmds.loadPlugin(pluginNmae)#             except:#                 cmds.warning(u&quot;插件路径中没有名为&#39;%s&#39;的插件&quot; % pluginNmae)#                 raise#             if not cmds.aimManipCtxCmd(&quot;aimManipCtxCmd1&quot;, ex&#x3D;1, q&#x3D;1):#                 cmds.aimManipCtxCmd( &#39;aimManipCtxCmd1&#39; )#             mm.eval(&quot;setToolTo aimManipCtxCmd1&quot;)# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;import sysimport maya.OpenMaya as OpenMayaimport maya.OpenMayaUI as OpenMayaUIimport maya.OpenMayaMPx as OpenMayaMPxaimManipId &#x3D; OpenMaya.MTypeId(0x8, 133)  # 自定义ID 防止冲突contextCmdName &#x3D; &quot;aimManipCtxCmd&quot;nodeName &#x3D; &quot;aimManip&quot;class AimManip(OpenMayaMPx.MPxManipContainer):    def __init__(self):        OpenMayaMPx.MPxManipContainer.__init__(self)        self.fFreePointManip &#x3D; OpenMaya.MDagPath()        self.fDirectionManip &#x3D; OpenMaya.MDagPath()        self.fScaleManip &#x3D; OpenMaya.MDagPath()        self.fNodePath &#x3D; OpenMaya.MDagPath()        self.initiDirection &#x3D; OpenMaya.MVector()        self.startDirection &#x3D; OpenMaya.MVector()  # 记录物体的初始位置        self.endDirection &#x3D; OpenMaya.MVector()  # 记录物体移动后的位置    def createChildren(self):        u&quot;&quot;&quot;添加基础操纵器&quot;&quot;&quot;        # FreePointTriadManip        self.fFreePointManip &#x3D; self.addFreePointTriadManip(&quot;pointManip&quot;, &quot;freePoint&quot;)        freePointTriadManipFn &#x3D; OpenMayaUI.MFnFreePointTriadManip(self.fFreePointManip)        # # ScaleManip        # self.fScaleManip &#x3D; self.addScaleManip(&quot;scaleManip&quot;, &quot;scale&quot;)        # scaleManipFn &#x3D; OpenMayaUI.MFnScaleManip(self.fScaleManip)        # DirectionManip        self.fDirectionManip &#x3D; self.addDirectionManip(&quot;directionManip&quot;, &quot;direction&quot;)        directionManipFn &#x3D; OpenMayaUI.MFnDirectionManip(self.fDirectionManip)        directionManipFn.setNormalizeDirection(False)    def addPlug(self, node):        u&quot;&quot;&quot;添加记录属性保存操作历史&quot;&quot;&quot;        dagNodeFn &#x3D; OpenMaya.MFnDagNode(node)        dagNodeFn.getPath(self.fNodePath)        nodeFn &#x3D; OpenMaya.MFnDependencyNode()        nodeFn.setObject(node)        # 获取选中节点的朝向        _Matrix &#x3D; OpenMaya.MTransformationMatrix(self.fNodePath.inclusiveMatrix()).asMatrix()  # .asRotateMatrix()        self.initiDirection &#x3D; OpenMaya.MVector(_Matrix(2, 0), _Matrix(2, 1), _Matrix(2, 2))        if not nodeFn.hasAttribute(&quot;arrowDirection&quot;):            numericFn &#x3D; OpenMaya.MFnNumericAttribute()            aArrow2DirectionX &#x3D; numericFn.create(&quot;arrowDirectionX&quot;, &quot;ax&quot;, OpenMaya.MFnNumericData.kDouble,                                                 self.initiDirection(0) * -5)            aArrow2DirectionY &#x3D; numericFn.create(&quot;arrowDirectionY&quot;, &quot;ay&quot;, OpenMaya.MFnNumericData.kDouble,                                                 self.initiDirection(1) * -5)            aArrow2DirectionZ &#x3D; numericFn.create(&quot;arrowDirectionZ&quot;, &quot;az&quot;, OpenMaya.MFnNumericData.kDouble,                                                 self.initiDirection(2) * -5)            aArrow2Direction &#x3D; numericFn.create(&quot;arrowDirection&quot;, &quot;dir&quot;, aArrow2DirectionX, aArrow2DirectionY,                                                aArrow2DirectionZ)            nodeFn.addAttribute(aArrow2Direction)        else:            directionX &#x3D; nodeFn.findPlug(&quot;arrowDirectionX&quot;).asFloat()            directionY &#x3D; nodeFn.findPlug(&quot;arrowDirectionY&quot;).asFloat()            directionZ &#x3D; nodeFn.findPlug(&quot;arrowDirectionZ&quot;).asFloat()            length &#x3D; (directionX ** 2 + directionY ** 2 + directionZ ** 2) ** 0.5            self.initiDirection &#x3D; self.initiDirection * (-length)            nodeFn.findPlug(&quot;arrowDirectionX&quot;).setFloat(self.initiDirection(0))            nodeFn.findPlug(&quot;arrowDirectionY&quot;).setFloat(self.initiDirection(1))            nodeFn.findPlug(&quot;arrowDirectionZ&quot;).setFloat(self.initiDirection(2))    def connectToDependNode(self, node):        u&quot;&quot;&quot;链接操纵器到选中的节点的属性接口&quot;&quot;&quot;        # 获取 DAG path        dagNodeFn &#x3D; OpenMaya.MFnDagNode(node)        dagNodeFn.getPath(self.fNodePath)        parentNode &#x3D; dagNodeFn.parent(0)        parentNodeFn &#x3D; OpenMaya.MFnDagNode(parentNode)        nodeFn &#x3D; OpenMaya.MFnDependencyNode()        nodeFn.setObject(node)        # 链接操纵器到对应的接口        # FreePointTriadManip        freePointManipFn &#x3D; OpenMayaUI.MFnFreePointTriadManip(self.fFreePointManip)        try:            tPlug &#x3D; nodeFn.findPlug(&quot;translate&quot;)            freePointManipFn.connectToPointPlug(tPlug)        except:            sys.stdout.write(u&quot;移动操纵器链接 translate 属性失败\n&quot;)        # # ScaleManip        # scaleManipFn &#x3D; OpenMayaUI.MFnScaleManip(self.fScaleManip)        # try:        #     scalePlug &#x3D; nodeFn.findPlug(&quot;scale&quot;)        #     scaleManipFn.connectToScalePlug(scalePlug)        #     scaleManipFn.displayWithNode(node)        # except:        #     sys.stdout.write(u&quot;缩放操纵器链接 scale 属性失败\n&quot;)        # 以下有自定义接口        # DirectionManip        directionManipFn &#x3D; OpenMayaUI.MFnDirectionManip()        directionManipFn.setObject(self.fDirectionManip)        self.addPlug(node)        self.startLocate &#x3D; self.nodeTranslation()  # 获取位置初值        try:            sys.stdout.write(u&quot;生成方向操纵器\n&quot;)            directionPlug &#x3D; nodeFn.findPlug(&quot;arrowDirection&quot;)            directionManipFn.connectToDirectionPlug(directionPlug)            startPointIndex &#x3D; directionManipFn.startPointIndex()            self.addPlugToManipConversion(startPointIndex)        except:            sys.stdout.write(u&quot;方向操作器链接 arrowDirection 属性失败\n&quot;)        try:            rPlugin &#x3D; nodeFn.findPlug(&quot;rotate&quot;)            self.initiDirection &#x3D; OpenMaya.MVector(0, 0, -6)            directionManipFn.setDirection(self.initiDirection)  # 每次生成操纵器都需要设置初始方向            self.addManipToPlugConversion(rPlugin)        except:            sys.stdout.write(u&quot;物体旋转方向链接方向操作器 direction 属性失败\n&quot;)        OpenMayaMPx.MPxManipContainer.finishAddingManips(self)        OpenMayaMPx.MPxManipContainer.connectToDependNode(self, node)    def draw(self, view, path, style, status):        u&quot;&quot;&quot;绘制提示语&quot;&quot;&quot;        # todo VP2.0        OpenMayaMPx.MPxManipContainer.draw(self, view, path, style, status)        view.beginGL()        textPos &#x3D; OpenMaya.MPoint(self.nodeTranslation())        sys.stdout.write(&quot;draw,1111111111111111111111111111111&quot;)        view.drawText(&quot;Swiss Army Manipulator&quot;, textPos, OpenMayaUI.M3dView.kLeft)        view.endGL()    def manipToPlugConversion(self, index):        u&quot;&quot;&quot;链接选中容器指定属性到物体接口&quot;&quot;&quot;        numData &#x3D; OpenMaya.MFnNumericData()        numDataObj &#x3D; numData.create(OpenMaya.MFnNumericData.k3Float)        directionManipFn &#x3D; OpenMayaUI.MFnDirectionManip(self.fDirectionManip)        direction &#x3D; OpenMaya.MVector()        self.getConverterManipValue(directionManipFn.directionIndex(), direction)  # 获取容器方向        quaternion &#x3D; self.initiDirection.rotateTo(direction)        euler &#x3D; OpenMaya.MTransformationMatrix(quaternion.asMatrix()).eulerRotation()  # 通过四元数转旋转角度        numData.setData3Float(euler.x, euler.y, euler.z)        return OpenMayaUI.MManipData(numDataObj)    def plugToManipConversion(self, theIndex):        u&quot;&quot;&quot;链接选定物体的中心点到操纵器起始点接口&quot;&quot;&quot;        if theIndex &#x3D;&#x3D; 8:            numData &#x3D; OpenMaya.MFnNumericData()            numDataObj &#x3D; numData.create(OpenMaya.MFnNumericData.k3Float)            vec &#x3D; self.nodeTranslation()            numData.setData3Float(vec.x, vec.y, vec.z)            manipData &#x3D; OpenMayaUI.MManipData(numDataObj)            self.updateArrowDirectionValue(vec)            return manipData        else:            sys.stdout.write(theIndex)            sys.stdout.write(&quot;\n^index error\n&quot;)    def nodeTranslation(self):        u&quot;&quot;&quot;获取选中对象的中心点&quot;&quot;&quot;        dagFn &#x3D; OpenMaya.MFnDagNode(self.fNodePath)        path &#x3D; OpenMaya.MDagPath()        dagFn.getPath(path)        # path.pop()  # pop from the shape to the transform 禁用，报错对象和方法不兼容        transformFn &#x3D; OpenMaya.MFnTransform(path)        return transformFn.getTranslation(OpenMaya.MSpace.kWorld)    def updateArrowDirectionValue(self, endLocate):        u&quot;&quot;&quot;更新接口值，移动物体位置时更新物体朝向的向量&quot;&quot;&quot;        self.endLocate &#x3D; endLocate        relativeLocate &#x3D; self.endLocate - self.startLocate        self.startLocate &#x3D; self.endLocate        dagFn &#x3D; OpenMaya.MFnDagNode(self.fNodePath)        directionPlugX &#x3D; dagFn.findPlug(&quot;arrowDirectionX&quot;).asFloat()        directionPlugY &#x3D; dagFn.findPlug(&quot;arrowDirectionY&quot;).asFloat()        directionPlugZ &#x3D; dagFn.findPlug(&quot;arrowDirectionZ&quot;).asFloat()        directLocate &#x3D; OpenMaya.MVector(directionPlugX, directionPlugY, directionPlugZ)        newLacate &#x3D; directLocate - relativeLocate        dagFn.findPlug(&quot;arrowDirectionX&quot;).setFloat(newLacate(0))        dagFn.findPlug(&quot;arrowDirectionY&quot;).setFloat(newLacate(1))        dagFn.findPlug(&quot;arrowDirectionZ&quot;).setFloat(newLacate(2))        # sys.stdout.write(&quot;change arrorDirectionZ \n&quot;)        directionManipFn &#x3D; OpenMayaUI.MFnDirectionManip()        directionManipFn.setObject(self.fDirectionManip)        directionManipFn.setDirection(newLacate)  # 更新方向操纵器的方向，以同步数据def aimManipCreator():    return OpenMayaMPx.asMPxPtr(AimManip())def aimManipInitialize():    OpenMayaMPx.MPxManipContainer.initialize()class aimManipContext(OpenMayaMPx.MPxSelectionContext):    def __init__(self):        OpenMayaMPx.MPxSelectionContext.__init__(self)        self.updateManipulatorsCallbackID &#x3D; None    def toolOnSetup(self, event):        updateManipulators(self)        self.updateManipulatorsCallbackID &#x3D; OpenMaya.MModelMessage.addCallback(            OpenMaya.MModelMessage.kActiveListModified, updateManipulators, self)    def toolOffCleanup(self):        self.deleteManipulators()        try:            if self.updateManipulatorsCallbackID !&#x3D; None:                OpenMaya.MModelMessage.removeCallback(self.updateManipulatorsCallbackID)        except:            sys.stderr.write(u&quot;安装前调用清理失败.\n&quot;)        super(aimManipContext, self).toolOffCleanup()def updateManipulators(clientData):    clientData.deleteManipulators()    selectionList &#x3D; OpenMaya.MSelectionList()    OpenMaya.MGlobal.getActiveSelectionList(selectionList)    selectionIter &#x3D; OpenMaya.MItSelectionList(selectionList, OpenMaya.MFn.kInvalid)    while not selectionIter.isDone():        dependNode &#x3D; OpenMaya.MObject()        selectionIter.getDependNode(dependNode)        if dependNode.isNull() or not dependNode.hasFn(OpenMaya.MFn.kDependencyNode):            print(u&quot;depend node is null&quot;)            continue        dependNodeFn &#x3D; OpenMaya.MFnDependencyNode(dependNode)        tPlug &#x3D; dependNodeFn.findPlug(&quot;translate&quot;, False)        rPlug &#x3D; dependNodeFn.findPlug(&quot;rotate&quot;, False)        sPlug &#x3D; dependNodeFn.findPlug(&quot;scale&quot;, False)        if tPlug.isNull() or rPlug.isNull()or sPlug.isNull():            print(u&quot;translate and&#x2F;or rotate and&#x2F;or scale plugs are null&quot;)            selectionIter.next()            continue        manipObject &#x3D; OpenMaya.MObject()        manipulator &#x3D; OpenMayaMPx.MPxManipContainer.newManipulator(nodeName, manipObject)        if manipulator is not None:            clientData.addManipulator(manipObject)            manipulator.connectToDependNode(dependNode)        selectionIter.next()class aimManipCtxCmd(OpenMayaMPx.MPxContextCommand):    def __init__(self):        OpenMayaMPx.MPxContextCommand.__init__(self)    def makeObj(self):        return OpenMayaMPx.asMPxPtr(aimManipContext())def contextCmdCreator():    return OpenMayaMPx.asMPxPtr(aimManipCtxCmd())# 注册插件def initializePlugin(mobject):    mplugin &#x3D; OpenMayaMPx.MFnPlugin(mobject, &quot;www.mirrorcg.com&quot;, &quot;1.0.0&quot;, &quot;Any&quot;)    try:        mplugin.registerContextCommand(contextCmdName, contextCmdCreator)    except:        print(u&quot;该上下文命令注册失败: %s&quot; % contextCmdName)        raise    try:        mplugin.registerNode(nodeName, aimManipId, aimManipCreator, aimManipInitialize,                             OpenMayaMPx.MPxNode.kManipContainer)    except:        print(u&quot;该节点注册失败: %s&quot; % nodeName)        raise# 取消注册插件def uninitializePlugin(mobject):    mplugin &#x3D; OpenMayaMPx.MFnPlugin(mobject)    try:        mplugin.deregisterContextCommand(contextCmdName)    except:        print(u&quot;该上下文命令取消注册失败: %s&quot; % contextCmdName)        raise    try:        mplugin.deregisterNode(aimManipId)    except:        print(u&quot;该节点取消注册失败: %s&quot; % nodeName)        raise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p style=&quot;text-indent:2em&quot;&gt;在 maya 中创建操纵器的示例</summary>
    
    
    
    <category term="Maya" scheme="http://mirrorcg.github.io/categories/Maya/"/>
    
    <category term="小工具" scheme="http://mirrorcg.github.io/categories/Maya/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="MayaAPI" scheme="http://mirrorcg.github.io/tags/MayaAPI/"/>
    
    <category term="MayaPlugin" scheme="http://mirrorcg.github.io/tags/MayaPlugin/"/>
    
    <category term="向量计算" scheme="http://mirrorcg.github.io/tags/%E5%90%91%E9%87%8F%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>QT-ListViewLayout</title>
    <link href="http://mirrorcg.github.io/posts/20221211a1.html"/>
    <id>http://mirrorcg.github.io/posts/20221211a1.html</id>
    <published>2022-12-11T14:38:25.000Z</published>
    <updated>2022-12-11T15:28:45.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">本文为记录摘抄自 ZooTool 工具集中的 ListViewLayout <span id="more"></span>,该布局可以根据父 UI 组件窗口的宽度，调整每一行所能容纳的最大的元素个数。类似flowLayout,但比flowLayout省资源。</p><p>示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding:utf-8 -*-# !&#x2F;usr&#x2F;bin&#x2F;env python3# Author: Mirror# File: flowLayout# Time: 2022-12-10 21:43# Update： 2022-12-12 22:43# Environment:PyCharm# Blog: www.mirrorcg.com# Description: listViewLayout布局示例# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;import osimport globimport tempfileimport copyimport jsonimport zipfileimport imghdrimport sysfrom functools import partialfrom PySide2.QtGui import *from PySide2.QtCore import *from PySide2.QtWidgets import *if sys.version_info[0] &#x3D;&#x3D; 3:    string_types &#x3D; strelse:    string_types &#x3D; bytesINFOASSET &#x3D; &quot;assetType&quot;  # key for the .zooinfo dict and file (as json)INFOCREATORS &#x3D; &quot;creators&quot;  # key for the .zooinfo dict and file (as json)INFOWEBSITES &#x3D; &quot;websites&quot;  # key for the .zooinfo dict and file (as json)INFOTAGS &#x3D; &quot;tags&quot;  # key for the .zooinfo dict and file (as json)INFODESCRIPTION &#x3D; &quot;description&quot;  # key for the .zooinfo dict and file (as json)INFOSAVE &#x3D; &quot;saved&quot;  # key for the .zooinfo dict and file (as json)INFOANIM &#x3D; &quot;animation&quot;  # key for the .zooinfo dict and file (as json)VERSIONKEY &#x3D; &quot;version&quot;GENERICVERSIONNO &#x3D; &quot;1.0.0&quot;  # the version number of the generic file formatASSETTYPES &#x3D; [&quot;Not Specified&quot;, &quot;Hero Model&quot;, &quot;Prop Model&quot;, &quot;Background&quot;, &quot;Background Lights&quot;, &quot;Scene&quot;, &quot;IBL&quot;, &quot;Lights&quot;,              &quot;Shaders&quot;, &quot;Animation&quot;, &quot;Camera&quot;]ZOOINFOSUFFIX &#x3D; &quot;zooInfo&quot;  # TODO use new constant in zoosceneconstantsQTSUPPORTEDIMAGES &#x3D; (&#39;bmp&#39;, &#39;gif&#39;, &#39;jpg&#39;, &#39;jpeg&#39;, &#39;mng&#39;, &#39;png&#39;, &#39;pbm&#39;, &#39;pgm&#39;, &#39;ppm&#39;, &#39;tiff&#39;, &#39;xbm&#39;, &#39;xpm&#39;, &#39;svg&#39;, &#39;tga&#39;)DEPENDENCY_FOLDER &#x3D; &quot;fileDependencies&quot;  # the prefix of the dependency folder for file dependencies.ZOO_THUMBNAIL &#x3D; &quot;thumbnail&quot;  # the name of thumbnail images minus the file extension which can be png or jpg etcZOOSCENE_EXT &#x3D; &quot;zooScene&quot;  # main suffix for zooScene filesPREFERENCE_FOLDER &#x3D; &quot;preferences&quot;INTERFACE_FOLDER &#x3D; &quot;interface&quot;preference &#x3D; NoneDIRECTORYNAMEDEPENDENCIES &#x3D; &quot;fileDependencies&quot;def dpiScale(value):    &quot;&quot;&quot;根据当前 DPI 按值调整大小    :param value: 默认2K int型    :return value: 当前显示器的的大小 int型    &quot;&quot;&quot;    DEFAULT_DPI &#x3D; 96    mult &#x3D; max(1, float(QApplication.desktop().logicalDpiY()) &#x2F; float(DEFAULT_DPI))    return value * multdef getTempDir():    &quot;&quot;&quot;返回所有操作系统上的临时目录路径&quot;&quot;&quot;    return os.environ.get(&#39;TEMP&#39;, os.environ.get(&#39;TMP&#39;, os.environ.get(&#39;TMPDIR&#39;, &#39;&#x2F;tmp&#39;)))def getFilesNoExt(directory, fileNoExtension):    &quot;&quot;&quot;给定一个没有扩展名的文件，找到文件名，对于查找扩展名未知的缩略图很有用，即可能是.jpg或.png    :param directory: 用于搜索和返回文件名的目录 str    :param fileNoExtension: 要查找的文件的名称 str    :return fileList: 与名称匹配的文件列表，可以是空的或多个 list(str)    &quot;&quot;&quot;    fileList &#x3D; list()    os.chdir(directory)    for fileName in glob.glob(&quot;&#123;&#125;.*&quot;.format(fileNoExtension)):        fileList.append(fileName)    # TODO: Probably shouldn&#39;t be using glob, return the current path to the directory    tempDir &#x3D; getTempDir()    os.chdir(tempDir)    return fileListdef getImageNoExtension(directory, nameNoExtension):    &quot;&quot;&quot;返回目录中具有名称（不带文件扩展名）的图像列表，有助于查找“缩略图.png或缩略图.jpg”，返回找到的文件的列表    :param directory: 用于搜索和返回文件名的目录 str    :param nameNoExtension: 没有扩展名的文件名 str    :return imagePathList: 与名称NoExtension匹配的图像列表 list    &quot;&quot;&quot;    imagePathList &#x3D; list()    fileList &#x3D; getFilesNoExt(directory, nameNoExtension)    if not fileList:        return    for file in fileList:        filename, file_extension &#x3D; os.path.splitext(file)        file_extension &#x3D; file_extension.replace(&quot;.&quot;, &quot;&quot;)        if file_extension in QTSUPPORTEDIMAGES:            imagePathList.append(file)    return imagePathListdef thumbnails(directory, fileListNoExt):    &quot;&quot;&quot;从不带扩展名的 zooScene 列表中返回缩略图路径的列表    :return thumbPathList: 每个 zooScene 文件一个缩略图路径列表（无扩展名）    :rtype thumbFullPathList: 基础字符串列表    &quot;&quot;&quot;    thumbFullPathList &#x3D; list()    for i, zooSceneName in enumerate(fileListNoExt):        dependFolder &#x3D; &quot;_&quot;.join([zooSceneName, DEPENDENCY_FOLDER])        dependFolderPath &#x3D; os.path.join(directory, dependFolder)        if not os.path.isdir(dependFolderPath):            thumbFullPathList.append(None)            continue        imageList &#x3D; getImageNoExtension(dependFolderPath, ZOO_THUMBNAIL)        if imageList:  # image list is only thumbnail, take the first image, could be jpg or png            thumbFullPathList.append(os.path.join(dependFolderPath, imageList[0]))            continue        thumbFullPathList.append(None)    return thumbFullPathListdef filesByExtension(directory, extensionList):    &quot;&quot;&quot;列出给定文件扩展名列表的给定目录中的所有文件，扩展名应该没有句号，即 [“zooScene”， “json”， “jpg”]    Return Example:        [&quot;soft_sunsetSides.zooScene&quot;, &quot;sun_redHarsh.zooScene&quot;, &quot;sun_warmGlow.zooScene&quot;]    :param directory: 用于搜索和返回文件名的目录 str    :param extensionList: A list of extensions to search [&quot;zooScene&quot;, &quot;json&quot;, &quot;jpg&quot;]    :type extensionList: list of basestring    :return fileList: A list of files returned that are in the directory and match the extension list    :rtype fileList: list()str    &quot;&quot;&quot;    fileList &#x3D; list()    if not os.path.isdir(directory):  # check if directory actually exists        return fileList  # emptyList and directory    for ext in extensionList:        for filePath in glob.glob(os.path.join(directory, &quot;*.&#123;&#125;&quot;.format(ext))):            fileList.append(os.path.basename(filePath))    # TODO: Probably shouldn&#39;t be using glob, return the current path to the directory    tempDir &#x3D; getTempDir()    os.chdir(tempDir)    return fileListdef saveJson(data, filepath, **kws):    &quot;&quot;&quot;此过程将给定数据保存到 json 文件    :param kws: Json Dumps arguments , see standard python docs    &quot;&quot;&quot;    try:        with open(filepath, &#39;w&#39;) as f:            json.dump(data, f, **kws)    except IOError:        print(&quot;Data not saved to file &#123;&#125;&quot;.format(filepath))        return False    print(&quot;-------&gt;&gt; file correctly saved to : &#123;0&#125;&quot;.format(filepath))    return Truedef ensureFolderExists(path, permissions&#x3D;0o775, placeHolder&#x3D;False):    &quot;&quot;&quot;如果该文件夹不存在，则将创建一个。由于版本控制错误而构建的函数与未提交的空文件夹，此文件夹可以生成占位符文件。    :param path: the folderpath to check or create    :type path: str    :param permissions: folder permissions mode    :type permissions: int    :param placeHolder: if True create a placeholder text file    :type placeHolder: bool    :raise OSError: raise OSError if the creation of the folder fails    &quot;&quot;&quot;    if not os.path.exists(path):        try:            print(&quot;Creating folder &#123;&#125; [&#123;&#125;]&quot;.format(path, permissions))            os.makedirs(path, permissions)            if placeHolder:                placePath &#x3D; os.path.join(path, &quot;placeholder&quot;)                if not os.path.exists(placePath):                    with open(placePath, &quot;wt&quot;) as fh:                        fh.write(&quot;Automatically Generated placeHolder file.&quot;)                        fh.write(&quot;The reason why this file exists is due to source control system&#39;s which do not &quot;                                 &quot;handle empty folders.&quot;)        except OSError as e:            # more less work if network race conditions(joy!)            raisedef loadJson(filePath):    &quot;&quot;&quot;    此过程加载并返回 json 文件的数据    :return type&#123;dict&#125;: the content of the file    &quot;&quot;&quot;    # load our file    try:        with loadFile(filePath) as f:            data &#x3D; json.load(f)    except Exception as er:        print(&quot;file (&#123;&#125;) not loaded&quot;.format(filePath))        raise er    # return the files data    return datadef getFileDependenciesList(zooSceneFullPath, ignoreThumbnail&#x3D;False):    &quot;&quot;&quot;检索依赖目录 目录名依赖项中所有文件的列表,文件没有完整路径，因此也会返回目录路径，文件是 [“文件名.abc”， “文件名.zooInfo”] 等    :param zooSceneFullPath: the full path to the file usually .zooscene but can be any extension    :type zooSceneFullPath: str    :param ignoreThumbnail: ignores the files called thumbnail.* useful for renaming    :type ignoreThumbnail: str    :return fileDependencyList: list of short name files found in the subdirectory DIRECTORYNAMEDEPENDENCIES    :rtype fileDependencyList: list    :return fullDirPath: the full path of the sub directory DIRECTORYNAMEDEPENDENCIES    :rtype fullDirPath: str    &quot;&quot;&quot;    fileDependencyList &#x3D; list()    zooSceneFileName &#x3D; os.path.basename(zooSceneFullPath)    directoryPath &#x3D; os.path.dirname(zooSceneFullPath)    fileNameNoExt &#x3D; os.path.splitext(zooSceneFileName)[0]    newDirectoryName &#x3D; &quot;_&quot;.join([fileNameNoExt, DIRECTORYNAMEDEPENDENCIES])    fullDirPath &#x3D; os.path.join(directoryPath, newDirectoryName)    if not os.path.exists(fullDirPath):  # doesn&#39;t already exist        return fileDependencyList, &quot;&quot;  # return empty as directory doesn&#39;t exist    os.chdir(fullDirPath)    for fileName in glob.glob(&quot;&#123;&#125;.*&quot;.format(fileNameNoExt)):        fileDependencyList.append(fileName)    if not ignoreThumbnail:        for fileName in glob.glob(&quot;thumbnail.*&quot;.format(fileNameNoExt)):            fileDependencyList.append(fileName)    #  return os.chdir to the temp dir as it gets in the way with file permissions for later renames!    os.chdir(tempfile.gettempdir())    return fileDependencyList, fullDirPathdef getSingleFileFromZooScene(zooSceneFullPath, fileExtension):    &quot;&quot;&quot;返回文件的名称（如果存在），扩展名为 zooSceneFullPath 中的 .abc    获取与 .zooScene 文件关联的子目录中的所有文件，并筛选文件类型,支持返回一个文件，第一个文件它发现不适合纹理    :param zooSceneFullPath:  the full path of the .zooScene file to be saved    :type zooSceneFullPath: str    :param fileExtension:  the file extension to find no &quot;.&quot;, so alembic is &quot;abc&quot;    :type fileExtension: str    :return extFileName: the filename (no directory) of the extension given &gt; for example &quot;myFileName.abc&quot;    :rtype extFileName: str    &quot;&quot;&quot;    extFileName &#x3D; &quot;&quot;    fileList, directory &#x3D; getFileDependenciesList(zooSceneFullPath)    if not directory:        return extFileName    for fileName in fileList:  # cycle through the files and find if a match with the extension        if fileName.endswith(fileExtension):            return os.path.join(directory, fileName)    return extFileNamedef loadFile(filepath):    if filepath.endswith(&quot;.zip&quot;):        with zipfile.ZipFile(filepath, &#39;r&#39;) as f:            yield f        return    elif &quot;.zip&quot; in filepath:        # load from zipfile        zippath, relativefilePath &#x3D; filepath.split(&quot;.zip&quot;)        zipPath &#x3D; zippath + &quot;.zip&quot;        with zipfile.ZipFile(zipPath, &#39;r&#39;) as zip:            path &#x3D; relativefilePath.replace(&quot;\\&quot;, &quot;&#x2F;&quot;).lstrip(&quot;&#x2F;&quot;)            for i in iter(zip.namelist()):                if path &#x3D;&#x3D; i:                    yield zip.open(i)                    break        return    with open(filepath) as f:        yield fdef createTagInfoDict(assetType, creator, website, tags, description, saveInfo, animInfo):    &quot;&quot;&quot;为zooInfo 文件创建一个字典    :param assetType: the information about asset type, model, scene, lights, shaders, etc    :type assetType: str    :param creator: the information about creator&#x2F;s    :type creator: str    :param website: the information about the creators website links    :type website: str    :param tags: the tag information    :type tags: str    :param description: the full description    :type description: str    :param saveInfo: the file information saved as a list [&quot;alembic&quot;, &quot;generic lights&quot;] etc    :type saveInfo: list    :param animInfo: the animation information of the file &quot;0 100&quot; or &quot;&quot; or None if none    :type animInfo: str    :return zooInfoDict: the dict containing all information including the file version number    :rtype zooInfoDict: str    &quot;&quot;&quot;    zooInfoDict &#x3D; &#123;INFOASSET: assetType,                   INFOCREATORS: creator,                   INFOWEBSITES: website,                   INFOTAGS: tags,                   INFODESCRIPTION: description,                   INFOSAVE: saveInfo,                   INFOANIM: animInfo,                   VERSIONKEY: GENERICVERSIONNO&#125;    return zooInfoDictdef getZooInfoFromFile(zooSceneFullPath, message&#x3D;True):    &quot;&quot;&quot;从 .zooScene 获取其他文件，例如从磁盘上的文件中获取 .zooInfo    :param zooSceneFullPath: the full path of the zooScene file, this will save out as another file zooInfo    :type zooSceneFullPath: str    :return zooInfoDict: the dictionary with all info information, if None the file wasn&#39;t found    :rtype zooInfoDict: dict    :return fileFound: was the zooInfo file found?    :rtype fileFound: bool    &quot;&quot;&quot;    zooInfoFileFullPath &#x3D; getSingleFileFromZooScene(zooSceneFullPath, ZOOINFOSUFFIX)    if not os.path.exists(zooInfoFileFullPath):  # doesn&#39;t exist        if message:            om2.MGlobal.displayWarning(&quot;ZooInfo File Not Found&quot;)        fileFound &#x3D; False        return createTagInfoDict(ASSETTYPES[0], &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;), fileFound  # return the empty dict as no file found    fileFound &#x3D; True    return loadJson(zooInfoFileFullPath), fileFound  # returns zooInfoDictdef createEmptyInfoDict():    &quot;&quot;&quot;创建一个空的 .zooInfo 字典&quot;&quot;&quot;    infoDict &#x3D; &#123;u&quot;assetType&quot;: u&quot;&quot;,                u&quot;animation&quot;: None,                u&quot;description&quot;: u&quot;&quot;,                u&quot;version&quot;: u&quot;1.0.0&quot;,                u&quot;tags&quot;: u&quot;&quot;,                u&quot;creators&quot;: u&quot;&quot;,                u&quot;saved&quot;: str(list()),                u&quot;websites&quot;: u&quot;&quot;                &#125;    return infoDictdef infoDictionaries(zooSceneNameList, directory):    &quot;&quot;&quot; 返回每个 .zooScene 文件的信息字典列表。这些词典包含作者、标签、描述等信息    :return infoDictList: 每个 .zooScene 文件的信息字典列表    :rtype infoDictList: list of dict    &quot;&quot;&quot;    infoDictList &#x3D; list()    if not zooSceneNameList:        return dict()    for zooSceneFile in zooSceneNameList:        lightPresetFullPath &#x3D; os.path.join(directory, zooSceneFile)        zooInfoDict, fileFound &#x3D; getZooInfoFromFile(lightPresetFullPath, message&#x3D;False)        if fileFound:            infoDictList.append(zooInfoDict)        else:            infoDictList.append(createEmptyInfoDict())    return infoDictListdef isImage(path):    try:        return imghdr.what(path) is not None or path.split(os.extsep)[-1] in QTSUPPORTEDIMAGES    except IOError:        return Falseclass ThumbnailDelegate(QStyledItemDelegate):    def __init__(self, parent):        super(ThumbnailDelegate, self).__init__(parent)    def sizeHint(self, option, index):        return index.model().itemFromIndex(index).sizeHint()    def paint(self, painter, options, index):        index.model().itemFromIndex(index).paint(painter, options, index)class ThumbListView(QListView):    contextMenuRequested &#x3D; Signal(list, object)    requestZoom &#x3D; Signal(object, float)    # QModelIndex, Treeitem    requestDoubleClick &#x3D; Signal(object, object)    zoomAmount &#x3D; 1    defaultMinIconSize &#x3D; 20    defaultMaxIconSize &#x3D; 512    defaultIconSize &#x3D; QSize(256, 256)    stateChanged &#x3D; Signal()    WheelEvent &#x3D; 1    EnterEvent &#x3D; 2    CalcInitialEvent &#x3D; 3    CalcEvent &#x3D; 4    VerticalSliderReleasedEvent &#x3D; 5    def __init__(self, parent&#x3D;None, delegate&#x3D;None, iconSize&#x3D;defaultIconSize, uniformItems&#x3D;False):        super(ThumbListView, self).__init__(parent&#x3D;parent)        self.setContextMenuPolicy(Qt.CustomContextMenu)        self.customContextMenuRequested.connect(self._contextMenu)        self.autoScale &#x3D; True        self.defaultSize &#x3D; None        self.initialIconSize &#x3D; None        self.columnQueue &#x3D; 0        self.columnOffset &#x3D; 1        self.zoomable &#x3D; True        self._iconSize &#x3D; QSize()        self.setIconSize(iconSize or self.defaultIconSize)        self.initUi()        self.maxColumns &#x3D; 8        self.setVerticalScrollBar(QScrollBar(self))        self.connections()        self._delegate &#x3D; delegate(self) if delegate is not None else ThumbnailDelegate(self)        self.setItemDelegate(self._delegate)        self.setUpdatesEnabled(True)        self._uniformItemSizes &#x3D; uniformItems        self.setUniformItemSizes(uniformItems)    def initUi(self):        self.setMouseTracking(True)        self.setSelectionRectVisible(True)        self.setViewMode(QListView.IconMode)        self.setResizeMode(QListView.Adjust)        self.setSelectionMode(QListView.SingleSelection)        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)        self.setDragEnabled(False)        self.setAcceptDrops(False)    def _contextMenu(self, position):        model &#x3D; self.model()        if model is None:            return        menu &#x3D; QMenu(self)        selectionModel &#x3D; self.selectionModel()        selection &#x3D; [model.itemFromIndex(index) for index in selectionModel.selectedIndexes()]        self.contextMenuRequested.emit(selection, menu)        menu.exec_(self.viewport().mapToGlobal(position))    def setUniformItemSizes(self, enable):        self._uniformItemSizes &#x3D; enable        if self.model():            self.model().setUniformItemSizes(enable)    def setIconSize(self, size):        self._iconSize &#x3D; size        super(ThumbListView, self).setIconSize(size)    def connections(self):        self.verticalScrollBar().sliderMoved.connect(self.verticalSliderMoved)        self.verticalScrollBar().sliderReleased.connect(self.verticalSliderReleased)        self.clicked.connect(lambda: self.stateChanged.emit())        self.activated.connect(lambda: self.stateChanged.emit())        # self.entered.connect(lambda: self.stateChanged.emit())    def wheelEvent(self, event):        &quot;&quot;&quot; 重写以处理缩放 listview.        :type event: :class:&#96;QEvent&#96;        &quot;&quot;&quot;        modifiers &#x3D; event.modifiers()        if self.zoomable and modifiers &#x3D;&#x3D; Qt.ControlModifier:            if event.delta() &gt; 0:                self.columnOffset -&#x3D; 1            else:                self.columnOffset +&#x3D; 1                self.columnOffset &#x3D; min(self.columnOffset, self.maxColumns)            size &#x3D; self.widgetSize()            index &#x3D; self.indexAt(event.pos())            # if its an invalid index, find closest instead            if not index.isValid():                index &#x3D; self.closestIndex(event.pos())            self.calcResize(size)            QTimer.singleShot(0, lambda: self.scrollTo(index))            event.accept()            self.stateChanged.emit()            return        super(ThumbListView, self).wheelEvent(event)        self.loadVisibleIcons()        self.stateChanged.emit()    def state(self):        &quot;&quot;&quot; Returns useful settings to copy from one list view behaviour to another        :return:        :rtype:        &quot;&quot;&quot;        selectedIndex &#x3D; self.selectionModel().currentIndex().row()        ret &#x3D; &#123;&quot;sliderPos&quot;: self.verticalScrollBar().value(),               &quot;sliderMin&quot;: self.verticalScrollBar().minimum(),               &quot;sliderMax&quot;: self.verticalScrollBar().maximum(),               &quot;selected&quot;: selectedIndex,               &quot;columns&quot;: self.columnOffset,               &quot;zoomAmount&quot;: self.zoomAmount,               &quot;iconSize&quot;: self._iconSize,               &quot;initialIconSize&quot;: self.initialIconSize,               &quot;defaultSize&quot;: self.defaultSize,               &quot;fixedSize&quot;: self.parentWidget().minimumSize()               &#125;        return ret    def setState(self, state):        &quot;&quot;&quot; Set the state of the listview with the new settings provided from ThumbListView.state()        :param state:        :type state:        :return:        :rtype:        &quot;&quot;&quot;        self.columnOffset &#x3D; state[&#39;columns&#39;]        self._iconSize &#x3D; state[&#39;iconSize&#39;]        self.zoomAmount &#x3D; state[&#39;zoomAmount&#39;]        self.defaultSize &#x3D; state[&#39;defaultSize&#39;]        self.initialIconSize &#x3D; state[&#39;initialIconSize&#39;]        fixedSize &#x3D; state[&#39;fixedSize&#39;]        if fixedSize.width() !&#x3D; 0:            self.parentWidget().setFixedWidth(fixedSize.width())        if fixedSize.height() !&#x3D; 0:            self.parentWidget().setFixedHeight(fixedSize.height())        self.calcResize(self.widgetSize())        self.verticalScrollBar().setMinimum(state[&#39;sliderMin&#39;])        self.verticalScrollBar().setMaximum(state[&#39;sliderMax&#39;])        self.verticalScrollBar().setValue(state[&#39;sliderPos&#39;])        self.loadVisibleIcons()        if state[&#39;selected&#39;] !&#x3D; -1:            QTimer.singleShot(0, lambda: self.delaySelect(state[&#39;selected&#39;]))    def delaySelect(self, sel):        &quot;&quot;&quot; Select index        :param sel:        :type sel:        :return:        :rtype:        &quot;&quot;&quot;        autoScroll &#x3D; self.hasAutoScroll()        self.setAutoScroll(False)        self.selectionModel().setCurrentIndex(self.model().index(sel, 0),                                              QItemSelectionModel.ClearAndSelect)        self.setAutoScroll(autoScroll)    def closestIndex(self, pos):        &quot;&quot;&quot; Get closest index based on pos        :param pos:        :type pos:        :return:        :rtype:        &quot;&quot;&quot;        maxDist &#x3D; -1        closest &#x3D; None        for index in self.visibleItems():            c &#x3D; self.visualRect(index)            if c.top() &lt;&#x3D; pos.y() &lt;&#x3D; c.bottom():  # Only choose the ones from the same row                dist &#x3D; pos.x() - c.center().x()                if maxDist &#x3D;&#x3D; -1 or dist &lt; maxDist:                    closest &#x3D; index                    maxDist &#x3D; dist        return closest    def loadVisibleIcons(self):        &quot;&quot;&quot; Loads visible icons in the view if they have not been loaded yet        :return:        :rtype:        &quot;&quot;&quot;        for index in self.visibleItems(pre&#x3D;5, post&#x3D;5):            try:                treeItem &#x3D; self.model().items[index.row()]                item &#x3D; treeItem.item()                if not item.iconLoaded():                    self.model().threadPool.start(item.iconThread)            except IndexError:                pass  # this should possibly be handled    def filter(self, text, tag&#x3D;None):        filterList &#x3D; self.model().filterList(text, tag)        self.loadVisibleIcons()    def verticalSliderReleased(self):        self.stateChanged.emit()    def verticalSliderMoved(self, pos):        &quot;&quot;&quot; On vertical slider moved, reload the visible icons        :return:        :rtype:        &quot;&quot;&quot;        self.loadVisibleIcons()    def model(self):        &quot;&quot;&quot; 获取 ListView model        :return:        :rtype: FileViewModel        &quot;&quot;&quot;        return super(ThumbListView, self).model()    def visibleItems(self, pre&#x3D;0, post&#x3D;0):        &quot;&quot;&quot; 获取可见项。如果要在开头和结尾添加额外的索引，请将 extra 设置为 1 或更多。它只会返回有效索引。        :param pre: Add extra items behind the currently visible items        :type pre: int        :param post: Add extra items after the currently visible items        :type post: int        :return: List of indices that are visible plus the pre and post. It only returns valid indices        :rtype: list of QModelIndex        &quot;&quot;&quot;        firstIndex &#x3D; self.indexAt(QPoint(0, 0))        viewportRect &#x3D; self.viewport().rect()        items &#x3D; list()        after &#x3D; post        i &#x3D; -pre  # We want to check indices behind the firstIndex        while True:            sibling &#x3D; firstIndex.sibling(firstIndex.row() + i, 0)            # The index is visually shown in the viewport?            if sibling.isValid() and viewportRect.intersects(self.visualRect(sibling)):                items.append(sibling)            elif sibling.isValid() and i &lt; 0:  # If it&#39;s indices behind the firstIndex                items.append(sibling)            elif sibling.isValid() and after &gt; 0:  # We want some extra indices at the end so keep going                after -&#x3D; 1                items.append(sibling)            elif i &lt; 0 or self.isIndexHidden(sibling):  # We want to keep going even if the behind siblings are invalid,                # Or hidden by search                i +&#x3D; 1                continue            else:                break  # Either it is invalid (reached the end) or we&#39;ve gone outside the screen            i +&#x3D; 1        return items    def scrollTo(self, index, hint&#x3D;None):        &quot;&quot;&quot; 覆盖默认的scrollTo并使用我们自己的        :param index:        :type index:        :return:        :rtype:        &quot;&quot;&quot;        if hint is None:            itemRect &#x3D; self.rectForIndex(index)            vbar &#x3D; self.verticalScrollBar()            mPos &#x3D; self.mapFromGlobal(QCursor().pos())  # Pos of mouse in listview widget            newPos &#x3D; (float(itemRect.y()) &#x2F; float(self.contentsSize().height())) * \                     (float(self.contentsSize().height())) - \                     mPos.y() + \                     (itemRect.height() * 0.5)  # maybe better if this is the mousePosition relative to the item instead            vbar.setValue(newPos)        else:            super(ThumbListView, self).scrollTo(index, hint)        self.loadVisibleIcons()    def widgetSize(self):        &quot;&quot;&quot; 不带垂直滚动条的大小        :return:        :rtype:        &quot;&quot;&quot;        size &#x3D; QSize(self.size())        size -&#x3D; QSize(self.verticalScrollBar().size().width(), 0)        return size    def _calculateZoom(self, delta):        &quot;&quot;&quot; 在通过 &#39;setZoomAmount&#39; 将其应用于图标之前计算缩放系数        :param delta: the delta value        :type delta: float        :return: the converted delta to zoom factor        :rtype: float        &quot;&quot;&quot;        inFactor &#x3D; 1.15        outFactor &#x3D; 1 &#x2F; inFactor        if delta &gt; 0:            zoomFactor &#x3D; inFactor        else:            zoomFactor &#x3D; outFactor        self.zoomAmount &#x3D; zoomFactor        return zoomFactor    def setZoomAmount(self, value):        &quot;&quot;&quot; 通过采用视图图标大小（）*值来设置此视图的缩放量        :param value:        :type value:        :return:        :rtype:        &quot;&quot;&quot;        currentSize &#x3D; QSize(self.initialIconSize)        newSize &#x3D; currentSize.width() * value        if newSize &lt; self.defaultMinIconSize:            return        currentSize.setWidth(newSize)        currentSize.setHeight(newSize)        self.requestZoom.emit(newSize, self.zoomAmount)        self.setIconSize(currentSize)    def mouseDoubleClickEvent(self, event):        if event.button() &#x3D;&#x3D; Qt.LeftButton:            index &#x3D; self.currentIndex()            model &#x3D; self.model()            if model is not None:                item &#x3D; model.itemFromIndex(index)                model.doubleClickEvent(index, item)                self.requestDoubleClick.emit(index, item)    def resizeEvent(self, event):        self.calcResize(event.size())        super(ThumbListView, self).resizeEvent(event)        self.loadVisibleIcons()    def setColumns(self, col):        &quot;&quot;&quot; 根据小组件的当前大小设置列数        :param col:        :type col:        :return:        :rtype:        &quot;&quot;&quot;        self.setIconSize(self.defaultIconSize)        # Sets columns on next calcResize        self.columnQueue &#x3D; col        # Change the default size, but only if it has been already set        if self.defaultSize is not None:            self.defaultSize &#x3D; self.widgetSize()            self.calcResize(self.defaultSize)    def calcResize(self, size):        &quot;&quot;&quot; 计算项目的大小调整        :param size:        :type size:        :return:        :rtype:        &quot;&quot;&quot;        if self.defaultSize is None:            # Initialize values            self.defaultSize &#x3D; size            self.initialIconSize &#x3D; QSize(self._iconSize)            self.stateChanged.emit()            QTimer.singleShot(0, self.refresh)            return        # Exclude the verticalScrollbar space        if not self.verticalScrollBar().isVisible():            size -&#x3D; QSize(self.verticalScrollBar().size().width(), 0)        size -&#x3D; QSize(dpiScale(2), 0)        # Calculate the number of columns        iconWidth &#x3D; (self.initialIconSize * self.zoomAmount).width() + self.spacing()        calcColumns &#x3D; int(size.width() &#x2F; iconWidth)  # calculate number of columns and round it down        columns &#x3D; calcColumns + self.columnOffset        # setColumn() was run so set the columns by changing the columnOffset        if self.columnQueue !&#x3D; 0:            diff &#x3D; self.columnQueue - calcColumns            columns &#x3D; self.columnQueue            self.columnOffset &#x3D; diff            self.columnQueue &#x3D; 0        columns &#x3D; max(columns, 1)  # atleast 1 column        # Set columnOffset maximum and minimum        # Calculate the new ratio to resize the icons to        ratio &#x3D; float(iconWidth * columns) &#x2F; float(size.width())        self.setZoomAmount(1 &#x2F; ratio)        self.stateChanged.emit()    def refresh(self):        &quot;&quot;&quot; 刷新，以便图标正确显示        :return:        :rtype:        &quot;&quot;&quot;        QCoreApplication.processEvents()        size &#x3D; self.size() - QSize(self.verticalScrollBar().size().width(), 0)        self.resizeEvent(QResizeEvent(size, size))        self.model().layoutChanged.emit()        if not self.updatesEnabled():            self.setUpdatesEnabled(True)    def setModel(self, model):        model.setUniformItemSizes(self._uniformItemSizes)        return super(ThumbListView, self).setModel(model)class ThumbnailViewWidget(QWidget):    &quot;&quot;&quot;用于查看缩略图的主要小部件，它运行在自定义QStandardItemModel上&quot;&quot;&quot;    requestSelectionChanged &#x3D; Signal(object, object)    def __init__(self, parent&#x3D;None, listDelegate&#x3D;None, listView&#x3D;ThumbListView, columns&#x3D;None, iconSize&#x3D;None,                 fixedWidth&#x3D;None, fixedHeight&#x3D;None, uniformIcons&#x3D;False):        &quot;&quot;&quot;        :param parent: the parent widget        :type parent: QWidget        :param listDelegate:        :type listDelegate:        :param listView:        :type listView:        :param columns: The number of square image columns, will vary for non-square images, overrides iconSize        :type columns: int        :param iconSize: Set the icon size in pixels, will be overridden by columns        :type iconSize: QSize        :param fixedWidth: The fixed width of the widget in pixels, dpi handled        :type fixedWidth: int        :param fixedHeight: the fixed height of the widget in pixels, dpi handled        :type fixedHeight: int        :param uniformIcons: Will keep the icons square, images will be clipped if True, non square if False        :type uniformIcons: bool        &quot;&quot;&quot;        super(ThumbnailViewWidget, self).__init__(parent&#x3D;parent)        self.qModel &#x3D; None        self.listDelegate &#x3D; listDelegate        self.listViewClass &#x3D; listView  # type: type(ThumbListView)        self.uniformIcons &#x3D; uniformIcons        self.initUi()        self.autoResizeItems &#x3D; True        self.pagination &#x3D; True        if iconSize is not None:            self.setIconSize(iconSize)        if columns:            self.setColumns(columns)        if fixedHeight:            self.setFixedHeight(dpiScale(fixedHeight))        if fixedWidth:            self.setFixedWidth(dpiScale(fixedWidth))    def initUi(self):        layout &#x3D; QVBoxLayout(self)        self.setLayout(layout)        self.listView &#x3D; self.listViewClass(parent&#x3D;self, delegate&#x3D;self.listDelegate, uniformItems&#x3D;self.uniformIcons)        layout.addWidget(self.listView)        self.listView.verticalScrollBar().valueChanged.connect(self.paginationLoadNextItems)        self.listView.contextMenuRequested.connect(self.contextMenu)        layout.setContentsMargins(0, 0, 0, 0)        self.listView.setSpacing(dpiScale(0))    def setModel(self, model):        self.listView.setModel(model)        model.refreshRequested.connect(self.listView.loadVisibleIcons)        model.view &#x3D; self        self.qModel &#x3D; model        if self.listView.selectionModel():            self.listView.selectionModel().selectionChanged.connect(self.onSelectionChanged)    def refreshListView(self):        &quot;&quot;&quot; 刷新列表视图，确保图标正确调整大小&quot;&quot;&quot;        self.listView.refresh()    def invisibleRootItem(self):        if self.qModel:            return self.qModel.invisibleRootItem()    def iconSize(self):        return self.listView.iconSize()    def setIconSize(self, size):        if size &#x3D;&#x3D; self.listView.iconSize():            return        maxSize &#x3D; self.listView.defaultMaxIconSize        minSize &#x3D; self.listView.defaultMinIconSize        width &#x3D; size.width()        height &#x3D; size.height()        if width &gt; maxSize or height &gt; maxSize:            size &#x3D; QSize(maxSize, maxSize)        elif width &lt; minSize or height &lt; minSize:            size &#x3D; QSize(minSize, minSize)        self.listView.setIconSize(size)    def filter(self, text, tag&#x3D;None):        self.listView.filter(text, tag)    def setColumns(self, col):        &quot;&quot;&quot; 将列重置为默认值&quot;&quot;&quot;        self.listView.setColumns(col)    def setIconMinMax(self, size):        &quot;&quot;&quot; 设置最小和最大图标大小        :param size: 图标大小的最小值和最大值        :type size: tuple(int, int)        &quot;&quot;&quot;        minSize &#x3D; size[0]        maxSize &#x3D; size[1]        self.listView.defaultMinIconSize &#x3D; minSize        self.listView.defaultMaxIconSize &#x3D; maxSize        currentSize &#x3D; self.listView.iconSize()        width &#x3D; currentSize.width()        height &#x3D; currentSize.height()        if width &gt; maxSize or height &gt; maxSize:            size &#x3D; QSize(maxSize, maxSize)            self.listView.setIconSize(size)        elif width &lt; minSize or height &gt; minSize:            size &#x3D; QSize(minSize, minSize)            self.listView.setIconSize(size)    def paginationLoadNextItems(self):        &quot;&quot;&quot;当垂直滑块达到最大值时调用模型 loadData 方法的简单方法，对加载模型的下一页数据很有用。&quot;&quot;&quot;        if not self.pagination:            return        model &#x3D; self.listView.model()        if model is None:            return        vbar &#x3D; self.listView.verticalScrollBar()        sliderMax &#x3D; vbar.maximum()        sliderPos &#x3D; vbar.sliderPosition()        if sliderPos &#x3D;&#x3D; sliderMax:            indexes &#x3D; self.listView.selectionModel().selection().indexes()            model.loadData()            # Reselect selection            self.listView.setAutoScroll(False)            [self.listView.selectionModel().setCurrentIndex(index, QItemSelectionModel.SelectCurrent) for index             in indexes]            self.listView.setAutoScroll(True)    def contextMenu(self, items, menu):        pass    def onSelectionChanged(self):        index &#x3D; self.listView.currentIndex()        model &#x3D; self.listView.model()        if model is not None:            item &#x3D; model.itemFromIndex(index)            model.onSelectionChanged(index, item)            self.requestSelectionChanged.emit(index, item)class SettingObject(dict):    &quot;&quot;&quot;设置类，用于封装给定设置的 json 数据&quot;&quot;&quot;    def __init__(self, root, relativePath&#x3D;None, **kwargs):        relativePath &#x3D; relativePath        if not relativePath.suffix:            relativePath &#x3D; relativePath.with_suffix(&quot;.json&quot;)        kwargs[&quot;relativePath&quot;] &#x3D; relativePath        kwargs[&quot;root&quot;] &#x3D; root        super(SettingObject, self).__init__(**kwargs)    def rootPath(self):        if self.root:            return self.root        return    def path(self):        return self.root &#x2F; self[&quot;relativePath&quot;]    def isValid(self):        if self.root is None:            return False        elif (self.root &#x2F; self.relativePath).exists():            return True        return False    def __repr__(self):        return &quot;&lt;&#123;&#125;&gt; root: &#123;&#125;, path: &#123;&#125;&quot;.format(self.__class__.__name__, self.root, self.relativePath)    def __cmp__(self, other):        return self.name &#x3D;&#x3D; other and self.version &#x3D;&#x3D; other.version    def __getattr__(self, item):        try:            return self[item]        except KeyError:            return super(SettingObject, self).__getattribute__(item)    def __setattr__(self, key, value):        self[key] &#x3D; value    def save(self, indent&#x3D;False, sort&#x3D;False):        &quot;&quot;&quot;将文件作为 json 保存到磁盘        :param indent: 如果为 True，则很好地格式化 json（缩进 &#x3D; 2）        :type indent: bool        :return fullPath: 保存的 .json 文件的完整路径        :rtype fullPath: str        &quot;&quot;&quot;        root &#x3D; self.root        if not root:            return        fullPath &#x3D; root &#x2F; self.relativePath        ensureFolderExists(str(fullPath.parent))        output &#x3D; copy.deepcopy(self)        del output[&quot;root&quot;]        del output[&quot;relativePath&quot;]        exts &#x3D; fullPath.suffix        if not exts:            fullPath &#x3D; fullPath.with_suffix(&quot;json&quot;)        if not indent:            saveJson(output, str(fullPath), sort_keys&#x3D;sort)        else:            saveJson(output, str(fullPath), indent&#x3D;2, sort_keys&#x3D;sort)        return self.path()class ItemSignals(QObject):    &quot;&quot;&quot;    定义正在运行的工作线程中可用的信号。    支持的信号包括：    完成：无数据    错误：&#96;tuple&#96; (exctype, value, traceback.format_exc() )    处理结果：&#96;object&#96; 从处理中返回的数据，任何东西    处理进度：&#96;int&#96; 指示进度百分比    &quot;&quot;&quot;    updated &#x3D; Signal(object)    finished &#x3D; Signal()    error &#x3D; Signal(tuple)    result &#x3D; Signal(object)    progress &#x3D; Signal(int)class TreeItem(QStandardItem):    backgroundColor &#x3D; QColor(70, 70, 80)    backgroundColorSelected &#x3D; QColor(50, 180, 240)    backgroundColorHover &#x3D; QColor(50, 180, 150)    textColorSelected &#x3D; QColor(255, 255, 255)    textColor &#x3D; QColor(255, 255, 255)    textBGColor &#x3D; QColor(0, 0, 0)    backgroundBrush &#x3D; QBrush(backgroundColor)    backgroundColorSelectedBrush &#x3D; QBrush(backgroundColorSelected)    backgroundColorHoverBrush &#x3D; QBrush(backgroundColorHover)    borderColorSelected &#x3D; QColor(0, 0, 0)    borderColorHover &#x3D; QColor(0, 0, 0)    borderColor &#x3D; QColor(0, 0, 0)    backgroundColorIcon &#x3D; QColor(50, 50, 50)    def __init__(self, item, parent&#x3D;None, themePref&#x3D;None, squareIcon&#x3D;False):        super(TreeItem, self).__init__(parent&#x3D;parent)        self.currentTheme &#x3D; &quot;&quot;        self.padding &#x3D; 0        self.textHeight &#x3D; 11        self.borderWidth &#x3D; 1        self.textPaddingH &#x3D; 7        self.textPaddingV &#x3D; 2        self.showText &#x3D; True        self._item &#x3D; item        self._pixmap &#x3D; None        self.iconSize &#x3D; QSize(256, 256)        self.loaderThread &#x3D; ThreadedIcon(item.iconPath)        self.setEditable(False)        self.aspectRatio &#x3D; Qt.KeepAspectRatioByExpanding        self.themePref &#x3D; themePref        self.squareIcon &#x3D; squareIcon        self.setBorderWidth(1)        if themePref is not None:            self.updateTheme()    def updateTheme(self):        self.currentTheme &#x3D; self.themePref.currentTheme()        self.textHeight &#x3D; self.themePref.DEFAULT_FONTSIZE        self.borderWidth &#x3D; self.themePref.ONE_PIXEL        self.textPaddingH &#x3D; dpiScale(7)        self.textPaddingV &#x3D; dpiScale(3)        self.backgroundColorSelected &#x3D; QColor(*self.themePref.BROWSER_SELECTED_COLOR)        self.backgroundColor &#x3D; QColor(*self.themePref.BROWSER_BG_COLOR)        self.backgroundBrush &#x3D; QBrush(self.backgroundColor)        self.backgroundColorHover &#x3D; self.backgroundColor        self.backgroundColorHoverBrush &#x3D; QBrush(self.backgroundColorHover)        self.backgroundColorSelectedBrush &#x3D; QBrush(self.backgroundColorSelected)        self.backgroundColorIcon &#x3D; QColor(*self.themePref.BROWSER_ICON_BG_COLOR)        self.borderColor &#x3D; QColor(self.backgroundColor)        self.textColorSelected &#x3D; QColor(*self.themePref.TBL_TREE_ACT_TEXT_COLOR)        self.borderColorSelected &#x3D; QColor(*self.themePref.BROWSER_SELECTED_COLOR)        self.borderColorHover &#x3D; QColor(*self.themePref.BROWSER_BORDER_HOVER_COLOR)        self.textColor &#x3D; QColor(*self.themePref.BROWSER_TEXT_COLOR)        self.textBGColor &#x3D; QColor(*self.themePref.BROWSER_TEXT_BG_COLOR)    def item(self):        return self._item    def applyFromImage(self, image):        pixmap &#x3D; QPixmap()        pixmap &#x3D; pixmap.fromImage(image)        self._pixmap &#x3D; pixmap        self.model().dataChanged.emit(self.index(), self.index())    def setIconPath(self, iconPath):        self._item.iconPath &#x3D; iconPath        self._pixmap &#x3D; QPixmap(iconPath)    def pixmap(self):        &quot;&quot;&quot;        :return:        :rtype: QPixmap        &quot;&quot;&quot;        if not self._pixmap.isNull():            return self._pixmap        elif not os.path.exists(self._item.iconPath):            return QPixmap()        return self._pixmap    def toolTip(self):        return self._item.description()    def isEditable(self, *args, **kwargs):        return False    def sizeHint(self):        # todo: could be done better        sizeHint &#x3D; self.model().view.iconSize()        if self._pixmap:            pxSize &#x3D; self._pixmap.rect().size()        else:            pxSize &#x3D; QSize(1, 1)        size &#x3D; min(sizeHint.height(), sizeHint.width())        pxSize &#x3D; QSize(128, 128) if pxSize &#x3D;&#x3D; QSize(0, 0) else pxSize        if self.squareIcon:            aspectRatio &#x3D; 1        else:            aspectRatio &#x3D; float(pxSize.width()) &#x2F; float(pxSize.height())            if aspectRatio &lt;&#x3D; 1:                sizeHint.setWidth(size * aspectRatio)            else:                sizeHint.setWidth(size * aspectRatio)        sizeHint.setHeight(size + 1)        if self.showText:            sizeHint.setHeight(sizeHint.height() + self.textHeight + self.textPaddingV * 2)        return sizeHint    def font(self, index):        return QFont(&quot;Roboto&quot;)    def textAlignment(self, index):        return Qt.AlignLeft | Qt.AlignBottom    def iconAlignment(self, index):        return Qt.AlignLeft | Qt.AlignVCenter    def removeRow(self, item):        if item.loaderThread.isRunning:            item.loaderThread.wait()        return super(TreeItem, self).removeRow(item)    def removeRows(self, items):        for item in items:            if item.loaderThread.isRunning:                item.loaderThread.wait()        return super(TreeItem, self).removeRows(items)    def isSelected(self, option):        return option.state &amp; QStyle.State_Selected    def isMouseOver(self, option):        return option.state &amp; QStyle.State_MouseOver    def setBorderWidth(self, width):        self.borderWidth &#x3D; dpiScale(width)    def paint(self, painter, option, index):        painter.save()        self._paintBackground(painter, option, index)        if self.showText:            self._paintText(painter, option, index)        if self._pixmap is not None:            self._paintIcon(painter, option, index)        painter.restore()    def _paintIcon(self, painter, option, index):        &quot;&quot;&quot;        :param painter:        :type painter:  QPainter        :param option:        :type option:        :param index:        :type index:        :return:        :rtype:        &quot;&quot;&quot;        rect &#x3D; self.iconRect(option)        pixmap &#x3D; self.pixmap()  # type: QPixmap        if pixmap.isNull():            return        pixmap &#x3D; pixmap.scaled(            rect.width() - self.borderWidth * 2,            rect.height() - self.borderWidth * 2,            self.aspectRatio,            Qt.SmoothTransformation,        )        pixmapRect &#x3D; QRect(rect)        pixmapRect.setWidth(pixmap.width())        pixmapRect.setHeight(pixmap.height())        aspectRatio &#x3D; float(pixmap.width()) &#x2F; float(pixmap.height())        iconAlign &#x3D; self.iconAlignment(None)        if iconAlign &amp; Qt.AlignHCenter &#x3D;&#x3D; Qt.AlignHCenter:            x &#x3D; float(rect.width() - pixmap.width()) * 0.5        elif iconAlign &amp; Qt.AlignLeft &#x3D;&#x3D; Qt.AlignLeft:            x &#x3D; 0        else:  # todo: set the rest of the flags            x &#x3D; float(rect.width() - pixmap.width()) * 0.5            print(&quot;Flags not set for TreeItem._paintIcon()! x-Value&quot;)        if iconAlign &amp; Qt.AlignVCenter &#x3D;&#x3D; Qt.AlignVCenter:            y &#x3D; float(rect.height() - pixmap.height()) * 0.5        else:  # todo: set the rest of the flags            y &#x3D; float(rect.height() - pixmap.height()) * 0.5            print(&quot;Flags not set for TreeItem._paintIcon() y-Value!  &quot;)        x +&#x3D; self.borderWidth        pixmapRect.translate(x, y)        # Hacky fixes to visuals &#x3D;[        if self.squareIcon:            clippedRect &#x3D; QRect(pixmapRect)            clippedRect.setWidth(clippedRect.width() - 1)            if clippedRect.height() &lt;&#x3D; clippedRect.width():  # Wide icons                translate &#x3D; (clippedRect.width() - clippedRect.height()) &#x2F; 2                clippedRect.setWidth(clippedRect.height() - 1)                pixmapRect.translate(-translate, 0)            else:  # Tall Icons                translate &#x3D; (clippedRect.height() - clippedRect.width()) &#x2F; 2                clippedRect.setHeight(clippedRect.width() + 2)                clippedRect.setWidth(clippedRect.width())                clippedRect.translate(0, translate)            painter.setClipRect(clippedRect)        else:            if aspectRatio &gt; 1:                pixmapRect.setWidth(pixmapRect.width())            elif aspectRatio &gt;&#x3D; 1:                pixmapRect.setWidth(pixmapRect.width() - 1)        painter.drawPixmap(pixmapRect, pixmap)    def _paintText(self, painter, option, index):        isSelected &#x3D; self.isSelected(option)        isMouseOver &#x3D; self.isMouseOver(option)        text &#x3D; self._item.name        color &#x3D; self.textColorSelected if isSelected else self.textColor        rect &#x3D; QRect(option.rect)        width &#x3D; rect.width() - self.textPaddingH * 2        height &#x3D; rect.height()        padding &#x3D; self.padding        x, y &#x3D; padding, padding        rect.translate(x + self.textPaddingH, y + self.textPaddingV)        rect.setWidth(width - padding)        rect.setHeight(height - padding - self.textPaddingV)        font &#x3D; self.font(index)        font.setPixelSize(self.textHeight)        align &#x3D; self.textAlignment(index)        metrics &#x3D; QFontMetricsF(font)        textWidth &#x3D; metrics.width(text)        # does the text fit? if not cut off the text        if textWidth &gt; rect.width() - padding:            text &#x3D; metrics.elidedText(text, Qt.ElideRight, rect.width())        if isSelected:            textBgColor &#x3D; self.borderColorSelected        else:            textBgColor &#x3D; self.textBGColor        textBg &#x3D; QRect(option.rect)        textBg.setTop(textBg.top() + textBg.height() - (self.textHeight + self.textPaddingV * 2))        textBg.translate(max(1, self.borderWidth * 0.5), max(1, self.borderWidth * 0.5) - 2)        textBg.setWidth(textBg.width() - self.borderWidth * 2 - 1)        textBg.setHeight(self.textHeight + self.textPaddingV)        painter.setBrush(textBgColor)        painter.setPen(textBgColor)        painter.drawRect(textBg)        pen &#x3D; QPen(color)        painter.setPen(pen)        painter.setFont(font)        painter.drawText(rect, align, text)    def _paintBackground(self, painter, option, index):        isSelected &#x3D; self.isSelected(option)        isMouseOver &#x3D; self.isMouseOver(option)        if isSelected:            brush &#x3D; self.backgroundColorSelectedBrush            if isMouseOver:                borderColor &#x3D; self.borderColorHover            else:                borderColor &#x3D; self.borderColorSelected        elif isMouseOver:            brush &#x3D; self.backgroundColorHoverBrush            borderColor &#x3D; self.borderColorHover        else:            brush &#x3D; self.backgroundBrush            borderColor &#x3D; self.borderColor        pen &#x3D; QPen(borderColor)        pen.setJoinStyle(Qt.MiterJoin)        pen.setWidth(self.borderWidth)        painter.setPen(pen)        rect &#x3D; QRect(option.rect)        rect.setWidth(rect.width() - self.borderWidth)        rect.setHeight(rect.height() - self.borderWidth)        rect.translate(self.borderWidth * 0.5, self.borderWidth * 0.5)        painter.setBrush(brush)        painter.drawRect(rect)        # Icon background        iconPen &#x3D; QPen(self.backgroundColorIcon)        iconPen.setWidth(0)        iconRect &#x3D; QRect(rect)        painter.setBrush(QBrush(self.backgroundColorIcon))        iconRect.setHeight(iconRect.height() - (self.textHeight + self.textPaddingV * 2))        iconRect.translate(max(1, self.borderWidth * 0.5), max(1, self.borderWidth * 0.5))        iconRect.setWidth(iconRect.width() - self.borderWidth * 2)        painter.setPen(iconPen)        painter.drawRect(iconRect)    def iconRect(self, option):        padding &#x3D; self.padding        rect &#x3D; option.rect        width &#x3D; rect.width() - padding        height &#x3D; rect.height() - padding        # deal with the text #        if self.showText:            height -&#x3D; self.textHeight + self.textPaddingV * 2        rect.setWidth(width)        rect.setHeight(height)        x &#x3D; padding + (float(width - rect.width()) * 0.5)        y &#x3D; padding + (float(height - rect.height()) * 0.5)        rect.translate(x, y)        return rectclass ThreadedIcon(QRunnable):    def __init__(self, iconPath, width&#x3D;None, height&#x3D;None, *args, **kwargs):        super(ThreadedIcon, self).__init__(*args, **kwargs)        self.signals &#x3D; ItemSignals()        # Add the callback to our kwargs        kwargs[&#39;progress_callback&#39;] &#x3D; self.signals.progress        self._path &#x3D; iconPath        self.width &#x3D; width        self.height &#x3D; height        self.placeHolderImage &#x3D; QImage(50, 50, QImage.Format_ARGB32)        self.placeHolderImage.fill(qRgb(96, 96, 96))        self._finished &#x3D; False    def finished(self, state):        self._finished &#x3D; state        self.signals.finished.emit()    def isFinished(self):        return self._finished    @Slot()    def run(self):        if not self._path or self._finished:            return        self.signals.updated.emit(self.placeHolderImage)        try:            image &#x3D; QImage(self._path)        except Exception as er:            self.signals.error.emit((er,))            self.finished(True)            return        self.signals.updated.emit(image)        self.finished(True)class BaseItem(object):    def __init__(self, name&#x3D;None, description&#x3D;None, iconPath&#x3D;None):        self.name &#x3D; name or &quot;&quot;        self.iconPath &#x3D; iconPath or &quot;&quot;        self._description &#x3D; description or &quot;&quot;        self.metadata &#x3D; &#123;&#125;        self.user &#x3D; &quot;&quot;        self.iconThread &#x3D; None  # type: ThreadedIcon    def description(self):        return self._description    def iconLoaded(self):        if self.iconThread is not None and self.iconThread.isFinished():            return True        return False    def tags(self):        return self.metadata.get(&quot;metadata&quot;, &#123;&#125;).get(&quot;tags&quot;, [])    def hasTag(self, tag):        for i in self.tags:            if tag in i:                return True        return False    def hasAnyTags(self, tags):        for i in tags:            if self.hasTag(i):                return True        return False    def serialize(self):        return &#123;&quot;metadata&quot;: &#123;&quot;time&quot;: &quot;&quot;,                             &quot;version&quot;: &quot;&quot;,                             &quot;user&quot;: &quot;&quot;,                             &quot;name&quot;: self.name,                             &quot;application&quot;: &#123;&quot;name&quot;: &quot;&quot;,                                             &quot;version&quot;: &quot;&quot;&#125;,                             &quot;description&quot;: &quot;&quot;,                             &quot;tags&quot;: []&#125;,                &#125;class FileViewModel(QStandardItemModel):    parentClosed &#x3D; Signal(bool)    doubleClicked &#x3D; Signal(str)    selectionChanged &#x3D; Signal(str)    refreshRequested &#x3D; Signal()    def __init__(self, view, directory&#x3D;None, extensions&#x3D;None, chunkCount&#x3D;20, uniformIcons&#x3D;False):        &quot;&quot;&quot; 覆盖基本模型以处理缩略图视图小部件数据的加载，例如。特定文件&#x2F;图像        此类是附加到缩略图视图的缩略图模型的最基本形式,给定并填充有“png”、“jpg”或“jpeg”图像的目录。        工具提示也是从文件名生成的,可以进一步覆盖此类，以便在子目录（如 .zooScene 文件）中加载自定义图像。        :param view: The viewer to assign this model data?        :type view: thumbwidget.ThumbListView        :param directory: The directory full path where the .zooScenes live        :type directory: str        :param chunkCount: The number of images to load at a time into the ThumbnailView widget        :type chunkCount: int        :param extensions: The image file extensions to override, otherwise will be [&quot;png&quot;, &quot;jpg&quot;, &quot;jpeg&quot;]        :type extensions: list of basestring        :param uniformIcons: False keeps the images non-square.  True the icons will be square, clipped on longest axis        :type uniformIcons: bool        &quot;&quot;&quot;        super(FileViewModel, self).__init__(parent&#x3D;view)        self.view &#x3D; view        self.extensions &#x3D; extensions        self.chunkCount &#x3D; chunkCount        self.currentFilesList &#x3D; []  # the files loaded in the viewer, empty while initializing        self.infoDictList &#x3D; None  # usually used for generating tooltips        self.toolTipList &#x3D; None  # list of tooltips to match each images        self.currentImage &#x3D; None  # the current image name selected (no image highlighted on creation)        self.fileNameList &#x3D; None  # each file&#39;s name with an extension        self.fileNameListNoExt &#x3D; None  # each file&#39;s name without an extension, for display        self.directory &#x3D; None        self.themePref &#x3D; None        self.threadPool &#x3D; QThreadPool.globalInstance()        self.lastFilter &#x3D; &quot;&quot;        self.uniformIcons &#x3D; uniformIcons        self.dynamicLoading &#x3D; True  # Dynamic icon loading        # load the images        if directory is not None:            self.setDirectory(directory, True)    def setDirectory(self, directory, refresh&#x3D;True):        &quot;&quot;&quot;用于设置或更改目录&quot;&quot;&quot;        self.directory &#x3D; directory        if refresh:            self.refreshList()    def refreshList(self):        &quot;&quot;&quot; 如果内容已修改，则刷新图标列表，不更改根目录 &quot;&quot;&quot;        self.view.setUpdatesEnabled(False)        self.clear()        self.refreshModelData()        self.loadData()        self.view.setUpdatesEnabled(True)    def _thumbnails(self, extensions&#x3D;None):        &quot;&quot;&quot; 获取文件缩略图的完整路径名        在这种情况下，缩略图是文件（图像）本身            [&quot;C:&#x2F;aPath&#x2F;image01.jpg&quot;, &quot;C:&#x2F;aPath&#x2F;image02.jpg&quot;]        如果您需要从其他位置获取缩略图，即 .zooScene 或 .hdr 文件的缩略图，请覆盖此设置        :type extensions: 文件扩展名列表或设置为“None”以使用所有图像        :return: List of paths to image files        :rtype: list of basestring        &quot;&quot;&quot;        results &#x3D; []        for i in self.fileNameList:            fullPath &#x3D; os.path.join(self.directory, i)            if extensions is None and isImage(fullPath):                results.append(fullPath)            else:                # todo: do extensions                pass        return results    def _infoDictionaries(self):        &quot;&quot;&quot;重写基类,返回每个 .zooScene 文件的信息字典列表。这些词典包含作者、标签、描述等信息        :return infoDictList: A list of info dictionaries for each .zooScene file        :rtype infoDictList: list(dict)        &quot;&quot;&quot;        return infoDictionaries(self.fileNameList, self.directory)    def _toolTips(self):        &quot;&quot;&quot;重写基类将_toolTips生成为列表，由 self.infoDictList 构造而成&quot;&quot;&quot;        self.toolTipList &#x3D; list()        for i, thumb in enumerate(self.currentFilesList):            self.toolTipList.append(self._createToolTip(self.infoDictList[i], self.fileNameList[i]))    def _createToolTip(self, infoDictSingle, fileName):        &quot;&quot;&quot;重写基类,从单个 zooScene 文件创建单个工具提示        :param zooScenePath: The full path to the zooScene image        :type zooScenePath: str        :param infoDictSingle: The information dictionary with tag author and description information        :type infoDictSingle: str        :return toolTip: The tooltip description        :rtype toolTip: str        &quot;&quot;&quot;        if not infoDictSingle:  # dict is none so return file path as tooltip            return os.path.join(self.directory, fileName)        # breaks on some unicode so convert to plain text        filepath &#x3D; &quot;&#123;&#125; &quot;.format(os.path.join(self.directory, fileName))        info &#x3D; &quot;&quot;        website &#x3D; &quot;&quot;        toolTip &#x3D; (&quot;&#123;&#125;&#123;&#125;&#123;&#125; &quot;.format(info, filepath, website))        return toolTip    def clear(self):        &quot;&quot;&quot;清除模型中的图像和数据，通常在刷新时使用&quot;&quot;&quot;        # remove any threads that haven&#39;t started yet        self.threadPool.clear()        while not self.threadPool.waitForDone():            continue        # clear any items, this is necessary to get python to GC alloc memory        self.items &#x3D; []        self.loadedCount &#x3D; 0        self.currentFilesList &#x3D; []        super(FileViewModel, self).clear()    def fileList(self):        &quot;&quot;&quot;更新self.fileNameList ,可以覆盖        &quot;&quot;&quot;        if not self.extensions:            self.extensions &#x3D; [&quot;png&quot;, &quot;jpg&quot;, &quot;jpeg&quot;]        if not isinstance(self.extensions, list):            raise ValueError(&quot;Extensions must be list, \&quot;&#123;&#125;\&quot; type given \&quot;&#123;&#125;\&quot; &quot;.format(type(self.extensions),                                                                                         self.extensions))        self.fileNameList &#x3D; filesByExtension(self.directory, self.extensions)    def filterList(self, text, tag&#x3D;None):        &quot;&quot;&quot; 返回在搜索中显示或隐藏的行的整数列表        :param text:        :type text:        :param tag:        :type tag: 字符串或列表        :return:        :rtype:        &quot;&quot;&quot;        filterList &#x3D; list()        if isinstance(tag, string_types):            tag &#x3D; [tag]        for i in range(len(self.infoDictList)):            for t in tag:                if t is None or t &#x3D;&#x3D; &quot;filename&quot;:                    for j, fileName in enumerate(self.fileNameListNoExt):                        if text.lower() in fileName.lower():                            filterList.append(j)                else:                    if text.lower() in self.infoDictList[i][t.lower()].lower():                        filterList.append(i)        for i in range(len(self.fileNameListNoExt)):            self.view.listView.setRowHidden(i, i not in filterList)  # Show row if not in filterList        self.lastFilter &#x3D; text        return filterList    def refreshModelData(self):        &quot;&quot;&quot;Needs to create&#x2F;recreate the thumbnail lists, tooltips and infoDict data        &quot;&quot;&quot;        self.fileList()  # updates self.fileNameList        self.fileNameListNoExt &#x3D; [os.path.splitext(preset)[0] for preset in self.fileNameList]        self.currentFilesList &#x3D; self._thumbnails()        self.infoDictList &#x3D; self._infoDictionaries()        self._toolTips()  # generates self.toolTipList        self.refreshRequested.emit()    def lazyLoadFilter(self):        &quot;&quot;&quot;Breaks up the lists self.currentFilesList, self.fileNameList, self.toolTipList for lazy loading.        Can be overridden, usually to choose if the display names should have extensions or not        Default is no extensions on display names        :return filesToLoad: The file name fullpath list (with extensions)        :rtype filesToLoad: list of basestring        :return namesToLoad: The name of the item, will be the label under the image, usually extension removed        :rtype namesToLoad: list of basestring        :return tooltipToLoad: The toolTip list to load        :rtype tooltipToLoad: list of basestring        &quot;&quot;&quot;        if len(self.currentFilesList) &lt; self.loadedCount:            filesToLoad &#x3D; self.currentFilesList            namesToLoad &#x3D; self.fileNameListNoExt            tooltipToLoad &#x3D; self.toolTipList        else:            filesToLoad &#x3D; self.currentFilesList[self.loadedCount: self.loadedCount + self.chunkCount]            namesToLoad &#x3D; self.fileNameListNoExt[self.loadedCount: self.loadedCount + self.chunkCount]            tooltipToLoad &#x3D; self.toolTipList[self.loadedCount: self.loadedCount + self.chunkCount]        return filesToLoad, namesToLoad, tooltipToLoad    def loadData(self):        &quot;&quot;&quot; Overridden method that prepares the images for loading and viewing.        Is filtered first via self.lazyLoadFilter()        From base class documentation:            Lazy loading happens either on first class initialization and any time the vertical bar hits the max value,            we then grab the current the new file chunk by files[self.loadedCount: loadedCount + self.chunkCount] that            way we are only loading a small amount at a time.            Since this is an example of how to use the method , you can approach it in any way you wish but for each item you            add you must initialize a item.BaseItem() or custom subclass and a item.treeItem or subclass which handles the            qt side of the data per item        &quot;&quot;&quot;        if self.lastFilter !&#x3D; &quot;&quot;:  # Don&#39;t load any new data if theres a search going on            return        filesToLoad, namesToLoad, tooltipToLoad &#x3D; self.lazyLoadFilter()        # Load the files        for i, f in enumerate(filesToLoad):            if f is None:                f &#x3D; r&quot;C:\Users\mirror\Documents\zoo_preferences\assets\model_assets\scene_lightSetup_empty_fileDependencies\thumbnail.jpg&quot;            workerThread &#x3D; ThreadedIcon(iconPath&#x3D;f)            # create an item for the image type            it &#x3D; BaseItem(name&#x3D;namesToLoad[i], iconPath&#x3D;f, description&#x3D;tooltipToLoad[i])            qitem &#x3D; self.createItem(item&#x3D;it)            workerThread.signals.updated.connect(partial(self.setItemIconFromImage, qitem))            self.parentClosed.connect(workerThread.finished)            it.iconThread &#x3D; workerThread            if self.dynamicLoading is False:                self.threadPool.start(workerThread)            self.loadedCount +&#x3D; 1        if len(filesToLoad) &gt; 0:            pass    def createItem(self, item):        &quot;&quot;&quot;自定义包装器 创建 ：：类项的方法。TreeItem&#39;，将其添加到模型项和类 appendRow（）        :param item:        :type item: ::class:&#96;baseItem&#96;        :return:        :rtype: ::class:&#96;items.TreeItem&#96;        &quot;&quot;&quot;        tItem &#x3D; TreeItem(item&#x3D;item, themePref&#x3D;self.themePref, squareIcon&#x3D;self.uniformIcons)        self.items.append(tItem)        self.appendRow(tItem)        return tItem    def setUniformItemSizes(self, enabled):        self.uniformIcons &#x3D; enabled        for it in self.items:            it.squareIcon &#x3D; enabled    def setItemIconFromImage(self, item, image):        &quot;&quot;&quot;由线程调用的自定义方法        :param item:        :type item: :class:&#96;TreeItem&#96;        :param image: The Loaded QImage        :type image: QImage        &quot;&quot;&quot;        item.applyFromImage(image)    def doubleClickEvent(self, modelIndex, item):        &quot;&quot;&quot;双击项时由列表视图调用        :param modelIndex:        :type modelIndex: QModelIndex        :param item:        :type item: TreeItem        :return self.currentImage:  The current image with it&#39;s name and file extension        :rtype self.currentImage:  str        &quot;&quot;&quot;        self.currentImage &#x3D; item._item.name        self.doubleClicked.emit(self.currentImage)        return self.currentImage    def onSelectionChanged(self, modelIndex, item):        &quot;&quot;&quot;在更改项目时由列表视图调用，例如左键单击或右键单击        :param modelIndex:        :type modelIndex: QModelIndex        :param item:        :type item: TreeItem        &quot;&quot;&quot;        try:  # can error while renaming files and the change no longer exists so ignore if so            self.currentImage &#x3D; item._item.name            self.selectionChanged.emit(self.currentImage)            return self.currentImage        except AttributeError:            pass    def closeEvent(self, event):        &quot;&quot;&quot;关闭模型        :param event:        :type event:        &quot;&quot;&quot;        if self.qModel is not None:            self.qModel.clear()            self.qModel.parentClosed.emit(True)        super(FileViewModel, self).closeEvent(event)class ZooSceneViewerModel(FileViewModel):    # Emit signals    parentClosed &#x3D; Signal(bool)    doubleClicked &#x3D; Signal(str)    selectionChanged &#x3D; Signal(str)    def __init__(self, view, directory&#x3D;&quot;&quot;, chunkCount&#x3D;20, uniformIcons&#x3D;False):        &quot;&quot;&quot;从缩略图视图小组件的目录中加载 .zooscene 模型数据，拉取依赖目录中的缩略图，并从 file.zooInfo 文件生成工具提示。        另请参阅类 FileViewModel（） 以获取更多功能和文档。其可以进一步覆盖此类以在子目录中加载自定义图像，例如Skydomes或控件        使用 .zooScene 标签和缩略图信息。        :param view: 查看器分配此模型数据        :type view: qtWidget?        :param directory: The directory full path where the .zooScenes live        :type directory: str        :param chunkCount: The number of images to load at a time into the ThumbnailView widget        :type chunkCount: int        &quot;&quot;&quot;        super(ZooSceneViewerModel, self).__init__(view, directory&#x3D;directory, chunkCount&#x3D;chunkCount,                                                  uniformIcons&#x3D;uniformIcons)    def _thumbnails(self):        &quot;&quot;&quot;重写基类，从每个文件的子目录“fileName_fileDependencies”返回缩略图路径的列表：            [&quot;C:&#x2F;aPath&#x2F;scene01_fileDependencies&#x2F;thumbnail.jpg&quot;, &quot;C:&#x2F;aPath&#x2F;scene02_fileDependencies&#x2F;thumbnail.jpg&quot;]        :return 当前文件列表 list(str):        :return 缩略图列表 list(str):        &quot;&quot;&quot;        return [&quot;C:&#x2F;aPath&#x2F;scene01_fileDependencies&#x2F;thumbnail.jpg&quot;,                &quot;C:&#x2F;aPath&#x2F;scene02_fileDependencies&#x2F;thumbnail.jpg&quot;]  # thumbnails(self.directory, self.fileNameListNoExt)    def fileList(self):        &quot;&quot;&quot;        重写基类 生成文件列表：        [“scene01.zooScene”， “scene02.zooScene”]        &quot;&quot;&quot;        self.fileNameList &#x3D; [&quot;scene01.zooScene&quot;, &quot;scene02.zooScene&quot;]  # filesByExtension(self.directory, [ZOOSCENE_EXT])if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    app &#x3D; QApplication(sys.argv)    thumbViewer &#x3D; ThumbnailViewWidget(parent&#x3D;None, columns&#x3D;3, fixedHeight&#x3D;382, uniformIcons&#x3D;True)    thumbModel &#x3D; ZooSceneViewerModel(thumbViewer, directory&#x3D;r&quot;C:\Users\mirror\Documents\zoo_preferences\assets\model_assets&quot;,                                                   chunkCount&#x3D;200,                                                   uniformIcons&#x3D;True)    thumbViewer.setModel(thumbModel)    thumbViewer.show()    sys.exit(app.exec_())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例结果：</p><p><img src="/images/QT-ListViewLayout/listViewLayout%E7%A4%BA%E4%BE%8B%E5%B1%95%E7%A4%BA.png" alt="示例展示　png" srcset="/images/home/Myhead.jpg" data-src="/images/QT-ListViewLayout/listViewLayout%E7%A4%BA%E4%BE%8B%E5%B1%95%E7%A4%BA.png" class="lozad post-image"> </p>]]></content>
    
    
    <summary type="html">&lt;p style=&quot;text-indent:2em&quot;&gt;本文为记录摘抄自 ZooTool 工具集中的 ListViewLayout</summary>
    
    
    
    <category term="Qt" scheme="http://mirrorcg.github.io/categories/Qt/"/>
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/categories/Qt/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="QT布局" scheme="http://mirrorcg.github.io/tags/QT%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>QT-FlowLayout</title>
    <link href="http://mirrorcg.github.io/posts/20221115a1.html"/>
    <id>http://mirrorcg.github.io/posts/20221115a1.html</id>
    <published>2022-11-15T13:38:06.000Z</published>
    <updated>2022-12-12T14:38:06.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">记录一下流动布局 QT 中的 flowLayout <span id="more"></span>,该布局可以根据父 UI 组件窗口的宽度，调整每一行所能容纳的最大的元素个数。</p><p>示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding:utf-8 -*-# !&#x2F;usr&#x2F;bin&#x2F;env python3# Author: Mirror# File: flowLayout# Time: 2022-12-10 21:43# Update： 2022-12-12 22:43# Environment:PyCharm# Blog: www.mirrorcg.com# Description: flowLayout布局示例# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;import sysfrom PySide2.QtWidgets import QApplication, QLayout, QSizePolicy, QWidget, QPushButtonfrom PySide2.QtCore import QPoint, QRect, QSize, Qtclass FlowLayout(QLayout):    &quot;&quot;&quot;流动布局&quot;&quot;&quot;    def __init__(self, parent&#x3D;None, margin&#x3D;0, spacing&#x3D;-1):        super(FlowLayout, self).__init__(parent)        if parent is not None:            self.setContentsMargins(margin, margin, margin, margin)        self.setSpacing(spacing)        self.itemList &#x3D; []    def __del__(self):        item &#x3D; self.takeAt(0)        while item:            item &#x3D; self.takeAt(0)    def addItem(self, item):        self.itemList.append(item)    def count(self):        return len(self.itemList)    def itemAt(self, index):        if index &gt;&#x3D; 0 and index &lt; len(self.itemList):            return self.itemList[index]        return None    def takeAt(self, index):        if index &gt;&#x3D; 0 and index &lt; len(self.itemList):            return self.itemList.pop(index)        return None    def expandingDirections(self):        return Qt.Orientations(Qt.Orientation(0))    def hasHeightForWidth(self):        return True    def heightForWidth(self, width):        height &#x3D; self.doLayout(QRect(0, 0, width, 0), True)        return height    def setGeometry(self, rect):        super(FlowLayout, self).setGeometry(rect)        self.doLayout(rect, False)    def sizeHint(self):        return self.minimumSize()    def minimumSize(self):        size &#x3D; QSize()        for item in self.itemList:            size &#x3D; size.expandedTo(item.minimumSize())        margin, _a, _b, _c &#x3D; self.getContentsMargins()        size +&#x3D; QSize(2 * margin, 2 * margin)        return size    def doLayout(self, rect, testOnly):        x &#x3D; rect.x()        y &#x3D; rect.y()        lineHeight &#x3D; 0        for item in self.itemList:            wid &#x3D; item.widget()            spaceX &#x3D; self.spacing() + wid.style().layoutSpacing(QSizePolicy.PushButton,                                                                QSizePolicy.PushButton, Qt.Horizontal)            spaceY &#x3D; self.spacing() + wid.style().layoutSpacing(QSizePolicy.PushButton,                                                                QSizePolicy.PushButton, Qt.Vertical)            nextX &#x3D; x + item.sizeHint().width() + spaceX            if nextX - spaceX &gt; rect.right() and lineHeight &gt; 0:                x &#x3D; rect.x()                y &#x3D; y + lineHeight + spaceY                nextX &#x3D; x + item.sizeHint().width() + spaceX                lineHeight &#x3D; 0            if not testOnly:                item.setGeometry(QRect(QPoint(x, y), item.sizeHint()))            x &#x3D; nextX            lineHeight &#x3D; max(lineHeight, item.sizeHint().height())        return y + lineHeight - rect.y()if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    app &#x3D; QApplication(sys.argv)    win &#x3D; QWidget()    _layout &#x3D; FlowLayout()    win.setLayout(_layout)    for i in range(10):        item1 &#x3D; QPushButton(&quot;%s&quot; % i)        win.layout().addWidget(item1)    win.show()    sys.exit(app.exec_())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例结果：</p><p><img src="/images/QT-FlowLayout/flowLayout%E7%A4%BA%E4%BE%8B%E5%B1%95%E7%A4%BA.png" alt="示例展示　png" srcset="/images/home/Myhead.jpg" data-src="/images/QT-FlowLayout/flowLayout%E7%A4%BA%E4%BE%8B%E5%B1%95%E7%A4%BA.png" class="lozad post-image"> </p>]]></content>
    
    
    <summary type="html">&lt;p style=&quot;text-indent:2em&quot;&gt;记录一下流动布局 QT 中的 flowLayout</summary>
    
    
    
    <category term="Qt" scheme="http://mirrorcg.github.io/categories/Qt/"/>
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/categories/Qt/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="QT布局" scheme="http://mirrorcg.github.io/tags/QT%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>Maya_C++开发环境搭建</title>
    <link href="http://mirrorcg.github.io/posts/20221031a1.html"/>
    <id>http://mirrorcg.github.io/posts/20221031a1.html</id>
    <published>2022-10-31T12:53:00.000Z</published>
    <updated>2022-10-31T13:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一下 Maya 的C++开发环境搭建<span id="more"></span></p><h4 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h4><ul><li><p>安装Visual Studio 2017 作为IDE，这里需要注意一下，不同的VS版本对应不同的默认平台工具集，如果需要VS使用别的的平台工具集，需要修改安装指定的平台工具集.</p></li><li><p>安装 Maya2020.</p></li><li><p>获取软件版本对应的开发包（从Maya2016开始，maya软件安装包中不再携带开发包，而开发包作为一个单独的下载包存在）,也可以不下载开发包，C++ 环境搭建需要的 Lib 链接库和 include 头文件在软件安装目录中已经存在，但我们可以获取开发包里 devkit 文件夹中的代码示例和插件向导(MayaPluginWizard2.0.zip)用于学习.</p><ul><li>maya 开发包下载地址 ：<a href="https://www.autodesk.com/developer-network/platform-technologies/maya?_ga=2.166960190.1858012794.1667146574-781835133.1667146574" title="" target="">从这里下载</a></li></ul></li></ul><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><h5 id="手动配置"><a href="#手动配置" class="headerlink" title="手动配置"></a>手动配置</h5><p>  在 Visual Studio 2017 IDE 中新建一个”空项目”，然后点击项目,右键设置项目属性，将下列配置一一修改。</p><ul><li>配置：debug  平台：x64</li><li>配置属性 》 常规 》 项目默认配置 》 配置类型 :动态库.dll</li><li>配置属性 》 常规》 常规 》 目标文件拓展名 :.mll</li><li>C&#x2F;C++ 》 常规 》 附加包含目录 :C:\Program Files\Autodesk\Maya2020\include;%(AdditionalLibraryDirectories)</li><li>C&#x2F;C++ 》 预处理器 》 加入预处理器指令:WIN32;NDEBUG;_DEBUG;_WINDOWS;NT_PLUGIN;REQUIRE_IOSTREAM;_USRDLL;MAYAPLUGIN1_EXPORTS; </li><li>链接器 》 常规 》 输出文件：C:\Users\mirror\Documents\maya\2020\plug-ins$(ProjectName)$(TargetExt)(自定义，这是你的插件生成的位置)</li><li>链接器 》 常规 》 附加库目录：C:\Program Files\Autodesk\Maya2020\lib;%(AdditionalLibraryDirectories)</li><li>链接器 》 输入 》 附加依赖项：Foundation.lib;OpenMaya.lib;OpenMayaUI.lib;OpenMayaAnim.lib;OpenMayaFX.lib;OpenMayaRender.lib;Image.lib;opengl32.lib;glu32.lib;</li></ul><p>  若为配置方案指定名称，如”maya2020”，将上列的 maya2020 替换成maya${Configuration},其中 ${Configuration} 是配置方案的名称，可快捷切换开发环境，而不用重新配置。<br>  $(TargetDir)是在目标文件后自动赋予值为文件所在位置<br>  $(TargetExt)目标文件拓展名<br>  $(ProjectName)项目名</p><h5 id="通过插件向导配置"><a href="#通过插件向导配置" class="headerlink" title="通过插件向导配置"></a>通过插件向导配置</h5><p>  <img src="/images/Maya_C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%8F%92%E4%BB%B6%E5%90%91%E5%AF%BC.png" alt="插件向导.png" srcset="/images/home/Myhead.jpg" data-src="/images/Maya_C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%8F%92%E4%BB%B6%E5%90%91%E5%AF%BC.png" class="lozad post-image"></p><p>  在下载好的开发包中找到插件向导文件夹–pluginwizard，其中有两个文件：</p><ul><li>MayaPluginWizard2.0.zip</li><li>MayaWizardReadme.txt<br>  其中 MayaWizardReadme.txt 会告诉你官方推荐使用什么版本的 Visual Studio IDE 以及插件MayaPluginWizard2.0.zip中的内容的使用方法，例如，开发maya2020，应使用 Visual Studio 14.0 即 Visual Studio 2015(可以使用2017及其以上版本，然后配置2015的环境)默认的平台工具集；并且需要将对应的文件拷贝到指定的文件路径中。</li></ul><p>  由于我使用的是 Visual Studio 2019 需要将文件拷贝到不同的路径：</p><ul><li><p>将下列文件拷贝到路径(若没有，则新建):C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\VC\VCWizards</p><blockquote><ul><li>MayaPluginWizard.ico</li><li>MayaPluginWizard.vsdir</li><li>MayaPluginWizard.vsz</li></ul></blockquote></li><li><p>将下列文件夹拷贝到路径(若没有，则新建):C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\VC\vcprojects</p><blockquote><ul><li>MayaPluginWizard</li></ul></blockquote></li></ul><p>  若在创建新项目的时候，创建项目失败，则需要将 MayaPluginWizard.vsz 文件内容中的 VS版本 改为 Visual Studio IDE 对应的版本<br>  <img src="/images/Maya_C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%A4%B1%E8%B4%A5.png" alt="项目创建失败.png" srcset="/images/home/Myhead.jpg" data-src="/images/Maya_C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%A4%B1%E8%B4%A5.png" class="lozad post-image"></p><p>配置好后，编译的插件会出现在 “输出文件” 的路径中。</p><h4 id="软件安装踩坑"><a href="#软件安装踩坑" class="headerlink" title="软件安装踩坑"></a>软件安装踩坑</h4><p>  不同 Visual Studio 版本默认的平台工具集不同，需要视情况配置不同的工具集，Maya2020 C++ API 需要使用 Visual Studio 2017（前面的插件向导要求使用，Visual Studio 2015，这并不冲突）,因此会使用V140平台工具集，若使用高版本 Visual Studio ,需要切换平台工具集版本：</p><ul><li>Visual Studio 2019: V142</li><li>Visual Studio 2017: V141</li><li>Visual Studio 2015: V140</li><li>Visual Studio 2013: V120</li><li>Visual Studio 2012: V110</li><li>Visual Studio 2010: V100</li><li>Visual Studio 2008: V90</li><li>Visual Studio 2005: V80</li><li>Visual Studio 2003: V71</li><li>Visual Studio 2002: V70</li><li>Visual Studio 6: V60<br>  若低版本软件安装不上，在卸载和清理了软件之后，可以尝试先安装高版本软件，再安装低版本软件，具体原因不清楚（可能是高版本软件在安装过程中将低版本报错的组件安装了），但是真的行得通。安装 Visual Studio IDE 软件需要给注册表开权限哦！！！</li></ul><h5 id="安装平台工具集"><a href="#安装平台工具集" class="headerlink" title="安装平台工具集"></a>安装平台工具集</h5><p>  升级打开低版本VS工程，需要切换工具集版本 和 windowos SDK版本</p><ol><li>修改&#x2F;添加 Visual Studio_IDE :</li></ol><p>  <img src="/images/Maya_C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%BF%AE%E6%94%B9VS_IDE.png" alt="修改VS_IDE.png" srcset="/images/home/Myhead.jpg" data-src="/images/Maya_C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%BF%AE%E6%94%B9VS_IDE.png" class="lozad post-image"></p><ol start="2"><li><p>选择单个组件,并找到 MSVC v140-VS 2015 C++ 生成工具（v14.00）:<br>  <img src="/images/Maya_C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E9%80%89%E6%8B%A9%E5%8D%95%E4%B8%AA%E7%BB%84%E4%BB%B6.png" alt="选择单个组件.png" srcset="/images/home/Myhead.jpg" data-src="/images/Maya_C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E9%80%89%E6%8B%A9%E5%8D%95%E4%B8%AA%E7%BB%84%E4%BB%B6.png" class="lozad post-image"></p></li><li><p>在项目属性中选取指定的工具集.png :<br>  <img src="/images/Maya_C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%80%89%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86.png" alt="在项目中选取指定的工具集.png" srcset="/images/home/Myhead.jpg" data-src="/images/Maya_C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%80%89%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E5%B7%A5%E5%85%B7%E9%9B%86.png" class="lozad post-image"></p></li><li><p>(略)若使用高版本打开低版本的项目，还需要重复以上步骤，安装&#x2F;切换对应低版本的 Windows SDK 版本 :<br>  <img src="/images/Maya_C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%88%87%E6%8D%A2%E4%BD%8E%E7%89%88%E6%9C%AC%E7%9A%84WindowsSDK.png" alt="切换低版本的WindowsSDK.png" srcset="/images/home/Myhead.jpg" data-src="/images/Maya_C++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%88%87%E6%8D%A2%E4%BD%8E%E7%89%88%E6%9C%AC%E7%9A%84WindowsSDK.png" class="lozad post-image"></p></li></ol><h4 id="插件踩坑"><a href="#插件踩坑" class="headerlink" title="插件踩坑"></a>插件踩坑</h4><p>由于一开始不知道需要指定的工具集版本，导致编译的插件不能被加载，前前后后排查花费了大量时间，最后总结一下：</p><ul><li><p>编译好的文件如果从插件编辑器中无法显示：</p><blockquote><ol><li>可能是开软件前，该插件的路径还没有生成,需要重启may.</li><li>可能是插件不在Maya的插件搜索路径中,需要添加环境变量.</li><li>插件本身有问题，需检查插件。</li></ol></blockquote></li><li><p>如果无法加载插件，在保证插件代码正确的情况下，可能是没有使用正确的VC编译器，详细参照前文.</p></li></ul><ul><li></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下 Maya 的C++开发环境搭建</summary>
    
    
    
    <category term="Maya" scheme="http://mirrorcg.github.io/categories/Maya/"/>
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/categories/Maya/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="OpenMaya" scheme="http://mirrorcg.github.io/tags/OpenMaya/"/>
    
    <category term="C++" scheme="http://mirrorcg.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Arnold开发环境搭建</title>
    <link href="http://mirrorcg.github.io/posts/20221027a1.html"/>
    <id>http://mirrorcg.github.io/posts/20221027a1.html</id>
    <published>2022-10-27T15:55:47.095Z</published>
    <updated>2022-11-01T17:04:00.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1,下载安装vs2015</p><p>下载地址：<a href="http://download.microsoft.com/download/B/8/9/B898E46E-CBAE-4045-A8E2-2D33DD36F3C4/vs2015.pro_chs.iso">http://download.microsoft.com/download/B/8/9/B898E46E-CBAE-4045-A8E2-2D33DD36F3C4/vs2015.pro_chs.iso</a><br>密钥：HM6NR-QXX7C-DFW2Y-8B82K-WTYJV<br>2.下载安装Cmake &gt;&#x3D;2.8<br>下载地址:<a href="https://cmake.org/download/">https://cmake.org/download/</a><br>3.配置cmake环境</p><p>OSL材质</p><p>简单的示例</p><ul><li>osl代码块<br>shader gamma(<br>  color Cin &#x3D; color(0, 0, 0),<br>  float exponent &#x3D; 1,<br>  output color Cout &#x3D; color(0, 0, 0))<br>{<br>  Cout &#x3D; pow(Cin, 1&#x2F;exponent);<br>}</li><li>osl代码块</li></ul><p>图形渲染大体原理观</p><p>场景构成： 几何体基本体 光源 相机</p><p>每一个几何体基本体 都携带一组几何体变量，也称为内插值或用户数据，有不同的方式添加该数据到几何体：单个几何体，单个面，多个面；如果着色器输入参数的名称和类型与对象上基元变量的名称和类型匹配（并且该输入参数尚未显式连接到另一个图层的输出），内插的原始变量将覆盖实例值或默认值</p><p>每个几何图元都有一组属性（有时称为图形状态），包括其变换矩阵、照亮它的灯光列表（无论是单面还是双面）、着色器指定等。还可能有一长串与每个对象关联的渲染器特定属性或用户指定属性。特定属性状态可以在许多几何图元之间共享。</p><p>曲面和体积着色器的闭包计算</p><ul><li>评估：给定输入和输出光方向，计算光从输入传播到输出的比例。</li><li>采样：仅给定一个输入（或输出）方向，选择一个散射方向，其概率分布与最终将沿各个方向传播的光量成正比</li><li>积分：给定所有灯光和视图方向，计算在视图方向上离开表面的光总量</li></ul><p> 集成器：渲染器包含许多集成器（可通过渲染器的 API 进行选择），这些积分器将表面和体积计算的颜色闭合与光源和视图相关信息相结合，以产生相机可见的光量。</p><p>单位： 您可以告诉渲染器（通过全局选项）场景使用的距离和时间单位。然后着色器有一个名为 transformu（）的内置函数，它的工作方式很像 transform（），但它不是在坐标系之间进行转换，而是在单位之间进行转换。</p><p>因此，您可以编写一个着色器以在真实世界单位中实现某种效果，并且该着色器在另一个使用不同建模单位的节目中完全可以重复使用。<br>它知道所有的标准名称，如“cm”、“in”、“km”等，并且可以在任何这些名称之间以及命名的坐标系之间进行转换。</p><p>词汇结构</p><p>字符<br>Open Shading Language的源代码由ASCII或UTF-8字符组成。</p><p>空格、制表符、回车符和换行符统称为空白。空白字符分隔标识符、关键字或其他符号，但除此之外没有语法意义。一行中的多个空白字符等同于一个空白字符</p><p>源代码可以分成多行，由行尾标记（回车符和&#x2F;或换行符）分隔。行可以是任何长度，行尾标记与其他空白没有明显区别，除非它们终止于 &#x2F;&#x2F; 的注释和分隔预处理器指令</p><p>标识符</p><p>标识符是变量、参数、函数和着色器的名称。在OSL中，标识符由一个或多个字符组成。第一个字符可以是字母（a-Z或a-Z）或下划线（_），随后的字符可以是字符、下划线或数字（0-9）</p><p>注释</p><p>和C++ 一样， OSL 也有两种注释方式 </p><ul><li>&#x2F;* 多行注释 *&#x2F; </li><li>&#x2F;&#x2F; 单行注释</li></ul><p>关键字和保留字</p><p>关键字和保留字不能作为标识符<br>以下是在Open Shading Language中具有特殊含义的关键字：</p><ul><li>and break closure color continue do else emit float for if illuminance</li><li>illuminate int matrix normal not or output point public return string</li><li>struct vector void while</li></ul><p>以下是目前在OSL中没有特殊含义的保留词，但我们保留它们以备将来使用，或者因为它们与相关编程语言中的关键字非常相似</p><ul><li>bool case catch char class const delete default double enum extern</li><li>false friend goto inline long new operator private protected short</li><li>signed sizeof static switch template this throw true try typedef uniform</li><li>union unsigned varying virtual volatile</li></ul><p>预处理器</p><p>着色器源代码通过标准C预处理器作为解析的第一步<br>预处理器指令由哈希标记（#）指定为行上的第一个字符，后跟预处理器指令名称。哈希和指令名称之间可能会出现空白<br>开放着色语言编译器支持C&#x2F;C++预处理指令的完整补充，包括：<br>#define<br>#undef<br>#if<br>#ifdef<br>#ifndef<br>#elif<br>#else<br>#endif<br>#include<br>#pragma error “message”<br>#pragma once<br>#pragma osl …<br>#pragma warning “message”</p><p>此外，编译器已经定义了以下预处理器符号：</p><p>OSL VERSION MAJOR Major version (e.g., 1)<br>OSL VERSION MINOR Minor version (e.g., 9)<br>OSL VERSION PATCH Patch version (e.g., 3)<br>OSL VERSION Combined version number &#x3D; 10000<em>major + 100</em>minor +<br>patch (e.g., 10903 for version 1.9.3)</p><p>粗略语法、着色器类型、参数</p><p>着色器的总体结构如下：</p><p>可选函数或结构声明<br>着色器类型着色器名称（可选参数）<br>代码块<br>{<br>声明<br>}<br>代码块</p><p>请注意，语句可能包括函数或结构定义、局部变量声明或公共方法，以及普通执行指令（如赋值等）</p><p>着色器类型</p><p>着色器类型包括：曲面、置换、灯光、体积和常规着色器。某些操作只能在某些类型的着色器内执行（例如，在置换着色器中只能调用置换（）或更改P），而某些全局变量只能从某些类型的着色器内访问（例如，dPdu未在体积着色器内定义）<br>以下是着色器的基本类型的简要描述</p><p>曲面着色器</p><p>曲面着色器确定曲面的基本材质特性及其对灯光的反应。他们负责计算描述材质的闭包颜色，并可选地设置其他用户定义的输出变量。它们可能不会改变曲面的位置。<br>表面着色器的编写方式就好像它们描述了基元上单个点的行为，渲染器将选择必须评估着色器的位置表面。<br>表面着色器还用于描述自发光对象，即光源。OSL 不需要单独的着色器类型来描述光源（光源即是着色器）</p><p>置换着色器</p><p>置换着色器更改位置和着色法线（或者，也可以选择仅更改着色法线），使几何体看起来变形、起皱或凹凸不平。它们是唯一允许更改基元位置的着色器。</p><p>体积着色器</p><p>体积着色器描述了参与介质（空气、烟雾、玻璃等）如何对光线做出反应并影响介质另一侧对象的外观。它们类似于表面着色器，不同之处在于可以从不位于任何特定基元（也不一定与任何特定基元相关联）的位置调用它们。</p><p>着色器通用着色器</p><p>通用着色器用于实用程序代码，通用例程可以作为着色器组中的各个层调用。常规着色器不需要指定着色器类型，因此可以从内部曲面、置换或体积着色器组中重复使用。但因此，它们可能不包含任何无法从所有着色器类型内部执行的功能（例如，它们可能无法更改P，这只能从置换着色器内部执行）</p><p>着色器参数</p><p>单个着色器具有（可选）许多参数，这些参数的值可以以多种方式设置，以便单个着色器在用于不同对象时具有不同的行为或外观。</p><p>着色器参数语法</p><p>着色器参数在着色器声明中指定，位于着色器名称后的括号中。这很像OSL函数（或C或类似语言中的函数）的参数，不同之处在于着色器参数必须具有初始值设定项，为参数提供默认值。Shader 参数默认初始值设定项可以是表达式（即，可以计算而不是限制为数字常量），并且按声明参数的顺序进行计算，并且可以包括对先前声明的参数的引用。形式上，简单参数声明的语法如下所示：</p><ul><li>type parametername &#x3D; default-expression<br>其中 type 是第 5 章中描述的数据类型之一，参数名称是参数的名称，默认表达式是有效的表达式（参见第 6.2 节）。多个参数仅用逗号分隔：</li><li>type parametername [ array-length ] &#x3D; { expr0 , expr1 … }<br>其中数组长度是给出数组长度的正整数常数，初始值设定项是在大括号之间列出的一系列初始化表达式。第一个初始化表达式为数组的第一个元素提供初始化器，第二个表达式为数组第二个元素提供初始值设定器，依此类推。如果初始化表达式的数量小于数组的长度，则任何其他数组元素都将具有未定义的值。<br>数组也可以在没有设置长度的情况下声明：</li><li>type parametername [ ] &#x3D; { expr0 , expr1 … }<br>其中在方括号之间找不到数组长度。这表示数组的长度将基于从组中着色器的输出（采用该输出的长度）、实例值（采用实例值声明指定的长度）或基元变量（由其在基元上的声明确定的长度）在连接中传递的内容来确定。如果未提供实例值、原语值或连接，则初始化表达式的数量将决定数组的长度和默认值.<br>结构参数也很容易声明：</li><li>structure-type parametername &#x3D; { expr0 , expr1 … }<br>其中structure type是先前声明的结构类型的名称，expr初始值设定项对应于结构中的每个相应字段。结构的每个字段都需要适当类型的初始值设定项。</li></ul><p>着色器输出参数</p><p>默认情况下，着色器参数在着色器主体中是只读的。然而，特殊的输出参数可能会因着色器的执行而改变。参数可以在参数的类型声明之前使用output关键字指定为输出：</p><ul><li>output type parametername &#x3D; expr<br>（输出参数可以是数组和结构，但我们将省略此处的明显语法。）</li></ul><p>输出参数可以连接到着色器组中稍后运行的着色器层的输入，可以由组中稍后的着色器通过消息传递（即getmessage（）调用）查询，或者由渲染器用作输出图像通道（以通过渲染器API描述的方式）。</p><p>着色器参数示例</p><p>下面是一个着色器声明的示例，包含几个参数：<br>surface wood (<br>    &#x2F;* Simple params with constant initializers <em>&#x2F;<br>        float Kd &#x3D; 0.5,<br>        color woodcolor &#x3D; color (.7, .5, .3),<br>        string texturename &#x3D; “wood.tx”,<br>    &#x2F;</em> Computed from an earlier parameter <em>&#x2F;<br>        color ringcolor &#x3D; 0.25 * woodcolor,<br>    &#x2F;</em> Fixed-length array <em>&#x2F;<br>        color paintcolors[3] &#x3D; { color(0,.25,0.7), color(1,1,1),<br>        color(0.75,0.5,0.2) },<br>    &#x2F;</em> variable-length array <em>&#x2F;<br>        int pattern[] &#x3D; { 2, 4, 2, 1 },<br>    &#x2F;</em> output parameter *&#x2F;<br>        output color Cunlit &#x3D; 0<br>    )<br>{<br>…<br>}</p><p>着色器参数如何获取其值</p><p>&#x2F;&#x2F;page 18</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>自定义cryptomatteAov</title>
    <link href="http://mirrorcg.github.io/posts/20221005a1.html"/>
    <id>http://mirrorcg.github.io/posts/20221005a1.html</id>
    <published>2022-10-05T15:38:25.000Z</published>
    <updated>2022-10-05T15:58:25.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通过 Arnold 渲染器的 crypmatte 节点和 Maya 的额外属性，在 Maya 中创建自定义 ID 通道。<span id="more"></span><br>第一步：在物体的 mesh或aiStandIn等可着色对象上创建 maya 额外属性，此属性可被 Arnold 识别，命名方式为：mtoa_constant_”属性名”，其中mtoa_constant_为固定前缀，”属性名”为自定义名称，例如，mtoa_constant_testcrptomt。</p><p><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89cryptomatteAov/%E5%88%9B%E5%BB%BA%E9%A2%9D%E5%A4%96%E5%B1%9E%E6%80%A7.png" alt="创建额外属性.png" srcset="/images/home/Myhead.jpg" data-src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89cryptomatteAov/%E5%88%9B%E5%BB%BA%E9%A2%9D%E5%A4%96%E5%B1%9E%E6%80%A7.png" class="lozad post-image">  </p><p><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89cryptomatteAov/%E9%A2%9D%E5%A4%96%E5%B1%9E%E6%80%A7.png" alt="额外属性.png" srcset="/images/home/Myhead.jpg" data-src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89cryptomatteAov/%E9%A2%9D%E5%A4%96%E5%B1%9E%E6%80%A7.png" class="lozad post-image"> </p><p>第二步：创建自定义 aov, aov 命名的方式为可任意命名，也可按照crypto_”aov 名称”的规范命名，其中“aov 名称”为自定义的名称，例如，crypto_test。</p><p><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89cryptomatteAov/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89aov.png" alt="创建自定义aov.png" srcset="/images/home/Myhead.jpg" data-src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89cryptomatteAov/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89aov.png" class="lozad post-image"></p><p>第三步：创建 cryptomatte 节点，并在节点的 UserCryptoAov* 中填入第二步中aov的全名，在UserCryptoSrc* 中填入第一步中创建的属性名。</p><p><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89cryptomatteAov/cryptomatte%E5%B1%9E%E6%80%A7%E5%86%85%E5%AE%B9.png" alt="cryptomatte属性内容.png" srcset="/images/home/Myhead.jpg" data-src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89cryptomatteAov/cryptomatte%E5%B1%9E%E6%80%A7%E5%86%85%E5%AE%B9.png" class="lozad post-image"></p><p>第四步：将第三步创建的 cryptomatte 节点填入第二步创建的 aov 节点的 Shader 属性中。</p><p><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89cryptomatteAov/%E8%8A%82%E7%82%B9%E5%B1%9E%E6%80%A7%E9%93%BE%E6%8E%A5.png" alt="节点属性链接.png" srcset="/images/home/Myhead.jpg" data-src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89cryptomatteAov/%E8%8A%82%E7%82%B9%E5%B1%9E%E6%80%A7%E9%93%BE%E6%8E%A5.png" class="lozad post-image"></p><p>以上即可获取场景中的单个shape 模型的 cryptomatte 的 id aov 通道。</p><p><img src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89cryptomatteAov/%E6%B8%B2%E6%9F%93%E7%BB%93%E6%9E%9C.png" alt="渲染结果.png" srcset="/images/home/Myhead.jpg" data-src="/images/%E8%87%AA%E5%AE%9A%E4%B9%89cryptomatteAov/%E6%B8%B2%E6%9F%93%E7%BB%93%E6%9E%9C.png" class="lozad post-image"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过 Arnold 渲染器的 crypmatte 节点和 Maya 的额外属性，在 Maya 中创建自定义 ID 通道。</summary>
    
    
    
    <category term="Maya" scheme="http://mirrorcg.github.io/categories/Maya/"/>
    
    <category term="arnold" scheme="http://mirrorcg.github.io/categories/Maya/arnold/"/>
    
    
    <category term="灯光合成" scheme="http://mirrorcg.github.io/tags/%E7%81%AF%E5%85%89%E5%90%88%E6%88%90/"/>
    
    <category term="灯光" scheme="http://mirrorcg.github.io/tags/%E7%81%AF%E5%85%89/"/>
    
    <category term="Aov" scheme="http://mirrorcg.github.io/tags/Aov/"/>
    
    <category term="cryptomatte" scheme="http://mirrorcg.github.io/tags/cryptomatte/"/>
    
  </entry>
  
  <entry>
    <title>QT-QPainter</title>
    <link href="http://mirrorcg.github.io/posts/20220914a1.html"/>
    <id>http://mirrorcg.github.io/posts/20220914a1.html</id>
    <published>2022-09-14T15:04:17.000Z</published>
    <updated>2022-09-14T15:24:17.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>QPainter一般用于在绘制事件paintEvent()中执行低级绘制。<br>常用功能：<br>    QPainter().setRenderHint(QPainter.Antialiasing)     图像边缘抗锯齿<br>    QPainter().setRenderHint(QPainter.TextAntialiasing) 文本边缘抗锯齿<br>    QPainter().setRenderHint(SmoothPixmapTransform)     指示引擎应使用平滑pixmap变换算法绘制图片<br>    QPainter().drawArc()    在起始角和最终角度之间画圆弧<br>    QPainter().drawEllipse()    在指定矩形内画圆弧<br>    QPainter().drawLine(intX1,intY1,intX2,intY2)    画直线<br>    QPainter().drawPixmap()    绘制图像文件<br>    QPainter().drawPolygon()    画绘制多边形<br>    QPainter().setBrush()   设置画笔风格<br>    QPainter().setPen()    设置笔的颜色大小和样式<br>    QPainter().save()　保存 QPainter 的绘制状态<br>    QPainter().restore()　恢复 QPainter 的绘制状态save() 用于保存 QPainter 的状态，restore() 用于恢复 QPainter 的状态，save() 和 restore() 一般都是成对使用的，如果只调用了 save() 而不调用 restore()，那么保存就没有意义了，保存是为了能恢复被保存的状态而使用的<br>    QPainter().rotate(角度)　QPainter根据坐标轴旋转角度。默认左上角<br>    QPainter().translate(x，y)　QPainter根据坐标轴旋转角度。默认从左上角移动多少位置，向下向右为正方向</p><p>maya中的示例：<br>    <pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding: utf-8 -*-# !&#x2F;usr&#x2F;bin&#x2F;env python27# @Author: Mirror# @Time: 2022&#x2F;09&#x2F;08# description: 弹出工具小球# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;import mathimport timefrom pymel.core import *from maya import OpenMayaUI as omuitry:    from PySide2.QtGui import *    from PySide2.QtCore import *    from PySide2.QtWidgets import *    from shiboken2 import wrapInstance    mayaMainWindowPtr &#x3D; omui.MQtUtil.mainWindow()    mayaMainWindow &#x3D; wrapInstance(long(mayaMainWindowPtr), QWidget)except:    from PySide.QtGui import *    from PySide.QtCore import *    from shiboken import wrapInstance    mayaMainWindowPtr &#x3D; omui.MQtUtil.mainWindow()    mayaMainWindow &#x3D; wrapInstance(long(mayaMainWindowPtr), QWidget)class lighting_Tool_TopWindow(QWidget):    def __init__(self):        super(lighting_Tool_TopWindow, self).__init__(mayaMainWindow, Qt.Window | Qt.FramelessWindowHint)        self.flag &#x3D; 0        self.threadExits &#x3D; 0        self.setObjectName(&quot;lighting_Tool_TopWindow&quot;)        self.setAttribute(Qt.WA_TranslucentBackground)        self.setAttribute(Qt.WA_NoSystemBackground, False)        self.setStyleSheet(&quot;QWidget&#123;background:rgba(50,50,50,0)&#125;&quot;)        self.mytimer &#x3D; QTimer()        self.mytimer.timeout.connect(self.updateIcon)          self.mytimer.start(1)        self.setGeometry(mayaMainWindow.x() + 400, mayaMainWindow.y() + 200, 60, 60)        self.show()    def updateIcon(self):  # 图标动态刷新        self.flag &#x3D; self.flag + 0.1        self.update()    def mouseMoveEvent(self, event):          if event.buttons() &#x3D;&#x3D; Qt.LeftButton:            self.move(event.globalX() - self.piancha.x(), event.globalY() - self.piancha.y())    def mousePressEvent(self, event):         self.piancha &#x3D; event.pos()    def paintEvent(self, event):          po &#x3D; QPainter(self)        po.setRenderHint(QPainter.Antialiasing)        po.setBrush(QBrush(QColor(200, 193, 170)))  # 背景颜色        toppen &#x3D; QPen()        toppen.setWidth(3)        toppen.setColor(QColor(250, 250, 250))  # 圆圈颜色        po.setPen(toppen)        po.drawEllipse(QRect(2, 2, 56, 56))  # 绘制圆圈大小        po.save()        po.restore()        rect &#x3D; QRect(-18, -18, 36, 36)        width &#x3D; 6        po.translate(30, 30)        po.rotate(self.flag)        for _num in range(4):            inside_pen &#x3D; QPen()            inside_pen.setWidth(width)            if _num &#x3D;&#x3D; 0:                inside_pen.setColor(QColor(180, 180, 180))  # 内圆圈颜色            elif _num &#x3D;&#x3D; 1:                inside_pen.setColor(QColor(120, 200, 100))            elif _num &#x3D;&#x3D; 2:                inside_pen.setColor(QColor(120, 100, 150))            elif _num &#x3D;&#x3D; 3:                inside_pen.setColor(QColor(120, 200, 200))            po.setPen(inside_pen)            po.drawArc(rect, 90 * 16 * _num, 60 * 16)  # 绘制圆圈大小        po.save()        po.restore()        po.rotate(self.flag)        po.drawImage(QRect(-18, -18, 36, 36), QImage(r&quot;S:\rez\packages\tools\Maya\Tool_set\otherstyle\Wedges-7.7s-64px.0001.png&quot;))    def keyPressEvent(self, event):        if event.key() &#x3D;&#x3D; Qt.Key_Escape:            self.close()def main():    for o in QApplication.topLevelWidgets():        if o.objectName() &#x3D;&#x3D; &quot;lighting_Tool_TopWindow&quot;:            o.deleteLater()    lightingTopBall &#x3D; lighting_Tool_TopWindow()if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>示例结果：</p><p><img src="/images/QT-QPainter/%E7%A4%BA%E4%BE%8B%E5%B1%95%E7%A4%BA.png" alt="示例展示 png" srcset="/images/home/Myhead.jpg" data-src="/images/QT-QPainter/%E7%A4%BA%E4%BE%8B%E5%B1%95%E7%A4%BA.png" class="lozad post-image"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Qt" scheme="http://mirrorcg.github.io/categories/Qt/"/>
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/categories/Qt/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="QT布局" scheme="http://mirrorcg.github.io/tags/QT%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>rez的PythonAPI使用</title>
    <link href="http://mirrorcg.github.io/posts/20220901a1.html"/>
    <id>http://mirrorcg.github.io/posts/20220901a1.html</id>
    <published>2022-08-31T16:38:45.000Z</published>
    <updated>2022-08-31T16:40:45.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><p>获取操作系统可用Shell类型<br>from rez.shells import get_shell_types<br>get_shell_types()</p></li><li><p>获取包请求命令<br>import os<br>os.environ[“REZ_USED_REQUEST”]</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Rez" scheme="http://mirrorcg.github.io/categories/Rez/"/>
    
    
    <category term="Pipeline" scheme="http://mirrorcg.github.io/tags/Pipeline/"/>
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="API" scheme="http://mirrorcg.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Maya中创建UI</title>
    <link href="http://mirrorcg.github.io/posts/20220823a1.html"/>
    <id>http://mirrorcg.github.io/posts/20220823a1.html</id>
    <published>2022-08-23T14:43:27.000Z</published>
    <updated>2022-08-28T08:03:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在maya中创建各种UI<span id="more"></span></p><h4 id="创建主菜单和菜单项："><a href="#创建主菜单和菜单项：" class="headerlink" title="创建主菜单和菜单项："></a>创建主菜单和菜单项：</h4><p>menuItem() 若不指定父级,都默认将菜单项添加到上一个创建的菜单中。</p><p><img src="/images/Maya%E4%B8%AD%E5%88%9B%E5%BB%BAUI/%E4%B8%BB%E8%8F%9C%E5%8D%95%E8%8F%9C%E5%8D%95%E9%A1%B9.png" alt="主菜单菜单项.png" srcset="/images/home/Myhead.jpg" data-src="/images/Maya%E4%B8%AD%E5%88%9B%E5%BB%BAUI/%E4%B8%BB%E8%8F%9C%E5%8D%95%E8%8F%9C%E5%8D%95%E9%A1%B9.png" class="lozad post-image"></p><p>示例代码：</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">import maya.cmds as cmds cmds.menu( &quot;test&quot;,label&#x3D;&#39;流程框架&#39;, tearOff&#x3D;True,parent&#x3D;&quot;MayaWindow&quot; )cmds.menuItem( label&#x3D;&#39;New&#39; )cmds.menuItem( label&#x3D;&#39;Open&#39; )cmds.menuItem( label&#x3D;&#39;Save&#39; )cmds.menuItem( divider&#x3D;True )  # 分隔线cmds.menuItem( label&#x3D;&#39;print&#39;,c&#x3D;&quot;print(11111)&quot; )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建菜单集"><a href="#创建菜单集" class="headerlink" title="创建菜单集"></a>创建菜单集</h4><p>菜单集中的菜单项来自于上面创建的主菜单，因此需要有菜单项才能添加和显示菜单集。空的菜单集不在菜单集的下拉框中显示，因此菜单集下至少应该拥有一项菜单项。</p><p><img src="/images/Maya%E4%B8%AD%E5%88%9B%E5%BB%BAUI/%E8%8F%9C%E5%8D%95%E9%9B%86.png" alt="菜单集.png" srcset="/images/home/Myhead.jpg" data-src="/images/Maya%E4%B8%AD%E5%88%9B%E5%BB%BAUI/%E8%8F%9C%E5%8D%95%E9%9B%86.png" class="lozad post-image"></p><p>示例代码：</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">import maya.cmds as cmds cmds.menuSet( &#39;testSet&#39;, label&#x3D;&#39;testSetLabel&#39; )  # 创建菜单集,不指定标签，显示为空行cmds.menuSet(am&#x3D;&quot;mainKeysMenu&quot;)  # 从当前菜单添加cmds.menuSet(cms&#x3D;1,q&#x3D;1 ) #  设置当前激活的菜单，只是激活，不刷新显示cmds.menuSet (ams&#x3D;True,q&#x3D;True)  # 所有的菜单集cmds.menuSet(rm&#x3D;&quot;mainKeysMenu&quot;)  # 从当前菜单移除currentmenus &#x3D; cmds.menuSet(query&#x3D;True, menuArray&#x3D;True)  # 查询当前流单集中所有的菜单项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建状态栏菜单"><a href="#创建状态栏菜单" class="headerlink" title="创建状态栏菜单"></a>创建状态栏菜单</h4><p>状态行只需要为控件指定父级窗口为”statusFieldButton”即可。</p><p><img src="/images/Maya%E4%B8%AD%E5%88%9B%E5%BB%BAUI/%E7%8A%B6%E6%80%81%E6%A0%8F.png" alt="状态栏.png" srcset="/images/home/Myhead.jpg" data-src="/images/Maya%E4%B8%AD%E5%88%9B%E5%BB%BAUI/%E7%8A%B6%E6%80%81%E6%A0%8F.png" class="lozad post-image">  </p><p>示例代码：</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">import maya.cmds as cmds cmds.iconTextButton(&quot;状态行名称1&quot;,l&#x3D;&quot;标签1&quot;,style&#x3D;&quot;textOnly&quot;,al&#x3D;&#39;center&#39;,p&#x3D;cmds.iconTextButton(&quot;statusFieldButton&quot;,q&#x3D;1,p&#x3D;1))cmds.button(&quot;状态行名称2&quot;,l&#x3D;&quot;标签2&quot;,al&#x3D;&#39;center&#39;,p&#x3D;cmds.iconTextButton(&quot;statusFieldButton&quot;,q&#x3D;1,p&#x3D;1))cmds.nodeIconButton(&quot;状态行名称3&quot;, label&#x3D;&quot;标签3&quot; , style&#x3D;&#39;iconAndTextHorizontal&#39;, command&#x3D;&#39;cmds.spotLight()&#39;, image1&#x3D;&#39;spotlight.png&#39;,p&#x3D;cmds.iconTextButton(&quot;statusFieldButton&quot;,q&#x3D;1,p&#x3D;1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建侧栏工具页"><a href="#创建侧栏工具页" class="headerlink" title="创建侧栏工具页"></a>创建侧栏工具页</h4><p>侧栏工具页通过 toolBar 控件生成，创建后可指定吸附到边界上。</p><p><img src="/images/Maya%E4%B8%AD%E5%88%9B%E5%BB%BAUI/%E4%BE%A7%E6%A0%8F%E5%B7%A5%E5%85%B7%E9%A1%B5.png" alt="侧栏工具页.png" srcset="/images/home/Myhead.jpg" data-src="/images/Maya%E4%B8%AD%E5%88%9B%E5%BB%BAUI/%E4%BE%A7%E6%A0%8F%E5%B7%A5%E5%85%B7%E9%A1%B5.png" class="lozad post-image">  </p><p>示例代码：<br>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">import maya.cmds as cmds myWindow&#x3D;cmds.window()buttonForm &#x3D; cmds.formLayout( parent &#x3D; myWindow)cmds.button( parent &#x3D; buttonForm,l&#x3D;&quot;testSide&quot;)cmds.toolBar( area&#x3D;&#39;top&#39;, content&#x3D;myWindow, allowedArea&#x3D;[&#39;top&#39;, &#39;bottom&#39;, &quot;left&quot;, &quot;right&quot;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="创建工具架分页："><a href="#创建工具架分页：" class="headerlink" title="创建工具架分页："></a>创建工具架分页：</h4><p>工具架分页由cmds.shelfLayout()创建，将创建的工具架分页的父级指向shelf主窗口，然后在shelfLayout下创建工具按钮即可：</p><p><img src="/images/Maya%E4%B8%AD%E5%88%9B%E5%BB%BAUI/%E5%B7%A5%E5%85%B7%E6%9E%B6%E5%88%86%E9%A1%B5.png" alt="工具架分页.png" srcset="/images/home/Myhead.jpg" data-src="/images/Maya%E4%B8%AD%E5%88%9B%E5%BB%BAUI/%E5%B7%A5%E5%85%B7%E6%9E%B6%E5%88%86%E9%A1%B5.png" class="lozad post-image">  </p><p>示例代码：<br>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">import maya.mel as mmimport maya.cmds as cmdsmainTopShelfTab &#x3D; mm.eval(&#39;global string $gShelfTopLevel;string $a&#x3D;$gShelfTopLevel;&#39;)# 获取工具架顶级布局newShelfLayout &#x3D; cmds.shelfLayout(&quot;NewLayout&quot;,p&#x3D;mainTopShelfTab)  # 创建工具架分页newToolButton &#x3D; cmds.shelfButton(&quot;testShelf&quot;,docTag&#x3D;u&quot;测试工具&quot;,rpt&#x3D;1,l&#x3D;&quot;工具&quot;,i1 &#x3D; r&quot;S:&#x2F;icon&#x2F;TDtool.ico&quot;,iol&#x3D;&quot;工具&quot;,c&#x3D;&#39;print(u&quot;测试&quot;)&#39;,p&#x3D;newShelfLayout)  # 添加工具按钮<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>一些常用代码：<br>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">mainTopShelfTab &#x3D; mm.eval(&#39;global string $gShelfTopLevel;string $a&#x3D;$gShelfTopLevel;&#39;)  # 获取工具架顶级布局shelfnum &#x3D; cmds.shelfTabLayout(mainTopShelfTab,q&#x3D;1,numberOfChildren&#x3D;1)  # 获取指定工具架窗口的工具数量shelfTools &#x3D; cmds.shelfTabLayout(mainTopShelfTab,q&#x3D;1,ca&#x3D;1) # 获取工具架上所有工具栏shelf_fullname &#x3D; cmds.shelfLayout(shelfTool[2],q &#x3D; 1,fpn &#x3D; 1)  # 获取指定名称的工具架全路径shelfVisible &#x3D; cmds.shelfButton(&quot;testShelf&quot;,e&#x3D;1,visible&#x3D;0) # 设置工具按钮可见性maya.mel.eval(&#39;addNewShelfTab &quot;test&quot;&#39;)  # 添加指定名称工具架页maya.mel.eval(&#39;deleteShelfTab &quot;test&quot;&#39;)  #删除指定个名称工具架<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>从maya文档中加载默认工具架及其按钮：<br>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">#注意此脚本会将一部分默认不加载的工具架也加载到maya工具架下 def get_shelf():  &quot;&quot;&quot;获取maya安装目录下shelf&quot;&quot;&quot;  shelf_files &#x3D; []  maya_shelf_path &#x3D; &#39;&#123;&#125;&#x2F;scripts&#x2F;shelves&#39;.format(os.getenv(&#39;MAYA_LOCATION&#39;))  files &#x3D; os.listdir( maya_shelf_path)  if files:      for _file in files:          if &quot;_&quot; in _file and &quot;.&quot; in _file and &quot;.res.&quot; not in _file:              shelf_files.append(_file.split(&#39;.&#39;)[0].split(&#39;_&#39;)[-1])  return shelf_filesdef load_shelf():  &quot;&quot;&quot;加载maya默认shelf&quot;&quot;&quot;  allShelfs &#x3D; mel.eval(&#39;shelfTabLayout -q -childArray $gShelfTopLevel&#39;) # 获取maya默认shelfs  maya_files &#x3D; get_shelf()  if maya_files:      for _shelf in maya_files:          if _shelf not in allShelfs:              mel.eval(&#39;loadNewShelf &quot;shelf_&#123;&#125;.mel&quot;;&#39;.format(_shelf))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>循环删除指定工具架下的按钮：<br>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">def remove button (self,shelf):    &quot;&quot;&quot;批量删除指定工具架下的工具&quot;&quot;&quot;&quot;    shelf_fullname &#x3D; cmds.shelfLayout (&quot;shelfname&quot;,q&#x3D;1,fpn&#x3D;1)   buttons &#x3D; cmds.shelfLayout(shelf_fullname,q &#x3D; 1,ca &#x3D; 1)    for _button in buttons:        button_fullname &#x3D; cmds.shelfButton(_button,q &#x3D;1,fpn &#x3D;1)        cmds.deleteUI( button_fullname)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>删除指定的工具架，方法改自deleteShelfTab，会删除一些首选项中存储的变量：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import osimport maya.cmds as cmdsimport maya.mel as mm def remove_shelf(_shelfname):    mainTopShelfTab &#x3D; mm.eval(&#39;global string $gShelfTopLevel;string $a&#x3D;$gShelfTopLevel;&#39;)    shelf_info &#x3D; &#123;i: _shelf for i, _shelf in enumerate(cmds.shelfTabLayout(mainTopShelfTab, q&#x3D;1, ca&#x3D;1))                   if _shelf.split(&quot;|&quot;)[-1].startswith(_shelfname[:2])&#125;    shelfnum&#x3D; cmds.shelfTabLayout(mainTopShelfTab, q&#x3D;1, numberofChildren&#x3D;1)    if shelf_info:        for _k,_v in shelf_info.items():            if _v &#x3D;&#x3D; _shelfname:                shelf_fullname &#x3D; cmds.shelfLayout(_v, q&#x3D;1, fpn&#x3D;1)                for _i in range(shelfnum):                    _align_c &#x3D; &quot;left&quot;                    if cmds.optionVar(ex&#x3D;&quot;shelfAlign&#123;&#125;&quot;.format(_i+1)):                        _align_c &#x3D; cmds.optionVar(q&#x3D;&quot;shelfAlign&#123;&#125;&quot;.format(_i+1))                    _shelfload_c &#x3D; cmds.optionVar(q&#x3D;&quot;shelfLoad&#123;&#125;&quot;.format(_i+1))                    _shelfname_c &#x3D; cmds.optionVar(q&#x3D;&quot;shelfName&#123;&#125;&quot;.format(_i+1))                    _shelffile_c &#x3D; cmds.optionVar(q&#x3D;&quot;shelfFile&#123;&#125;&quot;.format(_i+1))                    cmds.optionVar(                        iv&#x3D;(&quot;shelfLoad&#123;&#125;&quot;.format(_i+1), _shelfload_c),                        sv&#x3D;[(&quot;shelfAlign&#123;&#125;&quot;.format(_i+1), _align_c),                            (&quot;shelfName&#123;&#125;&quot;.format(_i+1), _shelfname_c),                            (&quot;shelfFile&#123;&#125;&quot;.format(_i+1), _shelffile_c)                            ])                cmds.optionVar(remove &#x3D;[&quot;shelfLoad&#123;&#125;&quot;.format(_k),                                        &quot;shelfAlign&#123;&#125;&quot;.format(_k),                                        &quot;shelfName&#123;&#125;&quot;.format(_k),                                        &quot;shelfFile&#123;&#125;&quot;.format(_k)                                        ])                cmds.deleteUI(shelf_fullname, layout&#x3D;1)                shelfDir &#x3D; cmds.internalVar(ush&#x3D;1)                shelfFile &#x3D; os.path.join(shelfDir, &quot;shelf_&#123;&#125;.mel&quot;.format(_v))                if os.path.exists(shelfFile):                    os.remove(shelfFile)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除UI"><a href="#删除UI" class="headerlink" title="删除UI"></a>删除UI</h4><p>删除UI需要知道窗口的窗口名称：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import maya.cmds as cmds cmds.deleteUI(&quot;windowName&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;在maya中创建各种UI</summary>
    
    
    
    <category term="Maya" scheme="http://mirrorcg.github.io/categories/Maya/"/>
    
    <category term="小工具" scheme="http://mirrorcg.github.io/categories/Maya/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="QT事件" scheme="http://mirrorcg.github.io/tags/QT%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Python代码中的字符编码</title>
    <link href="http://mirrorcg.github.io/posts/20220822a1.html"/>
    <id>http://mirrorcg.github.io/posts/20220822a1.html</id>
    <published>2022-08-22T14:52:29.000Z</published>
    <updated>2022-08-22T15:52:29.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Python 中的字符编码 <span id="more"></span></p><h4 id="文本编辑器存储信息的过程"><a href="#文本编辑器存储信息的过程" class="headerlink" title="文本编辑器存储信息的过程"></a>文本编辑器存储信息的过程</h4><ol><li><p>打开编辑器就在内存中开辟了一个空间，用编辑器编写的内容暂存在内存中，断电会丢失。</p></li><li><p>保存时，编辑器把内存的Unicode数据通过某种编码格式存到了硬盘上。</p></li><li><p>编写.py文件（没有执行时）和编写其他文件没有区别，只是在写一堆字符。</p></li></ol><h4 id="python解释器解释python代码的流程"><a href="#python解释器解释python代码的流程" class="headerlink" title="python解释器解释python代码的流程"></a>python解释器解释python代码的流程</h4><ol><li><p>python解释器启动，相当于启动了一个文本编辑器。</p></li><li><p>python解释器相当于文本编辑器，打开test.py文件，从硬盘将test.py文件通过某种编码格式（gbk,utf8等）解码数据从硬盘读入到内存中（python的解释性决定了解释器只关心文件的内容，不关心文件的后缀）。</p></li><li><p>python解释器解释执行加载到内存中的test.py代码。在该阶段才会识别python语法，为变量值等开辟存储空间。</p></li></ol><h4 id="Python2和Python3的区别"><a href="#Python2和Python3的区别" class="headerlink" title="Python2和Python3的区别"></a>Python2和Python3的区别</h4><ol><li><p>python2有两种存储形式，第一种：Unicode；第二种：按coding头选择存储格式，假设python2用utf8存储 x&#x3D;’中文’，当你print(x)的时候，终端接收gbk的变量x，但是windows终端编码是utf8，会乱码。Python3 默认存储形式为utf-8。</p></li><li><p>字符串类型：Python2 unicode 和 str类型（gbk、utf-8、MP4、MP3、JPG）；Python3 str（Unicode字符串）和bytes类型（（gbk、utf-8、MP4、MP3、JPG））。</p></li><li><p>python3只有Unicode一种存储变量的形式。Python2中默认使用ascii，Python3中默认使用utf-8，部分文本编辑器编写的文件默认为gbk编码格式，需要注意编写代码时文本编辑器的默认编码格式。</p></li><li><p>Python2 解释器编码默认为ASCII，只能处理 ascii字符，如果代码中有中文会报错，所以需要在代码顶部添加下面一行声明，将代码文件编码声明修改为 utf-8。Python3 解释器默认编码为utf-8;可通过 sys.getdefaultencoding() 查询。</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding:utf-8 -*-print(u&quot;测试中文打印&quot;.encode(&quot;gbk&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h4><p>  当字符串第一次写入文件时，文件创建成功，文件编码和字符串编码保持一致。如果后续写入其他编码的字符串，则文件编码会被修改，原来的数据会出现乱码。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li><p>python bytes 也称字节序列，并非字符。取值范围 0 &lt;&#x3D; bytes &lt;&#x3D; 255，输出的时候最前面会有字符b修饰；string 是python中字符串类型;</p></li><li><p>bytes主要是给在计算机看的，string主要是给人看的；string经过编码encode，转化成二进制对象，给计算机识别；bytes经过解码decode，转化成string，让我们看，但是注意反编码的编码规则是有范围,\xc8就不是utf8识别的范围；</p></li><li><p>内存中固定使用Unicode编码，我们只能改变存储到硬盘时使用的编码格式。读文件时，读取文件采用的编码格式与文本原来的编码格式不同则会导致出现乱码。需注意文本编辑器的编码格式，这能直接影响编译器是否能正确编译程序文本文件。同时也要注意控制台的编码格式，其中Windows 默认的编码格式为gbk，因此某些字符需要转码后打印在控制台才不会是乱码：</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding:utf-8 -*-print(u&quot;测试中文打印&quot;.encode(&quot;gbk&quot;))print(unicode(&quot;测试中文打印&quot;，&quot;utf-8&quot;).encode(&quot;gbk&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>任何语言、任何操作系统、任何编码，都可以和Unicode编码通过decode()和encode()的方式互相转换。</p></li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><a href="https://www.cnblogs.com/yyxayz/p/4044528.html" title="" target="">1.Python的字符编码问题</a></br><a href="https://www.runoob.com/python3/python3-func-bytes.html" title="" target="">2.bytes()内建函数</a>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python 中的字符编码</summary>
    
    
    
    <category term="Python" scheme="http://mirrorcg.github.io/categories/Python/"/>
    
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="锦囊小妙招" scheme="http://mirrorcg.github.io/tags/%E9%94%A6%E5%9B%8A%E5%B0%8F%E5%A6%99%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>Lua脚本语言</title>
    <link href="http://mirrorcg.github.io/posts/20220821a2.html"/>
    <id>http://mirrorcg.github.io/posts/20220821a2.html</id>
    <published>2022-08-21T15:38:15.000Z</published>
    <updated>2022-08-21T15:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">脚本语言--Lua学习笔记。<span id="more"></span></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>菜鸟教程：<a href="https://www.runoob.com/lua/lua-tutorial.html">https://www.runoob.com/lua/lua-tutorial.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p style=&quot;text-indent:2em&quot;&gt;脚本语言--Lua学习笔记。</summary>
    
    
    
    <category term="Doc" scheme="http://mirrorcg.github.io/categories/Doc/"/>
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/categories/Doc/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Yeti毛发</title>
    <link href="http://mirrorcg.github.io/posts/20220821a1.html"/>
    <id>http://mirrorcg.github.io/posts/20220821a1.html</id>
    <published>2022-08-21T15:09:17.000Z</published>
    <updated>2022-08-21T15:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文记录了一些Maya中Yeti毛发的相关的问题：<span id="more"></span></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>对应的版本: yeti插件版本需要与arnold(或redshift渲染器)版本、maya版本相对应，否则不报错且无法使用</p></li><li><p>环境变量：需在 pgYetiMaya.mod写入环境变量的文件(一行一句)。C:\rlm\yeti.lic 为破解文件。</p><ul><li><ul><li>pgYetiMaya 3.6.0 C:\Yeti-v3.6.0_Maya2018-windows</li></ul></li><li>PATH +:&#x3D; bin</li><li>MTOA_EXTENSIONS_PATH +:&#x3D; plug-ins</li><li>ARNOLD_PLUGIN_PATH +:&#x3D; bin</li><li>YETI_DOCS +:&#x3D; docs</li><li>YETI_TMP &#x3D; C:\Yeti-v3.6.0_Maya2018-windows\tmp</li><li>PEREGRINE_LOG_FILE &#x3D; C:\Yeti-v3.6.0_Maya2018-windows\Yeti.log</li><li>YETI_GEOCACHE_SIZE &#x3D; 1024</li><li>YETI_TEXTURECACHE_SIZE &#x3D; 1024</li><li>YETI_HOME &#x3D; C:\Yeti-v3.6.0_Maya2018-windows</li><li>peregrinel_LICENSE &#x3D; C:\rlm\yeti.lic</li></ul></li><li><p>破解：yeti破解文件或通过rlm服务器破解</p></li></ul><h3 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a>可能的问题</h3><ol><li>yeti 与Arnold版本不匹配，需要下载相对应的各插件版本，具体参考yeti官网文档</li><li>yeti安装后未破解，打开yeti graph editer时会提示没有许可或工具不显示</li><li>yeti破解后没有成功建立和渲染器的链接，需要在上述对应的.mod文件中写入环境变量,成功写入环境变量后即可渲染</li><li>yeti插件与渲染器成功建立来链接后，开启Maya可能会出现.dll文件的报错没然后Maya卡死，该问题是maya环境中没有找到.dll与对应的渲染器，可能是没有安装，删除yeti安装目录文件夹bin下对应的.dll即可</li><li>渲染没有毛发：渲染器和yeti插件的链接没有接上。没有指定Yeti毛发缓存的存放路径YETI_TMP</li><li>“pgYetiMaya.mod”文件中不能有空行</li></ol><h3 id="制作和渲染问题"><a href="#制作和渲染问题" class="headerlink" title="制作和渲染问题"></a>制作和渲染问题</h3><ol><li><p>pgYetiPreRender:此代码用于指定yeti渲染前产生的yeti缓存文件存放位置，渲染时直接调用此路径下的.fur文件，若不在Maya渲染射中的中preRenderMel选项中填入此代码，则渲染器找不到生成的缓存，渲染失败。低版本中，此代码不会自动写入和自动清除，高版本会判定场景中是否存在相关yeti节点，然后自动写入或清除。</p></li><li><p>yeti毛发取消缓存(将input Mode 设置为None)，需要保存后重开文件，才能正常渲染出毛发。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文记录了一些Maya中Yeti毛发的相关的问题：</summary>
    
    
    
    <category term="Maya" scheme="http://mirrorcg.github.io/categories/Maya/"/>
    
    <category term="杂项" scheme="http://mirrorcg.github.io/categories/Maya/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="Yeti" scheme="http://mirrorcg.github.io/tags/Yeti/"/>
    
  </entry>
  
  <entry>
    <title>ShotGrid的API使用示例</title>
    <link href="http://mirrorcg.github.io/posts/20220814a1.html"/>
    <id>http://mirrorcg.github.io/posts/20220814a1.html</id>
    <published>2022-08-14T10:46:39.000Z</published>
    <updated>2022-08-28T15:46:35.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">本文为 ShotGrid 的 Python API 学习笔记。<span id="more"></span></p><h3 id="注册网站"><a href="#注册网站" class="headerlink" title="注册网站"></a>注册网站</h3><p>如果已经有了自己可操作的 ShotGrid 网站页面，就直接开始吧。没有的话需要在 Autodesk 官网下找到<a href="https://www.shotgridsoftware.com/trial/" title="" target="">ShotGrid 注册</a>自己的 ShotGrid 网站页面，设置邮箱和电话号码后，获取登录账户和密码（可以获得30天的试用时间），就可以开始下面的操作了。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h5 id="最低要求"><a href="#最低要求" class="headerlink" title="最低要求"></a>最低要求</h5><ul><li>Python 2.7 或 Python 3.7</li></ul><h5 id="下载并写入Python搜索路径"><a href="#下载并写入Python搜索路径" class="headerlink" title="下载并写入Python搜索路径"></a>下载并写入Python搜索路径</h5><ul><li>手动下载<ul><li>下载 PythonAPI 库到本地：<a href="https://github.com/shotgunsoftware/python-api/releases" title="" target="">从这下载</a>最新版本到本地。</li><li>将下载的 PythonAPI 加入到 PYTHONPATH 环境变量中，用于我们在代码中可搜索到对应的模块。</li></ul></li><li>pip下载<ul><li>安装最新版本<pre class="language-dos" data-language="dos"><code class="language-dos">pip install git+https:&#x2F;&#x2F;github.com&#x2F;shotgunsoftware&#x2F;python-api.git</code></pre></li><li>安装特定版本<pre class="language-dos" data-language="dos"><code class="language-dos">pip install git+https:&#x2F;&#x2F;github.com&#x2F;shotgunsoftware&#x2F;python-api.git@v3.0.26</code></pre></li></ul></li></ul><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>直接使用用户名和密码，用户身份登录的脚本操作，会生成事件，其中存储了一些额外的元数据，EventLogEntry用于标识事件是由代表用户的脚本创建的。<br><img src="/images/ShotGrid%E7%9A%84API%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/%E4%BA%8B%E4%BB%B6%E7%94%9F%E6%88%90%E6%8E%A7%E5%88%B6.png" alt="事件生成控制 png" srcset="/images/home/Myhead.jpg" data-src="/images/ShotGrid%E7%9A%84API%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/%E4%BA%8B%E4%BB%B6%E7%94%9F%E6%88%90%E6%8E%A7%E5%88%B6.png" class="lozad post-image"><br>而使用脚本身份验证登录前，必须在Shotgun 中注册 (User&gt;Scripts)并具有有效的 API 密钥 (密钥需要在创建的时候记录下来，创建完后不再显示).</p><ul><li><p>基于用户名登陆验证</p><pre class="language-none"><code class="language-none">sg &#x3D; shotgun_api3.Shotgun(&quot;https:&#x2F;&#x2F;piedpiper.shotgunstudio.com&quot;,                        login&#x3D;&quot;rhendriks&quot;,                        password&#x3D;&quot;c0mPre$Hi0n&quot;)</code></pre></li><li><p>基于脚本登录验证</p><pre class="language-none"><code class="language-none">sg &#x3D; shotgun_api3.Shotgun(&quot;https:&#x2F;&#x2F;piedpiper.shotgunstudio.com&quot;,                        script_name&#x3D;&quot;rhendriks&quot;,                        api_key&#x3D;&quot;c0mPre$Hi0n&quot;)</code></pre></li></ul><h3 id="查询内容"><a href="#查询内容" class="headerlink" title="查询内容"></a>查询内容</h3><p>查询结果默认返回查询对象的id,字段中的实体通过id连接，如果使用实体作为过滤项（过滤条件有大括号），每个filter中的实体都应该包含实体的id，这个实体用于筛选查询的范围，那么必须使用实体的id进行过滤，不能使用名称或其他条件，例如[ “shot”,”is”,{“type”:”Shot”,”id”:1173}]；如果过滤项不是实体，那么可以使用名称或其他字段进行过滤，但必须使用点语法（链式调用），例如[ “shot.Shot.code”,”is”,”seq110”]。点语法用于查询点语法中使用的实体以外的实体，例如，project.Project.name为点语法的项目名，只能通过项目名查场次和镜头等，不能用它查询项目本身。查询本身不用点语法，直接使用shotgun.find(“Project”,[ “name”，”is”，”Test_Fly”],[])；点语法：”fieldname.entityname.fieldname.entityname.fieldname…” 只能单实体关系使用语法，由于性能问题，一个字段链接了多个实体时，不能通过点语法获得结果，需要遍历获取。不显示字段代码名称的字段，可以从filed &gt; 右键菜单 &gt; ConfigField 中获取field code名称</p><ul><li><p>查询所有项目</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sg_project &#x3D; sg.find(&quot;Project&quot;, [], [&quot;id&quot;, &quot;name&quot;])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询指定名称的项目(默认返回id)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sg_project &#x3D; sg.find(&quot;Project&quot;, [[&#39;name&#39;, &#39;is&#39;, &quot;Test_Fly&quot;]])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询指定项目所有的场次(通过项目id获取，可直接使用查询到的实体获取相关内容)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sg_project &#x3D; sg.find(&quot;Project&quot;, [[&#39;name&#39;, &#39;is&#39;, &quot;Test_Fly&quot;]])[0][&quot;id&quot;]sg_sequence &#x3D; sg.find(&quot;Sequence&quot;, [[&#39;project&#39;, &#39;is&#39;, &#123;&#39;type&#39;: &#39;Project&#39;, &#39;id&#39;: sg_project&#125;]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查询指定项目的场次(通过项目名称获取,使用点语法)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sg_sequence &#x3D; sg.find(&quot;Sequence&quot;, [[&#39;project.Project.name&#39;, &#39;is&#39;, &quot;Test_Fly&quot;]])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取指定项目的所有镜头(通过项目名称获取)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sg_shot &#x3D; sg.find(&quot;Shot&quot;, [[&#39;project.Project.name&#39;, &#39;is&#39;, &quot;Test_Fly&quot;]])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取指定场次的所有镜头(通过场次id获取)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sg_shot1 &#x3D; sg.find(&quot;Shot&quot;, [[&quot;sg_sequence&quot;, &quot;is&quot;, &#123;&quot;type&quot;:&quot;Sequence&quot;, &quot;id&quot;:44&#125;]], [ &quot;code&quot;])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取指定场次的状态为IP所有镜头(通过场次id获取)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sg_shot2 &#x3D; sg.find(&quot;Shot&quot;, [[&quot;sg_sequence&quot;,&quot;is&quot;, &#123;&quot;type&quot;:&quot;Sequence&quot;,&quot;id&quot;:44&#125;]，[&quot;sg_status_list&quot;, &quot;is&quot;, &quot;ip&quot;]],[ &quot;code&quot;])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取指定场次的状态为IP所有镜头(通过场次名称和项目共同筛选获取)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sg_shot3 &#x3D; sg.find(&quot;Shot&quot;, [[&quot;sg_sequence&quot;,&quot;is&quot;,&#123;&quot;type&quot;:&quot;Sequence&quot;,&quot;Sequence Name&quot;:&quot;seq001&quot;&#125;],[&quot;sg_status_list&quot;, &quot;is&quot;, &quot;ip&quot;], [&#39;project&#39;, &#39;is&#39;,&#123;&#39;type&#39;:&#39;Project&#39;,&#39;id&#39;:122&#125;]])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取指定场次的状态为IP所有镜头(通过场次名称和项目共同筛选获取)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sg_shots &#x3D; sg.find(&quot;Shot&quot;, [[&quot;sg_sequence&quot;,&quot;is&quot;,&#123;&quot;type&quot;:&quot;Sequence&quot;,&quot;Sequence Name&quot;:&quot;seq001&quot;&#125;],[&quot;sg_status_list&quot;, &quot;is&quot;, &quot;ip&quot;], [&#39;project&#39;, &#39;is&#39;,&#123;&#39;type&#39;:&#39;Project&#39;,&#39;id&#39;:122&#125;]])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取指定镜头的资产</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">project_id &#x3D; 122sequence_id &#x3D; 182filter &#x3D;  [  [&#39;project&#39;, &#39;is&#39;, &#123;&#39;type&#39;: &#39;Project&#39;, &#39;id&#39;: project_id&#125;],  [&#39;sg_asset_type&#39;, &#39;is&#39;, &#39;Character&#39;],  [&#39;sequences&#39;, &#39;is&#39;, &#123;&#39;type&#39;: &#39;Sequence&#39;, &#39;id&#39;: sequence_id&#125;]] fields &#x3D; [&#39;id&#39;, &#39;code&#39;, &#39;sg_asset_type&#39;]asset &#x3D; sg.find(&quot;Asset&quot;, filter, fields)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取指定类型的资产</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fields &#x3D; [&#39;id&#39;, &#39;sg_asset_type&#39;, &#39;code&#39;]filters &#x3D; [  [&#39;project&#39;, &#39;is&#39;, &#123;&#39;type&#39;: &#39;Project&#39;, &#39;id&#39;:122&#125;],  [&#39;sequence&#39;, &#39;is&#39;, &#123;&#39;type&#39;: &#39;Sequence&#39;, &#39;id&#39;: 145&#125;],  [&#39;sg_asset_type&#39;, &#39;is&#39;, &#39;Character&#39;]]Character &#x3D; sg.find(&#39;Asset&#39;, filters, fields)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>计算指定Sequence里所有的任务数量，并找到其中最近截止日期</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">entity_type&#x3D;&#39;Task&#39;filter &#x3D; [[&#39;entity.Shot.sg_sequence&#39;, &#39;is&#39;, &#123;&#39;type&#39;:&#39;Sequence&#39;, &#39;id&#39;:2&#125;],[&#39;sg_status_list&#39;, &#39;is_not&#39;, &#39;na&#39;]]summary_field &#x3D; [&#123;&#39;field&#39;:&#39;id&#39;, &#39;type&#39;:&#39;count&#39;&#125;,&#123;&#39;field&#39;:&#39;due_date&#39;,&#39;type&#39;:&#39;latest&#39;&#125;]result &#x3D; sg.summarize(entity_type,filter,summary_field)#最近的截至日期，和当前场次所有任务的总数#&#123;&#39;groups&#39;: [], &#39;summaries&#39;: &#123;&#39;due_date&#39;: &#39;2013-07-05&#39;, &#39;id&#39;: 30&#125;&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取指定 Version id 的mov</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mov &#x3D; sg.find(&quot;Version&quot;, [&quot;id&quot;, &quot;is&quot;, 12321], [ &quot;sg_uploaded_movie&quot;])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询所有的工作流环节</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pipeline &#x3D; shotgun.find(&quot;Step&quot;,[ ],[ &quot;code&quot;])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询指定工作流环节</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shotgun.find(&quot;Step&quot;,[ &quot;code&quot;，&quot;is&quot;，&quot;Animation&quot;],[])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询指定id的镜头</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shotgun.find(&quot;Shot&quot;,[ &quot;id&quot;，&quot;is&quot;，&quot;1207&quot;],[ &quot;code&quot;])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取指定镜头的指定环节的task信息（task是单独的，筛选它的link字段为entity，因此下面是筛选link字段中id为1207的镜头。注意，过滤器的第三项是要过滤的实体的话，必须使用实体id）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shotgun.find(&quot;Task&quot;,[[ &quot;entity&quot;，&quot;is&quot;，&#123;&quot;type&quot;:&quot;shot&quot;,&quot;id&quot;:1207&#125;],[ &quot;shot&quot;,&quot;is&quot;,&#123;&quot;type&quot;:&quot;Shot&quot;,&quot;id&quot;:1174&#125;],[ &quot;content&quot;,&quot;is&quot;,&quot;anim&quot;]],[])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取指定镜头、指定环节、指定名称的task信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shotgun.find(&quot;Task&quot;,[[ &quot;entity&quot;，&quot;is&quot;，&#123;&quot;type&quot;:&quot;shot&quot;,&quot;id&quot;:1207&#125;],[ &quot;shot&quot;,&quot;is&quot;,&#123;&quot;type&quot;:&quot;Shot&quot;,&quot;id&quot;:1174&#125;],[ &quot;content&quot;,&quot;is&quot;,&quot;anim&quot;]],[])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="下载mov"><a href="#下载mov" class="headerlink" title="下载mov"></a>下载mov</h3><p>下载指定 Version id 的mov<br>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">mov &#x3D; sg.find(&quot;Version&quot;, [&quot;id&quot;, &quot;is&quot;, 12321], [&quot;sg_uploaded_movie&quot;])localpath &#x3D; r&quot;E:\temp&quot; + mov[&quot;sg_uploaded_movie&quot;][&quot;name&quot;]sg.download_attachment(version[&quot;sg_uploaded_movie&quot;], file_path&#x3D;local_file_path)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="创建内容"><a href="#创建内容" class="headerlink" title="创建内容"></a>创建内容</h3><ul><li><p>创建镜头</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shotname &#x3D; &quot;test001&quot;data &#x3D; &#123;  &#39;project&#39;: &#123;&#39;type&#39;: &#39;Project&#39;, &#39;id&#39;: 122&#125;,  &#39;sg_sequence&#39;: &#123;&#39;type&#39;: &#39;Sequence&#39;, &#39;id&#39;: 145&#125;,  &#39;code&#39;: shotname,  &#39;sg_status_list&#39;: &#39;ip&#39;&#125;shot &#x3D; sg.create(&#39;Shot&#39;, data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在镜头的pipeline步环节下创建task(一个流程环节可以有多个任务)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">animationStepId &#x3D; 106shotId &#x3D; 1173 data &#x3D; &#123;  &#39;project&#39;: &#123;&#39;type&#39;: &#39;Project&#39;, &#39;id&#39;: 122&#125;,  &#39;content&#39;: &#39;anim&#39;, # 任务名  &#39;step&#39;: &#123;&#39;name&#39;: &#39;Animation&#39;, &#39;type&#39;: &#39;Step&#39;, &#39;id&#39;: animationStepId&#125;,  &#39;entity&#39;: &#123;&#39;type&#39;: &#39;Shot&#39;, &#39;id&#39;: shotId&#125;&#125;task &#x3D; sg.create(&#39;Task&#39;, data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Task下创建Version</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python">taskCode &#x3D; &#39;testVersion_v001&#39;shotId &#x3D; 1173 taskId &#x3D; 5964data &#x3D; &#123;  &#39;project&#39;: &#123;&#39;type&#39;: &#39;Project&#39;, &#39;id&#39;: 122&#125;,  &#39;code&#39; : taskCode,  &#39;sg_status_list&#39; : &#39;rev&#39;,  &#39;entity&#39;: &#123;&#39;type&#39;: &#39;Shot&#39;, &#39;id&#39;: shotId&#125;,   &#39;sg_task&#39;: &#123;&#39;type&#39;: &#39;Task&#39;, &#39;id&#39;: taskId&#125;,   &#39;user&#39;: &#123;&#39;type&#39;: &#39;HumanUser&#39;, &#39;id&#39;: 220&#125; # 创建Version的人员&#125;version &#x3D; sg.create(&#39;Version&#39;, data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建带有镜头和任务链接的版本</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python">shotID &#x3D; 1173taskID &#x3D; 5964 data &#x3D; &#123; &#39;project&#39;: &#123;&#39;type&#39;: &#39;Project&#39;,&#39;id&#39;: 122&#125;,        &#39;code&#39;: &#39;100_010_anim_v1&#39;,        &#39;description&#39;: &#39;first pass at opening shot with bunnies&#39;,        &#39;sg_path_to_frames&#39;: &#39;&#x2F;v1&#x2F;gun&#x2F;s100&#x2F;010&#x2F;frames&#x2F;anim&#x2F;100_010_animv1_jack.#.jpg&#39;,        &#39;sg_status_list&#39;: &#39;rev&#39;,        &#39;entity&#39;: &#123;&#39;type&#39;: &#39;Shot&#39;, &#39;id&#39;:  shotID&#125;,        &#39;sg_task&#39;: &#123;&#39;type&#39;: &#39;Task&#39;, &#39;id&#39;: taskID&#125;,        &#39;user&#39;: &#123;&#39;type&#39;: &#39;HumanUser&#39;, &#39;id&#39;: 165&#125; &#125; result &#x3D; sg.create(&#39;Version&#39;, data) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用任务模板创建任务</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">filters &#x3D; [[&#39;code&#39;,&#39;is&#39;, &#39;3D Shot Template&#39; ]]taskTemplate &#x3D; sg.find_one(&#39;TaskTemplate&#39;, filters)  # 查找任务模板taskId &#x3D; 5964data &#x3D; &#123;&#39;project&#39;: &#123;&#39;type&#39;: &#39;Project&#39;,&#39;id&#39;: 122&#125;,      &#39;code&#39;: &#39;seq001_sc001&#39;,      &#39;description&#39;: &#39;creating a task with taskTemplate&#39;,      &#39;task_template&#39;: template &#125;result &#x3D; sg.create(&#39;Shot&#39;, data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建自定义实体 Entity(查找方式和查找别的实体一样)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data &#x3D; &#123;  &#39;project&#39;: &#123;&#39;type&#39;: &#39;Project&#39;, &#39;id&#39;: 122&#125;,  &#39;code&#39;: &#39;test_plate_v001&#39;,  &#39;sg_shot&#39;: &#123;&#39;type&#39;: &#39;Shot&#39;, &#39;id&#39;: 1173&#125;,  &#39;updated_by&#39;: &#123;&#39;type&#39;: &#39;Group&#39;, &#39;id&#39;: 3&#125;, # 更新用户为群组  &#39;sg_original_resolution&#39;: &#39;1920x1080&#39;,  &#39;sg_plate_type&#39;: &#39;BG01&#39;,  &#39;sg_frames_scanned&#39;: 150,  &#39;sg_scan_start&#39;: 1,  &#39;sg_scan_end&#39;: 150&#125;plate &#x3D; sg.create(&#39;CustomEntity10&#39;, data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>上传缩略图</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">versionID &#x3D; 214picPath &#x3D; &quot;&#x2F;v1&#x2F;gun&#x2F;s100&#x2F;010&#x2F;beauties&#x2F;anim&#x2F;100_010_animv1.jpg&quot;sg.upload_thumbnail(&quot;Version&quot;, versionID, picPath)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h3><ul><li><p>更新镜头</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shotId &#x3D; 1173data &#x3D; &#123;  &#39;description&#39;: &#39;Open on a beautiful field with fuzzy bunnies&#39;,  &#39;sg_status_list&#39;: &#39;ip&#39;  &#125;result &#x3D; sg.update(&#39;Shot&#39;, shotId, data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新Mov到镜头</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shotId &#x3D; 423mov_file &#x3D; &#39;&#x2F;data&#x2F;show&#x2F;ne2&#x2F;100_110&#x2F;anim&#x2F;01.mlk-02b.mov&#39;sg.upload(&quot;Shot&quot;, shotId, mov_file, field_name&#x3D;&quot;sg_latest_quicktime&quot;, display_name&#x3D;&quot;Latest QT&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="删除内容"><a href="#删除内容" class="headerlink" title="删除内容"></a>删除内容</h3><ul><li><p>删除指定id的project实体</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sg_delete &#x3D; sg.delete(&quot;Project&quot;,155)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除指定镜头</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shotId &#x3D; 1173result &#x3D; sg.delete(&quot;Shot&quot;,shotId)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="恢复内容"><a href="#恢复内容" class="headerlink" title="恢复内容"></a>恢复内容</h3><ul><li>恢复删掉的镜头<pre class="line-numbers language-python" data-language="python"><code class="language-python">shotId &#x3D; 1173sg.revive(&quot;Shot&quot;, shotId)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="批量处理（创建，删除，更新）镜头"><a href="#批量处理（创建，删除，更新）镜头" class="headerlink" title="批量处理（创建，删除，更新）镜头"></a>批量处理（创建，删除，更新）镜头</h3><p>使用batch函数的任务，要么全部完成，要么全都不完成</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">batch_data &#x3D; []for i in range(1,100):    data &#x3D; &#123;        &quot;code&quot;: &quot;shot_%04d&quot; % i,        &quot;project&quot;: project    &#125;    batch_data.append(&#123;&quot;request_type&quot;: &quot;create&quot;, &quot;entity_type&quot;: &quot;Shot&quot;, &quot;data&quot;: data&#125;)sg.batch(batch_data)  batch_data &#x3D; [  &#123;&quot;request_type&quot;: &quot;create&quot;, &quot;entity_type&quot;: &quot;Shot&quot;, &quot;data&quot;: &#123;&quot;code&quot;: &quot;New Shot 1&quot;, &quot;project&quot;: project&#125;&#125;,  &#123;&quot;request_type&quot;: &quot;update&quot;, &quot;entity_type&quot;: &quot;Shot&quot;, &quot;entity_id&quot;: 3624, &quot;data&quot;: &#123;&quot;code&quot;: &quot;Changed 1&quot;&#125;&#125;,  &#123;&quot;request_type&quot;: &quot;delete&quot;, &quot;entity_type&quot;: &quot;Shot&quot;, &quot;entity_id&quot;: 3624&#125;]sg.batch(batch_data) # 三种不同类型可同时存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关闭链接"><a href="#关闭链接" class="headerlink" title="关闭链接"></a>关闭链接</h3>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">sg.close()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="部分可查询实体类型"><a href="#部分可查询实体类型" class="headerlink" title="部分可查询实体类型"></a>部分可查询实体类型</h3><table><thead><tr><th align="right">实体类型名称</th><th align="left">实体含义</th></tr></thead><tbody><tr><td align="right">ActionMenuItem</td><td align="left">动作菜单</td></tr><tr><td align="right">ApiUser</td><td align="left">脚本</td></tr><tr><td align="right">Asset</td><td align="left">资产</td></tr><tr><td align="right">Attachment</td><td align="left">附件</td></tr><tr><td align="right">Booking</td><td align="left">人员规划</td></tr><tr><td align="right">Camera</td><td align="left">摄像机</td></tr><tr><td align="right">ClientUser</td><td align="left">客户</td></tr><tr><td align="right">Composition</td><td align="left">合成</td></tr><tr><td align="right">Cut</td><td align="left">剪辑镜头</td></tr><tr><td align="right">CutItem</td><td align="left">剪辑镜头项</td></tr><tr><td align="right">Delivery</td><td align="left">分发</td></tr><tr><td align="right">Department</td><td align="left">部门</td></tr><tr><td align="right">Episode</td><td align="left">季</td></tr><tr><td align="right">EventLogEntry</td><td align="left">事件日志</td></tr><tr><td align="right">FilesystemLocation</td><td align="left">文件系统位置</td></tr><tr><td align="right">Group</td><td align="left">组</td></tr><tr><td align="right">HumanUser</td><td align="left">人员</td></tr><tr><td align="right">Icon</td><td align="left">图标</td></tr><tr><td align="right">Level</td><td align="left">关卡</td></tr><tr><td align="right">LocalStorage</td><td align="left">本地存储</td></tr><tr><td align="right">MocapPass</td><td align="left">动作捕捉过程</td></tr><tr><td align="right">MocapSetup</td><td align="left">动作捕捉设置</td></tr><tr><td align="right">MocapTake</td><td align="left">动作捕捉条目</td></tr><tr><td align="right">MocapTakeRange</td><td align="left">动作捕捉条目范围</td></tr><tr><td align="right">Note</td><td align="left">反馈，记录</td></tr><tr><td align="right">Page</td><td align="left">页面</td></tr><tr><td align="right">PageHit</td><td align="left">页面点击</td></tr><tr><td align="right">PageSetting</td><td align="left">页面设置</td></tr><tr><td align="right">Performer</td><td align="left">演员</td></tr><tr><td align="right">PermissionRuleSet</td><td align="left">权限组设置</td></tr><tr><td align="right">Phase</td><td align="left">项目时间表</td></tr><tr><td align="right">PhysicalAsset</td><td align="left">实拍道具</td></tr><tr><td align="right">PipelineConfiguration</td><td align="left">工作流工序配置</td></tr><tr><td align="right">Playlist</td><td align="left">播放表单</td></tr><tr><td align="right">PlaylistShare</td><td align="left">共享的播放表单</td></tr><tr><td align="right">Project</td><td align="left">项目</td></tr><tr><td align="right">PublishedFile</td><td align="left">已发布文件</td></tr><tr><td align="right">PublishedFileDependency</td><td align="left">已发布文件依存关系</td></tr><tr><td align="right">PublishedFileType</td><td align="left">已发布文件类型</td></tr><tr><td align="right">Release</td><td align="left">软件发布版本</td></tr><tr><td align="right">Reply</td><td align="left">回复</td></tr><tr><td align="right">Revision</td><td align="left">修正版本</td></tr><tr><td align="right">Routine</td><td align="left">运动捕捉例程</td></tr><tr><td align="right">RvLicense</td><td align="left">RV许可证</td></tr><tr><td align="right">Scene</td><td align="left">场</td></tr><tr><td align="right">Sequence</td><td align="left">本</td></tr><tr><td align="right">ShootDay</td><td align="left">拍摄日期</td></tr><tr><td align="right">Shot</td><td align="left">镜头</td></tr><tr><td align="right">Software</td><td align="left">DCC软件</td></tr><tr><td align="right">Status</td><td align="left">状态</td></tr><tr><td align="right">Step</td><td align="left">工作流工序</td></tr><tr><td align="right">Tag</td><td align="left">标签</td></tr><tr><td align="right">Task</td><td align="left">任务</td></tr><tr><td align="right">TaskDependency</td><td align="left">任务依存关系</td></tr><tr><td align="right">TaskTemplate</td><td align="left">任务模版</td></tr><tr><td align="right">Ticket</td><td align="left">软件开发工单</td></tr><tr><td align="right">TimeLog</td><td align="left">工时记录</td></tr><tr><td align="right">Version</td><td align="left">版本</td></tr></tbody></table><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>ShotGrid API文档：<a href="https://developer.shotgridsoftware.com/python-api/">https://developer.shotgridsoftware.com/python-api/</a><br>用户帮助文档：<a href="https://shotgunsoftware.zendesk.com/hc/zh-cn">https://shotgunsoftware.zendesk.com/hc/zh-cn</a><br>站点状态查询网站：<a href="https://status.shotgridsoftware.com/">https://status.shotgridsoftware.com/</a><br>shot教学视频：<a href="https://space.bilibili.com/399556599">https://space.bilibili.com/399556599</a></p>]]></content>
    
    
    <summary type="html">&lt;p style=&quot;text-indent:2em&quot;&gt;本文为 ShotGrid 的 Python API 学习笔记。</summary>
    
    
    
    <category term="ShotGrid" scheme="http://mirrorcg.github.io/categories/ShotGrid/"/>
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/categories/ShotGrid/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Pipeline" scheme="http://mirrorcg.github.io/tags/Pipeline/"/>
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="API" scheme="http://mirrorcg.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Nuke学习笔记4_回调函数</title>
    <link href="http://mirrorcg.github.io/posts/20220807a1.html"/>
    <id>http://mirrorcg.github.io/posts/20220807a1.html</id>
    <published>2022-08-07T12:41:35.000Z</published>
    <updated>2022-08-07T12:41:35.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Nuke学习笔记 <span id="more"></span></p><h3 id="Nuke-API-文档"><a href="#Nuke-API-文档" class="headerlink" title="Nuke API 文档"></a>Nuke API 文档</h3><ul><li>本地文档：C:\Program Files\Nuke12.2v2\Documentation</li><li>在线文档：<a href="https://learn.foundry.com/nuke/12.2/content/misc/nuke_devs.html">https://learn.foundry.com/nuke/12.2/content/misc/nuke_devs.html</a><ul><li>Nuke Python Developers Guide: 案例教程</li><li>Python Scripting Reference： API 参考文档</li><li><a href="http://www.nukepedia.com/reference/Tcl/" title="" target="">TCL Scripting Reference: TCL 表达式参考文档</a></li></ul></li></ul><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>部分回调函数的使用</p><ul><li>添加回调函数<ul><li>nuke.toNode(“节点名”)[“knobChanged”].setValue(回调函数) 仅对选择的节点生效，此处回调函数是字符串格式</li><li>nuke.addOnCreate(callable,args&#x3D;(),kwargs&#x3D;{},nodeClass&#x3D;”*”)</li><li>callable 可调用对象</li><li>args 不定长位置参数列表</li><li>kwargs 不定长关键字参数字典</li><li>nodeClass 默认值是星号，指无论当前节点是什么，在事件发生时都会执行这个回调函数，需自定义</li></ul></li><li>删除回调函数</li><li>事件函数<ul><li><p>knobChanged 用户在打开的面版中改变knob后执行事件，可实现联动事件</p><ul><li>nuke.thisNode() 该控件在打开、关闭面板或输入端改变时，分别指向showPanel、hidePanel、inputChange事件，这三个控件使用代码获取不到，但可以在knobChange中使用控件名<pre class="language-Python" data-language="Python"><code class="language-Python">def testevent():    &quot;&quot;&quot;如果打开面板，打印内容&quot;&quot;&quot;    k&#x3D;nuke.thisKnob()    if k.name() &#x3D;&#x3D; &quot;showPanel&quot;:        print(&quot;show&quot;)nuke.addKnobChanged(testevent, nodeClass&#x3D;&quot;NoOp&quot;)</code></pre></li></ul></li><li><p>updateUI 任意UI发生变化后触发，比knobChange优先级低，不应在其中添加任何和回调结构有关的操作</p></li><li><p>autolabel 在updateUI之后执行，用于为节点设置在Node Grape中显示的文本 ，按照函数添加的顺序，从后往前执行，只要那个函数的返回值不是None，那么这个返回值就用于该节点的显示文本，若没有返回值或返回值为None,则使用节点名显示，该显示的文本和label标签不同。</p></li></ul></li></ul><p>回调函数执行顺序：<br>可以通过控件设置的回调函数 &gt; 使用注册回调函数添加的回调函数<br>使用注册回调函数添加的回调函数的优先级依赖注册的先后顺序，并先执行指定了nodeClass参数的回调，再执行满足所有类型的回调。addAutolabel()和addFilenameFilter()是特里，它们恰恰与之相反。<br>onCreate 对于Group节点，会先执行其中的内部节点，然后再在Group节点上执行一遍回调<br>onDestory事件和onCreate事件相反<br>onUserCreate执行优先级 &gt; onCreate执行优先级 </p><h3 id="部分回调函数"><a href="#部分回调函数" class="headerlink" title="部分回调函数"></a>部分回调函数</h3><table><tr><td><img src="/images/Nuke学习笔记4_回调函数/回调函数1.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/Nuke学习笔记4_回调函数/回调函数1.png" class="lozad post-image"></td><td><img src="/images/Nuke学习笔记4_回调函数/回调函数2.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/Nuke学习笔记4_回调函数/回调函数2.png" class="lozad post-image"></td></tr></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;Nuke学习笔记</summary>
    
    
    
    <category term="Nuke" scheme="http://mirrorcg.github.io/categories/Nuke/"/>
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/categories/Nuke/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Nuke学习笔记3_菜单的加载和界面</title>
    <link href="http://mirrorcg.github.io/posts/20220801a1.html"/>
    <id>http://mirrorcg.github.io/posts/20220801a1.html</id>
    <published>2022-07-31T16:19:20.000Z</published>
    <updated>2022-07-31T16:19:20.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Nuke学习笔记 <span id="more"></span></p><h3 id="Nuke-API-文档"><a href="#Nuke-API-文档" class="headerlink" title="Nuke API 文档"></a>Nuke API 文档</h3><ul><li>本地文档：C:\Program Files\Nuke12.2v2\Documentation</li><li>在线文档：<a href="https://learn.foundry.com/nuke/12.2/content/misc/nuke_devs.html">https://learn.foundry.com/nuke/12.2/content/misc/nuke_devs.html</a><ul><li>Nuke Python Developers Guide: 案例教程</li><li>Python Scripting Reference： API 参考文档</li><li>TCL Scripting Reference: TCL 表达式参考文档</li></ul></li></ul><h3 id="工具加载"><a href="#工具加载" class="headerlink" title="工具加载"></a>工具加载</h3><p>开启 nuke 时，系统会加载两个安装目录的Plugins文件夹下的两个文件：</p><ul><li>init.py : 用于Nuke的环境设置、系统选项和默认参数，不能包含任何界面相关操作，命令行模式和GUI模式下均加载。</li><li>menu.py ：用于跟界面相关的设置、自定义菜单、工具架，仅GUI模式加载。<br>位于用户文件夹下存放用户预设的.nuke文件夹，其下的init.py和menu.py用于存放用户预设。</li></ul><p>加载工具方式</p><ul><li>加载工具不运行：仅需要在init.py导入模块的主函数即可，再通过工具界面去调用主函数</li></ul><h3 id="加载工具相关函数"><a href="#加载工具相关函数" class="headerlink" title="加载工具相关函数"></a>加载工具相关函数</h3><ul><li>获取插件和图标的搜索路径 nuke.pluginPath()</li><li>向系统搜索路径添加路径到开头,并加载路径下的init.py nuke.pluginAddPath(“pathstr or pathList”)</li><li>向系统搜索路径添加路径到结尾,但不加载路径下的init.py nuke.pluginAppendPath(“pathstr or pathList”)</li><li>检测指定的函数或插件是否存在 nuke.pluginExists(“pluginName or path or fileName”)</li><li>返回所有已经加载的插件的文件路径列表 nuke.pligins(num,”re表达式过滤”，”re表达式过滤”，…)  num为 0，1，2，3</li></ul><h3 id="Nuke环境变量"><a href="#Nuke环境变量" class="headerlink" title="Nuke环境变量"></a>Nuke环境变量</h3><p>NUKE_PATH、OFX_PLUGIN_PATH都是列表后面的路径先加载，以反向解析加载路径的方式进行的，因此涉及继承和覆盖的通用配置需要放在列表后面，特殊和本地的配置放在列表开头。nuke.pluginPath是正向解析加载方式。</p><ul><li>NUKE_PATH 搜索 Nuke 的init.py 和menu.py文件的路径，可以将插件放在不同的位置，并且每一个插件都有各自的init.py和menu.py文件，就不用将所有插件都写入 .nuke 文件夹下的文件中，实现分布式管理</li><li>OFX_PLUGIN_PATH 用来设置和加载ofx插件的位置，指向ofx的安装路径</li></ul><h3 id="自定义菜单常用类型"><a href="#自定义菜单常用类型" class="headerlink" title="自定义菜单常用类型"></a>自定义菜单常用类型</h3><p>Nuke的菜单界面和Qt是两套体系,Nuke 界面不属于Qt范畴</p><ul><li>菜单栏工具<ul><li>nuke.menu(“Nuke”)</li></ul></li><li>工具栏工具<ul><li>nuke.menu(“Nodes”)</li></ul></li><li>NodeGraph中右键工具<ul><li>nuke.menu(“Node Graph”)</li></ul></li></ul><h3 id="自定义菜单函数"><a href="#自定义菜单函数" class="headerlink" title="自定义菜单函数"></a>自定义菜单函数</h3><ul><li><p>nuke.Menu 菜单类型</p><ul><li>nuke.menu(“Nuke”).findItem(“菜单项名称”) 查找指定菜单项 <ul><li>菜单项名称可以是相对于顶级菜单项的名称 nuke.menu(“Nuke”).findItem(“菜单项1&#x2F;菜单项2&#x2F;菜单项3”)</li></ul></li><li>nuke.menu(“Nuke”).menu(“菜单项名称”) 查找指定菜单项</li><li>nuke.Menu.items() 返回查询到的菜单项</li><li>nuke.menu(“Nuke”).addMenu(“新加项”，icon&#x3D;””,tooltip&#x3D;””,index&#x3D;””) 创建新菜单，其中新加项也是相对路径，index添加位置，默认为-1，只对要添加的最后一级菜单项有效  </li><li>nuke.menu(“Nuke”).addcommand(“新加项”,”脚本字符串”，“快捷键”，”icon”,”tooltip”，”index”) 添加菜单项命令，其中 “脚本字符串”可以为可执行的Python语句，或lambda函数，若没有指定命令，则会默认为创建一个名为新加项的节点。</li><li>nuke.menu(“Nuke”).removeItem(“删除项”) 删除指定的菜单，其中删除项不为相对路径，要删除指定项，需要从指定级的上一级删除，空菜单会自动删除</li><li>nuke.menu(“Nuke”).clearMenu() 删除菜单下的所有菜单项，也不支持相对路径，不会删除当前空菜单</li></ul></li><li><p>nuke.MenuItem 创建菜单项类</p><ul><li>nuke.menu(“Nuke”).findItem(“菜单项”).action() 获取QAction对象,其父对象是QMainWindow</li><li>nuke.menu(“Nuke”).findItem(“菜单项”).invoke() 直接执行menuItem，等同于nuke.menu(“Nuke”).findItem(“菜单项”).action().trigger()</li><li>nuke.menu(“Nuke”).findItem(“菜单项”).script() 返回对应的字符串，如果是lambda函数，其返回值是空</li><li>nuke.menu(“Nuke”).findItem(“菜单项”).setScript() 重新设置字符串</li></ul></li><li><p>nuke.menu(“菜单名”) 获取指定的根菜单，以下列出部分菜单名</p><ul><li>Nuke 菜单栏</li><li>Nodes 工具栏</li><li>Node Graph NodeGraph中的右键菜单</li><li>Viewer Viewer菜单</li><li>Properties 节点属性对话框中的右键菜单</li><li>Animation 动画控件和曲线编辑器右键菜单</li><li>Pane 界面中面板布局右键菜单</li><li>Axis 坐标右键菜单</li></ul></li></ul><h3 id="获取当前软件QT对象"><a href="#获取当前软件QT对象" class="headerlink" title="获取当前软件QT对象"></a>获取当前软件QT对象</h3><pre class="line-numbers language-pyhton" data-language="pyhton"><code class="language-pyhton">from Pyside2 import QtWidgetsallWin &#x3D; [w for w in QtWidgets.QApplication.instance().topLevelWidgets() if w.windowTitle() &#x3D;&#x3D; &quot;窗口提示&quot;]allMenu &#x3D; [w for w in allWin[0]children() if isinstance(w,QtWidgets.QMenuBar)]menubar &#x3D; allMenu[0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;Nuke学习笔记</summary>
    
    
    
    <category term="Nuke" scheme="http://mirrorcg.github.io/categories/Nuke/"/>
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/categories/Nuke/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Nuke学习笔记2_节点与Knob</title>
    <link href="http://mirrorcg.github.io/posts/20220731a1.html"/>
    <id>http://mirrorcg.github.io/posts/20220731a1.html</id>
    <published>2022-07-31T07:23:52.000Z</published>
    <updated>2022-11-02T05:03:57.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Nuke学习笔记 <span id="more"></span></p><h3 id="Nuke-API-文档"><a href="#Nuke-API-文档" class="headerlink" title="Nuke API 文档"></a>Nuke API 文档</h3><ul><li>本地文档：C:\Program Files\Nuke12.2v2\Documentation</li><li>在线文档：<a href="https://learn.foundry.com/nuke/12.2/content/misc/nuke_devs.html">https://learn.foundry.com/nuke/12.2/content/misc/nuke_devs.html</a><ul><li>Nuke Python Developers Guide: 案例教程</li><li>Python Scripting Reference： API 参考文档</li><li>TCL Scripting Reference: TCL 表达式参考文档</li></ul></li></ul><h3 id="节点创建和删除"><a href="#节点创建和删除" class="headerlink" title="节点创建和删除"></a>节点创建和删除</h3><p>nuke节点的有可能有不同的版本，比如”Text”和”Text2”、 “Merge”和”Merge2”、”Tracher”和”Tracher3”以及”Tracher4”，默认情况下使用的是新版。右键 &gt; Other &gt; All Plugin &gt; Update，这个操作会扫描并加载所有可用的节点。bezier节点不能被扫描出来，可使用Roto代替,若一定要使用，可使用代码创建或使用 Comp Script Command（TCL） 快捷键（X）创建想要的节点。节点参数的键可以在Nuke中将鼠标悬停在参数选项上，显示的提示框的第一句就是参数的名称，参数的值可复制节点到文本编辑器中查询，有时参数可能设置不上，是Nuke的一些bug,需要寻找别的手段设置。前台模式适合在Gui模式下交互，并且创建的节点会默认连接到当前选择的节点下，若没有选中节点，则创建在鼠标最后一次点击的位置；后台模式更适合后台运行脚本，创建的节点的位置随机。</p><ul><li>创建节点：<ul><li>前台模式：nuke.createNode(“节点类型”) </li><li>后台模式：nuke.nodes.Read()</li></ul></li><li>创建节点时不弹出参数设置对话框：nuke.createNode(“节点类型”，inpanel&#x3D;False)</li><li>创建节点时设置参数：<ul><li>前台模式：nuke.createNode(“Text2”,”message ‘test’ yjustify center”)</li><li>后台模式：nuke.nodes.Read(message&#x3D;’test’, yjustify&#x3D;center)</li></ul></li><li>获取选中节点类型名：<ul><li>nuke.getNodeClassName()(选中状态的节点)</li><li>node &#x3D; createNode(“Text2”);node.Class()</li></ul></li><li>获取节点名：node.name()</li><li>删除节点：<ul><li>前台模式：nuke.delete(node)</li><li>后台模式：nuke.nodeDelete()(选中状态的节点)</li></ul></li></ul><h5 id="Read节点读取文件小技巧"><a href="#Read节点读取文件小技巧" class="headerlink" title="Read节点读取文件小技巧"></a>Read节点读取文件小技巧</h5><p>通过fromUserText方法读取视频文件，可以直接获取到视频文件的视频的长度。</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">import nukereadNode &#x3D; nuke.nodes.Read()movPath &#x3D; r&quot;D:\mov\test.mov&quot;readNode[&#39;file&#39;].fromUserText(movpath)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果是exr或者别的图片序列呢？<br>通过nuke.getFileNameList(path)方法可以获取到文件夹下的序列，进行自动分类，并返回一个字符串列表：</p><blockquote><p>[‘N.####.exr 1-15’, ‘Z.####.exr 1-7’, ‘beauty.####.exr 1-160’]</p></blockquote><p>创建read节点示例如下：</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">import nukereadNode &#x3D; nuke.nodes.Read()exrPath &#x3D; r&quot;D:\image\beauty&quot;exrlist &#x3D; nuke.getFileNameList(exrPath)for _each in exrlist:    readNode &#x3D; nuke.nodes.Read()    readNode[&#39;file&#39;].fromUserText(&quot;%s&#x2F;%s&quot; % (exrPath,_each))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="选择和链接节点"><a href="#选择和链接节点" class="headerlink" title="选择和链接节点"></a>选择和链接节点</h3><ul><li>获取节点：nuke.toNode(“节点名”)</li><li>获取节点输入：<ul><li>获取所有输入端：nuke.inputs()</li><li>获取指定输入端：nuke.input(端口数字)</li></ul></li><li>链接节点：nuke.setInput(端口数字，nuke.toNode(“节点名”)) </li><li>获取所有节点：nuke.allNodes()</li><li>获取选中节点：<ul><li>仅返回最后一个被选中的节点 nuke.selectedNode() </li><li>返回主节点树中所有选中的节点 nuke.selectedNodes()</li></ul></li><li>选中以获得的节点<ul><li>将节点设置为选中状态 node &#x3D; createNode(“Text2”);node.setSelect(是否选中) 也可以传递参数设置选中状态</li><li>将当前节点设置为整个节点树中唯一被选中的状态 node.selectOnly()</li></ul></li><li>选中所有节点 nuke.selectAll()</li><li>选中满足模糊搜索节点名称的节点：nuke.selectPattern() 仅能在GUI模式下使用</li><li>选中与当前选中节点类似的节点：nuke.selectSimilar(“要匹配的类型”)<ul><li>选中有相似的类型 nuke.selectSimilar(nuke.MATCH_CLASS)</li><li>选中有相似的label标签 nuke.selectSimilar(nuke.MATCH_LABEL)</li><li>选中有相似的颜色 nuke.selectSimilar(nuke.MATCH_COLOR)</li></ul></li><li>将选中节点的上下游都设置为选中状态 nuke.selectConnectedNodes()</li><li>判断是否有被选中的节点 nuke.nodesSelected()</li><li>反向选择 nuke.invertSelection()</li><li>将节点从选中的节点中脱离出来 nuke.extractSelected()</li><li>克隆选中的节点 nuke.cloneSelected()</li><li>以递归形式清除节点的选中状态 nukescript.misc.clear_selection_recursive() 包括Gizmo 和 Group 中选中的节点也会被清除选中。</li></ul><h3 id="节点位置和布局"><a href="#节点位置和布局" class="headerlink" title="节点位置和布局"></a>节点位置和布局</h3><p> NodeGraph 的坐标轴方向是X轴向右，Y轴向下；节点的位置指的是节点左上角的位置.<br> 位置相关方法,node &#x3D; createNode(“Text2”)：</p><ul><li>获取位置<ul><li>node.xpos()、node.ypos()</li><li>node[“xpos”].value、node[“ypos”].value</li></ul></li><li>设置位置<ul><li>node.setXpos(“value”)、node.setYpos(“value”)、node.setXYpos(“value1”,”value2”)</li><li>node[“xpos”].setValue(“value”)、node[“ypos”].setValue(“value”)</li></ul></li><li>获取节点长宽<ul><li>node.screenWidth()、node.screenHeight()</li></ul></li><li>自动布局到选中节点的下方 node.autoplace()</li><li>NodeGraph 缩放比 <ul><li>查询缩放比 nuke.zoom()</li><li>设置缩放比 nuke.zoom(倍数，[焦距的位置X,焦距的位置Y])</li><li>聚焦到指定节点 nuke.zoom(倍数，[node.xpos(),node.ypos()])</li></ul></li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul><li>打开新Nuke工程 nuke.scriptNew() ctrl+N</li><li>打开指定Nuke工程 nuke.scriptOpen(“存在的Nuke工程路径”) </li><li>将已有的Nuke工程导入到当前的Nuke工程中<ul><li>nuke.scriptSource()</li><li>nuke.scriptRendFile()</li></ul></li><li>清空当前NodeGraph:<ul><li>直接放弃修改，无返回值 nuke.scriptClear()</li><li>提示是否保存更改，有返回值 nuke.scriptClose()</li></ul></li><li>退出Nuke nuke.scriptExit()</li><li>获取当前文件名称 <ul><li>nuke.scriptName()</li><li>nuke.Root().name()</li><li>nuke.Root()[“name”].value()</li><li>nuke.Root().knob(“name”).value()</li></ul></li><li>从节点中进入节点树环境.使用上下文管理器with ‘with nuke.Root()’</li><li>返回当前工程所在的文件夹的路径<ul><li>nuke.utils.script_directory()</li><li>nukescripts.script_directory()（该方法调用上面的方法）</li></ul></li><li>复制和粘贴<ul><li>从字符串创建一个节点 nuke.scriptReadText(“表示节点的字符串，超麻烦”)</li><li>将选中的节点暂存到文本名或粘贴板名的文件中 nuke.nodeCopy(“文件路径或临时起名的粘贴板中”)</li><li>将粘贴板中的内容粘贴到nuke中 nuke.nodePaste(“文件路径或临时起名的粘贴板中”)  # %clipboard% 可表示系统粘贴板</li></ul></li><li>保存工程 <ul><li>直接保存 nuke.scriptSave()</li><li>另存为 nuke.scriptSaveAs(“文件名”)</li><li>另存时不修改Root节点中的路径 nuke.scriptSaveToTemp(“文件名”)</li><li>保存文件后清空nuke工程 nuke.scriptSaveAndClear()</li></ul></li></ul><h3 id="Nuke中的控件（Knob）"><a href="#Nuke中的控件（Knob）" class="headerlink" title="Nuke中的控件（Knob）"></a>Nuke中的控件（Knob）</h3><p>Nuke中的文本框、下拉菜单、复选框、滑块等基本控件，以及色彩设置<br>图片尺寸、坐标值等 专属控件都称为Knob。<br>node &#x3D; nuke.toNode(“Read”)</p><ul><li>获取所有的控件 <ul><li>node.allKnobs() 所有控件列表</li><li>node.knobs() 所有控件字典</li></ul></li><li>获取特定的控件对象 <ul><li>根据控件名获取<ul><li>node.knob(“控件名”) 没找到指定对象返回None</li><li>node[“控件名”] 没找到指定对象会报错</li><li>node.knobs().get(“控件名”) 根据控件名获取控件对象</li></ul></li><li>根据序号获取<ul><li>node.numKnobs() 返回当前节点中所有控件的总数量</li><li>node.knob(控件序号)</li></ul></li></ul></li><li>获取当前用户操作的控件 nuke.thisNode() </li><li>控件状态 <ul><li>node.knob(“控件名”).enable() 是否启用</li><li>node.knob(“控件名”).enable()setEnable() 设置启用状态</li><li>node.knob(“控件名”).enable()visible() 是否可见</li><li>node.knob(“控件名”).enable()setVisible() 设置可见状态</li></ul></li><li>返回标签名、控件名、提示信息 label()、name()、tooltip()</li><li>设置标签名、控件名、提示信息 setLabel()、setName()、setTooltip()</li><li>获取控件值<ul><li>value() 控件会根据需要进行继承和修改函数</li><li>getValue(oc) 获取特定帧或特定视图下的值</li><li>getValueAt()</li><li>defaultValue() 获取默认值</li></ul></li><li>设置控件的值  <ul><li>setValue(value,view&#x3D;”default”) 控件会根据需要进行继承和修改函数</li><li>setValueAt()</li><li>setDafaultValue() 设置控件的默认值</li><li>nuke.knobDefault(“节点名.控件名”，”参数”) 对节点的参数设置全局默认值</li></ul></li><li>控件值是否不为默认值 notDefault()</li></ul><p>format_knob 参数默认值来源于Root节点的format值</p><ul><li>获取值 node.knob(“format控件名”).value() </li><li>设置值 node.knob(“format控件名”).setValue()</li><li>新建默认format值 nuke.addFormat(“新建format值”) 新建format值为TCL表达式，其至少要包含 宽度，高度，格式名三项，每项用空格分隔，名称不能用数字开头</li></ul><p>TCL表达式相关函数：</p><ul><li>node.knob(“format控件名”).fromScript(“tcl表达式”) 接受tcl表达式并赋值给对象</li><li>node.knob(“format控件名”).toScript(bool,time) 将值输出为TCL表达式 bool为Ture，结果两侧加大括号，反之不加，time为具体帧，则仅设置该帧，若为None，则设置所有帧</li><li>node.knob(“format控件名”).readKnobs(“tcl表达式”) 使用tcl表达式为一个或多个节点控件赋值</li><li>node.knob(“format控件名”).writeKnobs(value) 将控件值以tcl表达式方式输出,value需要根据常量获取，详情见文档</li></ul><h3 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h3><p>UI交互式创建</p><table><tr><td><img src="/images/Nuke学习笔记2_节点与Knob/编辑控件.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/Nuke学习笔记2_节点与Knob/编辑控件.png" class="lozad post-image"></td><td><img src="/images/Nuke学习笔记2_节点与Knob/创建控件.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/Nuke学习笔记2_节点与Knob/创建控件.png" class="lozad post-image"></td></tr></table><p>代码创建<br>可使用NoOp节点进行自定义<br>node &#x3D; nuke.toNode(“Read”)</p><ul><li>添加控件 node.addKnob(控件对象)</li><li>移除控件 node.removeKnob(控件对象)</li><li>pythonScript中获取当前节点 nuke.thisNode()</li></ul><h3 id="Gizmo操作"><a href="#Gizmo操作" class="headerlink" title="Gizmo操作"></a>Gizmo操作</h3><p>将具有特定功能的节点组打包成一个节点，可用于别的nuke工程</p><ul><li>查询节点全路径 nuke.thisNode().fullName()</li><li>查询组内的节点 <ul><li>nuke.node(“组名”).node(“内部节点名”)[“knob名”].value()</li><li>nuke.node(“组名.组内节点名”)[“knob名”].value()</li></ul></li><li>在组织间进行代码操作<ul><li>node.begin() 代码开始</li><li>node.end() 代码结束</li></ul></li><li>转换正确导入的Gizmo为Group nuke.toNode(“Group”).makeGroup()</li></ul><h4 id="导入-导出gizmo"><a href="#导入-导出gizmo" class="headerlink" title="导入\导出gizmo"></a>导入\导出gizmo</h4><p>在组节点或者Gizmo节点下面，点击Node &gt; Export gizmo\Copr as Group<br>不能直接import Gizmo 节点使用，这样导入的节点是不完整的，只能使用nuke标准环境加载的方式进行应用。或将gizmo文件以文本的方式打开，将其中的Gizmo 替换为Group,这样也可以正确导入节点组。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Nuke学习笔记</summary>
    
    
    
    <category term="Nuke" scheme="http://mirrorcg.github.io/categories/Nuke/"/>
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/categories/Nuke/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Nuke学习笔记1_环境与命令行</title>
    <link href="http://mirrorcg.github.io/posts/20220730a1.html"/>
    <id>http://mirrorcg.github.io/posts/20220730a1.html</id>
    <published>2022-07-30T13:47:04.000Z</published>
    <updated>2022-07-31T07:25:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Nuke学习笔记 <span id="more"></span></p><h4 id="Nuke-脚本编辑窗口相关快捷键和操作"><a href="#Nuke-脚本编辑窗口相关快捷键和操作" class="headerlink" title="Nuke 脚本编辑窗口相关快捷键和操作"></a>Nuke 脚本编辑窗口相关快捷键和操作</h4><p>tab键   自动代码补全    输入部分脚本后，可获取相关的方法</p><p style="text-indent:2em">Edit > Preferences > ScriptEditor > echo python commands to output window 将输出常用操作的 Nuke Python API 代码显示在代码执行结果显示区。</p><p><img src="/images/Nuke%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/%E8%BE%93%E5%87%BA%E6%93%8D%E4%BD%9CPython%E4%BB%A3%E7%A0%81%E5%88%B0%E8%84%9A%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8.png" alt="输出操作Python代码到脚本编辑器 png" srcset="/images/home/Myhead.jpg" data-src="/images/Nuke%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/%E8%BE%93%E5%87%BA%E6%93%8D%E4%BD%9CPython%E4%BB%A3%E7%A0%81%E5%88%B0%E8%84%9A%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8.png" class="lozad post-image"> </p><h4 id="搭建-Pycharm-IDE-开发环境"><a href="#搭建-Pycharm-IDE-开发环境" class="headerlink" title="搭建 Pycharm IDE 开发环境"></a>搭建 Pycharm IDE 开发环境</h4><p style="text-indent:2em">在 Pycharm 中新建一个项目，用于开发Nuke插件,必须使用Nuke本身的Python编译器 "C:\Program Files\Nuke版本\python.exe"，该python编译器拥有完整的Nuke开发环境。</p><p style="text-indent:2em">关于 nukescripts 模块的使用，需要将“C:\Program Files\Nuke版本号\plugins”加入搜索路径</p><p style="text-indent:2em">关于 Pyside2 模块的使用，需要将“C:\Program Files\Nuke版本号\pythonextensions\site-packages”加入搜索路径</p><p style="text-indent:2em">配置好上面的环境后执行代码会发现报错：缺少一个“_nuke” 模块。这个模块在这里 "C:\Program Files\Nuke12.2v2\lib\site-packages\nuke.pyd" 中，由于这个文件和上面的 nukescripts 模块同级目录的nuke模块重名，导致不能加载这个nuke.pyd，因此会报这个错，如何解决呢？</p><ul><li>方法一.从搜索路径中去掉 “C:\Program Files\Nuke版本号\plugins”，但nukescripts模块的会缺少代码补全（加载完nuke.pyd后，会自动加载nuke和nukescripts模块，因此在执行代码时不会报这两个模块的错）.</li><li>方法二.在pycharm中将编辑nuke代码的Python解释器和运行nuke代码的python解释器分开，在编写的nuke代码的时候，将项目中python interpreter中设置的python解释器设置为普通的python解释器，可以在其搜索路径中加入我们想要的搜索路径，然后在运行nuke代码的时候，在Run&#x2F;Debug configuration中设置的python解释器设置为带有nuke环境的python解释器即可。</li></ul><p>  <img src="/images/Nuke%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/%E5%88%87%E6%8D%A2%E6%89%A7%E8%A1%8C%E6%97%B6%E7%9A%84Python%E8%A7%A3%E9%87%8A%E5%99%A8.png" alt="切换执行时的Python解释器 png" srcset="/images/home/Myhead.jpg" data-src="/images/Nuke%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/%E5%88%87%E6%8D%A2%E6%89%A7%E8%A1%8C%E6%97%B6%E7%9A%84Python%E8%A7%A3%E9%87%8A%E5%99%A8.png" class="lozad post-image"> </p><p style="text-indent:2em">此环境可能无法正常运行Pyside2相关的代码，需要在nuke中执行(详情见下一节)。</p><p><img src="/images/Nuke%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/Pycharm%E4%B8%AD%E4%BD%BF%E7%94%A8Pyside2%E6%8A%A5%E9%94%99.png" alt="Pycharm中使用Pyside2报错 png" srcset="/images/home/Myhead.jpg" data-src="/images/Nuke%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/Pycharm%E4%B8%AD%E4%BD%BF%E7%94%A8Pyside2%E6%8A%A5%E9%94%99.png" class="lozad post-image">  </p><h4 id="Nuke-命令行模式"><a href="#Nuke-命令行模式" class="headerlink" title="Nuke 命令行模式"></a>Nuke 命令行模式</h4><pre class="language-dos" data-language="dos"><code class="language-dos">&quot;C:\Program Files\Nuke12.2v2\python.exe&quot; &quot;D:\test.py&quot;</code></pre><p>运行脚本需使用Nuke的Python解释器，若后台调用脚本，可使用subprocess方法切换至Nuke本身的Python解释器。</p><p>若要使用 Pyside2 模块，需要在通过nuke主程序 nuke.exe 使用参数 -t 就可以运行Pyside2模块。</p><pre class="language-dos" data-language="dos"><code class="language-dos">&quot;C:\Program Files\Nuke12.2v2\nuke.exe&quot; -t &quot;D:\test.py&quot;</code></pre><p>但 -t 参数不能获取到 QApplication 类，只能获取到 QCoreApplication 类（QApplication是QCoreApplication的子类），所以要通过 --tg 参数来获取 Pyside2 模块创建窗口所需要的 QApplication 类。</p><pre class="language-dos" data-language="dos"><code class="language-dos">&quot;C:\Program Files\Nuke12.2v2\nuke.exe&quot; --tg &quot;D:\test.py&quot;</code></pre><p>nuke命令行语法：</p><p style="text-indent:4em">nuke.exe <\option> [<\argv>] <\script> [<\range>]</p>使用不同类别的主程序常用参数:<ul><li>--nukex</li><li>--studio</li><li>--nc</li><li>--nukeassist</li></ul><p>可以在Windows环境下使用doskey创建快捷键(只在当前窗口有效)，可以使用PATH环境变量，并写在一个bat脚本中：</p><pre class="language-dos" data-language="dos"><code class="language-dos">doskey nukex &#x3D; &quot;C:\Program Files\Nuke12.2v2\nuke.exe&quot; --nukex $*</code></pre><p>效果等于：<br>“C:\Program Files\Nuke12.2v2\nuke.exe” -- nukex &lt;\option&gt; [&lt;\argv&gt;] &lt;\script&gt; [&lt;\range&gt;] &#x3D; nukex &lt;\option&gt; [&lt;\argv&gt;] &lt;\script&gt; [&lt;\range&gt;]</p><p>一些常用的参数：</p><ul><li>-t 适用于纯命令行脚本</li><li>–tg 会产生一个 QApplication 实例，用于执行 Pyside2 的Gui相关脚本</li><li>-x &lt;\scriptname&gt; 渲染名为 \scriptname 的nuke工程中所有激活的write节点</li><li>-X&lt;\nodename&gt; 仅渲染指定名的\nodename的write节点</li><li>-F 指定帧范围</li><li>–cont 出错后继续渲染</li><li>–sro 按顺序依次渲染节点</li><li>-f 以全尺（full resolution）的方式打开nuk工程</li><li>-p 和-f相对，以 proxy 的方式打开nuke工程</li><li>-v 打开指定的图像文件，如果是视频，还需要跟上帧范围（文件路径使用正斜杠，不能使用反斜杠）</li><li>–pause 打开nuke工程时暂停 Viewer 初始化</li><li>-P 显示每个节点的资源占用情况</li><li>-Pf&lt;\filename&gt; 将每个节点的资源占用情况写入名为 \filename 的xml文件中</li><li>–multigpu 启用多gpu支持</li><li>–gpulist 列出当前系统可用的GPU及其索引号</li><li>–gpu ARG 使用由索引号ARG指定的GPU,在终端模式下启动GPU加速</li><li>–safe 安全模式，启动nuke不加载 .nuke、NUKE_PATH及OFX插件</li><li>-m # 指定线程数</li><li>-n 关闭节点postage stamps的预览显示</li><li>-q 关闭终端输出</li><li>-i 使用nuke_i授权，可与 -x 和 -t 连用，写成 -ti 或 -xi,默认情况下使用nuke_r授权，但有些操作需要使用nuke_i授权。</li><li>–remap&lt;\pathPair&gt; 仅能在命令行模式下使用，在当前会话中设置路径映射，要求参数为一对或多对路径拼成的字符串，用逗号分隔</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Nuke学习笔记</summary>
    
    
    
    <category term="Nuke" scheme="http://mirrorcg.github.io/categories/Nuke/"/>
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/categories/Nuke/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Xgen毛发</title>
    <link href="http://mirrorcg.github.io/posts/20220729a1.html"/>
    <id>http://mirrorcg.github.io/posts/20220729a1.html</id>
    <published>2022-07-29T15:16:15.000Z</published>
    <updated>2022-08-24T14:36:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文记录了一些Maya中Xgen毛发渲染的相关的问题：<span id="more"></span></p><ol><li><p>Xgen 角色ABC和毛发ABC的运动模糊不匹配的问题（小概率事件）：</p><p style="text-indent:2em">原因是生长面缓存只有整数帧采样并且在渲染运动模糊时，Xgen没有计算生长面的插值,或者由于前后帧的运动差异过大，Xgen计算出错误的生长面插值，导致毛发生长面的缓存和角色缓存的插值不匹配，生长面缓存和角色缓存在小数帧位置不同，就会导致运动模糊不同。也可以通过实际文件观测到，在运动模糊有问题的小数帧，毛发不加载缓存时，其毛发引导线跟随动画缓存，加载了毛发缓存后，毛发缓存曲线和动画缓存的位置一致，而毛发引导线却和缓存曲线不在相同的位置，毛发引导线和动画缓存脱离，但是毛发引导线的形态和毛发缓存一致，说明毛发引导线只是从毛发缓存继承了形态，并不继承其位置。而毛发引导线的位置是从毛发生长面继承的，此时毛发引导线的位置和动画缓存不一致，那么小数帧时生长面的缓存和动画缓存位置不一致，因此，毛发生长面缓存在计算小数帧时有问题。解决此类问题，最好为动画缓存、曲线缓存、生长面缓存都添加缓存的小数帧采样插值。</p></li><li><p>前台批渲染带渲染运动模糊时，代码批量刷新生长面时报错‘not match object “XGEN_RENDER_:XXXX”’：</p><p style="text-indent:2em">Xgen毛发在渲染运动模糊后，会生成可通过xgen.palettes()获取，但是无法使用cmds.sl("")列出，也无法删除的临时生长面，该生长面以“XG_RENDR_:”为前缀，若要在渲染运动模糊后批量处理生长面，需要跳过它，不会有任何影响。该临时生长面不会记录到maya文件中，但是会存在当前软件中，哪怕你清除场景，并重开另一个场景，也可以查询到它，处理时需直接跳过，对渲染无影响。</p></li><li><p>abc流程中，对角色缓存位置进行修改（场景移回原点）过的灯光文件，其xGen毛发可能会炸毛，可能原因是引用文件记录了一些错误的操作，这部分操作导致xGen文件状态不对，需要删除.Xgen文件，重新引用毛发文件，或者先删除.Xgen文件、卸载引用文件、清除其操作历史，再加载引用文件。</p></li></ol><h4 id="Xgen-毛发创建笔记"><a href="#Xgen-毛发创建笔记" class="headerlink" title="Xgen 毛发创建笔记"></a>Xgen 毛发创建笔记</h4><h4 id="一些Xgen文件测试记录"><a href="#一些Xgen文件测试记录" class="headerlink" title="一些Xgen文件测试记录"></a>一些Xgen文件测试记录</h4><ol><li><p>使用不同名称、完全相同的两个集合体作为Xgen描述的生长面，其基本体随机种子数会有一些差异，随机种子数是根据物体的生长面名称进行hash计算得出的结果，若替换生长面对应的几何体名称，随机种子数会发生细微变化，从而导致效果会有细微差别。</p></li><li><p>xgen文件中只记录几何体的短名，不记录长名(可以手动修改的方式使用maya规范的长名，)，测试结果是只识别几何体短名称，不区分拓扑结构和形状以及uv，只使用.xgen文件中记录的的faceid面数，但拓扑结构不同结果肯定不一样，几何体名和生长面前缀应保持一致。</p></li><li><p>绘制的iff贴图在保存文件后才会写入工程目录的文件夹，描述下有几个生长面就保存几张贴图(从新的几何体添加新的生长面，需要重新绘制贴图，保存后也会对应新增一张贴图)，根据绘制贴图时的生长面_集合_描述名称，xgen中指定的贴图名称命名为：polySurfaceShape1_grass_col_grass_decmask_generator_grass)。</p></li><li><p>生长面跟随几何体放大缩小，但是毛发粗细不变(可写入表达式，待测试)。</p></li><li><p>确定了几何体、绑定几何体并生成生长面之后，不可以修改几何体的名称，指向文件(ptx，xuv等文件)记录的是以几何体命名的贴图名称，更改几何体命名称后，链接断开，指向文件失效。</p></li><li><p>使用相同几何体生成的不同描述，其生长面的名称为“几何体名称_描述名称”，不会重名</p></li><li><p>单个XGen文件的生长面、几何体可以改名;改完命名后直接更改其Xgen文件的几何体名称，另存文件即可;</p></li><li><p>使用几个几何体生成描述，集合下就拥有几个生长面(不建议使用多个几何体映射一个描述，最好先合并成一个几何体，方便管理)</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文记录了一些Maya中Xgen毛发渲染的相关的问题：</summary>
    
    
    
    <category term="Maya" scheme="http://mirrorcg.github.io/categories/Maya/"/>
    
    <category term="杂项" scheme="http://mirrorcg.github.io/categories/Maya/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="排错记录" scheme="http://mirrorcg.github.io/tags/%E6%8E%92%E9%94%99%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Xgen" scheme="http://mirrorcg.github.io/tags/Xgen/"/>
    
  </entry>
  
  <entry>
    <title>Deadline中调试编写的事件</title>
    <link href="http://mirrorcg.github.io/posts/20220721a1.html"/>
    <id>http://mirrorcg.github.io/posts/20220721a1.html</id>
    <published>2022-07-21T15:55:44.000Z</published>
    <updated>2022-08-21T17:09:43.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h4><p style="text-indent:2em">Deadline 事件依赖于其软件框架，不能进行实时调试，但是可以通过 Console 窗口快速获取获取事件反馈信息。</p><span id="more"></span><p style="text-indent:2em">若想快速查看事件处理的过程，获取结果，首先通过Panels > Console 开启 Console 窗口。</p><p><img src="/images/Deadline%E4%B8%AD%E8%B0%83%E8%AF%95%E7%BC%96%E5%86%99%E7%9A%84%E4%BA%8B%E4%BB%B6/Console.jpg" alt="Console图片" srcset="/images/home/Myhead.jpg" data-src="/images/Deadline%E4%B8%AD%E8%B0%83%E8%AF%95%E7%BC%96%E5%86%99%E7%9A%84%E4%BA%8B%E4%BB%B6/Console.jpg" class="lozad post-image"></p><p style="text-indent:2em">对于事件编写，除了要先配置正确的事件文件以外，还要在代码中加入打印（可通过 DeadlineEventListener 类的 self.LogInfo 或者 print 等方法将调试信息写入代码中，或通过ClientUtils.LogText(str)方法将信息写入 Deadline 的日志文件中），由于 Deadline 会每隔一段时间才会扫描储存库，扫描的默认值一般为5分钟，当扫描过程中发现事件脚本有新的修改时，才会将修改的事件脚本重新构建到任务中，所以，为了让 Deadline 后台及时更新并构建我们修改的事件脚本，我们需要通过Tools > Synchronize Monitor Script and Plugins 功能手动更新事件脚本。</p><p><img src="/images/Deadline%E4%B8%AD%E8%B0%83%E8%AF%95%E7%BC%96%E5%86%99%E7%9A%84%E4%BA%8B%E4%BB%B6/%E5%90%8C%E6%AD%A5%E8%84%9A%E6%9C%AC.jpg" alt="同步脚本" srcset="/images/home/Myhead.jpg" data-src="/images/Deadline%E4%B8%AD%E8%B0%83%E8%AF%95%E7%BC%96%E5%86%99%E7%9A%84%E4%BA%8B%E4%BB%B6/%E5%90%8C%E6%AD%A5%E8%84%9A%E6%9C%AC.jpg" class="lozad post-image"></p><p style="text-indent:2em">此时，Console 窗口会提示：***事件脚本有修改，将重新构建事件脚本的提示语。如果你的脚本有语法错误，Console 窗口还会给你打印一条简短的报错信息。然后 Requeue 目标任务，再将任务切换到我们所要的任务状态（先更新脚本，再操作任务，不能先操作任务再更新脚本，否则，事件不会被更新到任务状态中），Deadline 便会通过当前执行任务的机器执行事件脚本，并在Console 窗口显示反馈信息。通过此方法，可以快速对我们的事件脚本进行编写和调试。</p><h4 id="关于事件脚本中使用中文"><a href="#关于事件脚本中使用中文" class="headerlink" title="关于事件脚本中使用中文"></a>关于事件脚本中使用中文</h4><p style="text-indent:2em">有时会在日志中打印中文信息，则我们需要将中文字符串编码为"gbk"（windows系统）的人类可读懂的代码。需要注意的是：</p><ul><li>需了解事件脚本在编写时，文本编辑器使用的编码格式是否为utf8，以及操作系统文件在编译中文时，使用的编码格式（Windows下控制台中的编码使用的是gbk）。因此，我们会在 python 脚本文件头部中加入 “# -<em>- coding:utf-8 -</em>-” 显式编码注释，文本编辑器在存储脚本时会做相应的修改。</li><li>中文字符很容易出错，导致插件执行被打断却没有任何反馈信息的假成功状态，这是由于当Deadline后台检测脚本有字符转换的错误时，它可不执行事件脚本。</li><li>测试 deadline 10.0.6.3 的 Python2 环境打印中文：中文字符串最后一个字符串不能为中文标点符号，否则会报语法错误（控制台在编码中文时，会将最后一个标点符号编码错误为一个‘？’号）。</li></ul>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding:utf-8 -*-def __main__():    print(u&quot;测试中文打印&quot;.encode(&quot;gbk&quot;))    print(unicode(&quot;测试中文打印&quot;，&quot;utf-8&quot;).encode(&quot;gbk&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试在 deadline 10.1 的环境打印中文则很简单，和普通代码一样直接打印,字符串末尾可以有中文标点符号且不用进行字符编码，否则会报错：  <pre class="line-numbers language-python" data-language="python"><code class="language-python"># -*- coding:utf-8 -*-def __main__():    print(&quot;测试中文打印。&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><a href="https://docs.thinkboxsoftware.com/products/deadline/10.1/2_Scripting%20Reference/index.html" title="" target="">1.官方文档中事件脚本文档</a></br><a href="http://www.mirrorcg.com/posts/20220306a1.html" title="" target="">2.往期相关文章：Deadline中的事件示例</a></br><a href="http://www.mirrorcg.com/posts/20220822a1.html" title="" target="">3.相关文章：Python代码中的字符编码</a>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;详情&quot;&gt;&lt;a href=&quot;#详情&quot; class=&quot;headerlink&quot; title=&quot;详情&quot;&gt;&lt;/a&gt;详情&lt;/h4&gt;&lt;p style=&quot;text-indent:2em&quot;&gt;Deadline 事件依赖于其软件框架，不能进行实时调试，但是可以通过 Console 窗口快速获取获取事件反馈信息。&lt;/p&gt;</summary>
    
    
    
    <category term="Deadline" scheme="http://mirrorcg.github.io/categories/Deadline/"/>
    
    <category term="插件" scheme="http://mirrorcg.github.io/categories/Deadline/%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="插件" scheme="http://mirrorcg.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
    <category term="API" scheme="http://mirrorcg.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>CG流程中的ACES概念解释</title>
    <link href="http://mirrorcg.github.io/posts/20220706a1.html"/>
    <id>http://mirrorcg.github.io/posts/20220706a1.html</id>
    <published>2022-07-06T15:18:49.000Z</published>
    <updated>2022-07-06T15:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="ACES-一些散记"><a href="#ACES-一些散记" class="headerlink" title="ACES 一些散记"></a>ACES 一些散记</h4><p>  经过IDT转换的图片只能保证其在AECS色域中渲染的颜色信息和ACES相比较是正确的，不能保证渲染的效果和SRGB的原效果一致。<br>  线性图和非线性图的区别在于是否经过Gamma1.8到gamma2.2的曲线矫正,矫正的目的是为了迎合人眼观察的同时，方便使用8位图存储色彩信息。浮点图没有色彩存储空间不够的情况，因此浮点图一般是线性图。<br>  ACES推荐使用EXR、TIF、HDR等浮点图存储信息，最少使用16位(exr是HDR标准的图片格式，拥有多通道存储的能力，使用1位、5位、10位分段分别存储不同的信息)。<br>  CG流程中ODT用于ACES到SRGB色域的转换，通常是使用‘output_srgb’类型。<br>  Maya中输出的16位ACES图和32位图色彩信息有些许肉眼可见的不同。请自行测试。</p><h4 id="一些文章参考"><a href="#一些文章参考" class="headerlink" title="一些文章参考"></a>一些文章参考</h4><br><p style="text-indent:2em">国内网页：</p><a href="https://www.bilibili.com/video/BV1jM4y1N7yT?spm_id_from=444.41.top_right_bar_window_default_collection.content.click&vd_source=171f08b062938f0a4038de13d7e2c9a2" title="" target="">ACES编码及色彩原理（CG）</a><br><a href="https://www.bilibili.com/video/BV1Fg411M7H6?p=1&share_medium=android&share_plat=android&share_session_id=665fc73f-fd8b-484a-9cb2-7bf453d6035e&share_source=WEIXIN&share_tag=s_i&timestamp=1656295742&unique_k=SDBzFDb&vd_source=171f08b062938f0a4038de13d7e2c9a2" title="" target="">ACES通俗讲解</a><br><a href="https://www.bilibili.com/read/cv9842761" title="" target="">色彩原理</a><br><a href="https://www.bilibili.com/video/BV1dV411i7M1?spm_id_from=333.788.top_right_bar_window_default_collection.content.click&vd_source=171f08b062938f0a4038de13d7e2c9a2" title="" target="">Nuke色彩空间（Gamma）的转换和原理</a><br><a href="https://www.shangyexinzhi.com/article/1960438.html" title="" target="">参考文章1</a><br><a href="https://www.toadstorm.com/blog/?p=694" title="" target="">参考文章2</a><br><a href="https://chrisbrejon.com/cg-cinematography/chapter-1-5-academy-color-encoding-system-aces/" title="" target="">参考文章3</a><br><br><p style="text-indent:2em">以下需科学上网：</p><a href="https://www.youtube.com/watch?v=W9Z1Std_1Kc" title="" target="">ACES Workflow in Maya with Redshift and Arnold</a>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Doc" scheme="http://mirrorcg.github.io/categories/Doc/"/>
    
    <category term="学习笔记" scheme="http://mirrorcg.github.io/categories/Doc/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="灯光合成" scheme="http://mirrorcg.github.io/tags/%E7%81%AF%E5%85%89%E5%90%88%E6%88%90/"/>
    
    <category term="ACES" scheme="http://mirrorcg.github.io/tags/ACES/"/>
    
  </entry>
  
</feed>
