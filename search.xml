<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些好用的网站</title>
      <link href="/posts/20220501a2.html"/>
      <url>/posts/20220501a2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">本文推荐一些多快好省的网站、技术大佬的博客网站、专业网站。<span id="more"></span></p><ol><li><p>图标下载</p><ul><li>Icon图标下载：<a href="https://icon-icons.com/zh/">https://icon-icons.com/zh/</a></li><li>阿里巴巴矢量图库：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></li><li>图片格式转换： <a href="https://www.butterpig.top/ico/">https://www.butterpig.top/ico/</a></li></ul></li><li><p>影视行业软件下载网站：</p><ul><li>画忆大佬的软件下载网站(无毒无公害)：<a href="http://www.iiicg.com/">www.iiicg.com</a></li></ul></li><li><p>技术大佬们的博客网页</p><ul><li>TD手册：<a href="https://cg-td-course.readthedocs.io/zh_CN/latest/index.html">https://cg-td-course.readthedocs.io/zh_CN/latest/index.html</a></li><li>凌云大佬技术博客分享：<a href="https://lingyunfx.com/">https://lingyunfx.com/</a></li><li>汝小右大佬博客：<a href="https://ruben.blog.csdn.net/?type=blog">https://ruben.blog.csdn.net/?type=blog</a></li></ul></li><li><p>行业官网</p><ul><li>Maya2022 用户文档：<a href="https://help.autodesk.com/view/MAYAUL/2022/CHS/">https://help.autodesk.com/view/MAYAUL/2022/CHS/</a></li><li>Yeti 用户文档：<a href="https://support.peregrinelabs.com/support/solutions/66000172201">https://support.peregrinelabs.com/support/solutions/66000172201</a></li><li>Arnold 用户文档：<a href="https://www.arnoldrenderer.com/news/">https://www.arnoldrenderer.com/news/</a></li><li>Nuke 用户文档：<a href="https://learn.foundry.com/nuke/13.1/content/learn_nuke.html">https://learn.foundry.com/nuke/13.1/content/learn_nuke.html</a></li><li>Katana 用户文档：<a href="https://learn.foundry.com/katana/5.0/Content/learn_katana.html">https://learn.foundry.com/katana/5.0/Content/learn_katana.html</a></li><li>Deadline 用户文档：<a href="https://docs.thinkboxsoftware.com/">https://docs.thinkboxsoftware.com/</a></li><li>Pyside2 用户文档：<a href="https://wiki.qt.io/Main">https://wiki.qt.io/Main</a></li><li>ShotGrid 用户文档：<a href="https://help.autodesk.com/view/SGSUB/CHS/">https://help.autodesk.com/view/SGSUB/CHS/</a></li><li>AutoIt3 用户文档：<a href="https://www.autoitscript.com/autoit3/docs/">https://www.autoitscript.com/autoit3/docs/</a></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT中的系统托盘图标和系统消息推送</title>
      <link href="/posts/20220501a1.html"/>
      <url>/posts/20220501a1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">本文记录: 使用 PySide2 编写工具界面时，需要为工具创建系统托盘图标以及推送消息的方法。<span id="more"></span>以方便用户对工具进行操作。</p><p style="text-indent:2em">通过 PySide2 创建系统托盘，需要使用 PySide2.QtWidgets.QSystemTrayIcon 这个类。这个类中需要使用了以下常用方法，就可以创建最基本的系统托盘图标：</p><ul><li>QSystemTrayIcon   创建一个系统托盘对象</li><li>QSystemTrayIcon.setContextMenu    添加右键菜单(QMenu)</li><li>QSystemTrayIcon.showMessage   在右下角弹出要提示消息</li><li>QObject.connect 连接信号和槽</li></ul><p>使用上面的方法，可以完成：</p><ol><li>在系统托盘中创建一个程序图标。</li></ol><p><img src="/images/QT%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98%E5%9B%BE%E6%A0%87%E5%92%8C%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E5%88%9B%E5%BB%BA%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98%E5%9B%BE%E6%A0%87.png" alt="创建的系统托盘图标.png" srcset="/images/home/Myhead.jpg" data-src="/images/QT%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98%E5%9B%BE%E6%A0%87%E5%92%8C%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E5%88%9B%E5%BB%BA%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98%E5%9B%BE%E6%A0%87.png" class="lozad post-image">  </p><ol start="2"><li>在程序创建完成托盘图标后，推送一条提示程序已经启动的系统消息。</li></ol><p><img src="/images/QT%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98%E5%9B%BE%E6%A0%87%E5%92%8C%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E6%8E%A8%E9%80%81%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF.png" alt="推送的系统消息.png" srcset="/images/home/Myhead.jpg" data-src="/images/QT%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98%E5%9B%BE%E6%A0%87%E5%92%8C%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E6%8E%A8%E9%80%81%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF.png" class="lozad post-image">  </p><ol start="3"><li>鼠标点击图标时的左右键功能。</li></ol><p><img src="/images/QT%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98%E5%9B%BE%E6%A0%87%E5%92%8C%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E7%82%B9%E5%87%BB%E5%9B%BE%E6%A0%87%E5%B7%A6%E5%8F%B3%E9%94%AE%E5%8A%9F%E8%83%BD.png" alt="点击图标左右键功能.png" srcset="/images/home/Myhead.jpg" data-src="/images/QT%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98%E5%9B%BE%E6%A0%87%E5%92%8C%E7%B3%BB%E7%BB%9F%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/%E7%82%B9%E5%87%BB%E5%9B%BE%E6%A0%87%E5%B7%A6%E5%8F%B3%E9%94%AE%E5%8A%9F%E8%83%BD.png" class="lozad post-image">  </p><p>代码示例如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QAction<span class="token punctuation">,</span> QMenu<span class="token punctuation">,</span> QSystemTrayIcon<span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> SIGNAL<span class="token punctuation">,</span> QObject<span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QIcon<span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"restart"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span>app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>exit <span class="token operator">=</span> QAction<span class="token punctuation">(</span>QIcon<span class="token punctuation">(</span><span class="token string">"E:/Python_study/startLauncher/Icon/Menu.ico"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Exit"</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>QObject<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>exit<span class="token punctuation">,</span> SIGNAL<span class="token punctuation">(</span><span class="token string">"triggered()"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> close<span class="token punctuation">)</span>res <span class="token operator">=</span> QAction<span class="token punctuation">(</span>QIcon<span class="token punctuation">(</span><span class="token string">"E:/Python_study/startLauncher/Icon/Menu1.ico"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Restart"</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>QObject<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>res<span class="token punctuation">,</span> SIGNAL<span class="token punctuation">(</span><span class="token string">"triggered()"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> restart<span class="token punctuation">)</span>menu <span class="token operator">=</span> QMenu<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建菜单，添加菜单选项</span>menu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>exit<span class="token punctuation">)</span>menu<span class="token punctuation">.</span>addAction<span class="token punctuation">(</span>res<span class="token punctuation">)</span>trayIcon <span class="token operator">=</span> QSystemTrayIcon<span class="token punctuation">(</span>QIcon<span class="token punctuation">(</span><span class="token string">"E:/Python_study/startLauncher/Icon/Menu4.ico"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建系统托盘</span>trayIcon<span class="token punctuation">.</span>setContextMenu<span class="token punctuation">(</span>menu<span class="token punctuation">)</span>QObject<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>trayIcon<span class="token punctuation">,</span> SIGNAL<span class="token punctuation">(</span><span class="token string">"activated(QSystemTrayIcon::ActivationReason)"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> show<span class="token punctuation">)</span>trayIcon<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>trayIcon<span class="token punctuation">.</span>setToolTip<span class="token punctuation">(</span><span class="token string">"启动器"</span><span class="token punctuation">)</span>trayIcon<span class="token punctuation">.</span>showMessage<span class="token punctuation">(</span><span class="token string">"启动器已经启动!"</span><span class="token punctuation">,</span> <span class="token string">"左击显示窗口\n右击显示菜单"</span><span class="token punctuation">,</span> QIcon<span class="token punctuation">(</span><span class="token string">"E:/Python_study/startLauncher/Icon/Menu_Note1.ico"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行代码后，会在电脑桌面系统托盘创建一个本程序的图标，同时会推送一条启动信息，该信息会自动收回。<br>上面的代码没有判断点的是左还是右键，所以只要鼠标点击图标都会先打印一遍 “show”,请自行判断。</p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT事件 </tag>
            
            <tag> 信号&amp;槽 </tag>
            
            <tag> 系统托盘图标和消息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USD框架的搭建</title>
      <link href="/posts/20220421a1.html"/>
      <url>/posts/20220421a1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天来介绍一下 windows 环境下 USD 的独立安装过程。<span id="more"></span><br>首先，我们需要了解几个网站：</p><p style="text-indent:2em">USD 的帮助文档 ：https://graphics.pixar.com/usd/release/index.html</p><p style="text-indent:2em">USD 的Github仓库 ：https://github.com/PixarAnimationStudios/USD</p><h4 id="安装准备："><a href="#安装准备：" class="headerlink" title="安装准备："></a>安装准备：</h4><p>需要准备：Python2、Cmake、NASM、Microsoft Visual Studio2017、Microsoft Visual Studio Code</p><p style="text-indent:2em">1. 确认环境中有Python2。在 windows 上安装 USD 需要我们的环境中有 Python， 由于 USD 目前还不支持Python3 ，因此我使用的是 Python2.7.16 ,没有Python2 的小伙伴可以从<a href="https://www.python.org/downloads/release/python-2710/" title="" target="">官网下载</a>，下载安装好后，需要调整一下环境变量的顺序，将Python2的相关环境变量提升到Python3的前面，这样可以在后面安装的时候直接调用Python2的环境,就不会出现一些奇怪的问题导致安装失败，如下图。</p><p><img src="/images/USD%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/%E5%89%8D%E7%BD%AEpython2%E7%9A%84%E7%8E%AF%E5%A2%83.png" alt="前置python2的环境" srcset="/images/home/Myhead.jpg" data-src="/images/USD%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/%E5%89%8D%E7%BD%AEpython2%E7%9A%84%E7%8E%AF%E5%A2%83.png" class="lozad post-image"></p><p style="text-indent:2em">2. 安装CMAKE工具，如果电脑上没有CMAKE，可以<a href="https://cmake.org/download/" title="" target="">从这里下载</a>，往下翻，找到相应的平台和系统版本，下载到一个可安装的文件，使用默认安装就好。</p><p><img src="/images/USD%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/%E4%B8%8B%E8%BD%BDCMAKE.png" alt="下载CMAKE" srcset="/images/home/Myhead.jpg" data-src="/images/USD%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/%E4%B8%8B%E8%BD%BDCMAKE.png" class="lozad post-image"></p><p style="text-indent:2em">3. 安装NASM，如果电脑上也没有NASM，则可以<a href="https://www.nasm.us/pub/nasm/releasebuilds/?C=M;O=D" title="" target="">从这里下载</a>，打开链接后选择一个合适的版本，我使用的是2.15.05版本的NASM，双击文件夹，选择自己系统对应的文件夹，再次双击，可以看到一个安装程序，点击即可下载，没有特殊需求的话，尽量使用默认安装。</p><p><img src="/images/USD%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/%E4%B8%8B%E8%BD%BDNASM.png" alt="下载NASM" srcset="/images/home/Myhead.jpg" data-src="/images/USD%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/%E4%B8%8B%E8%BD%BDNASM.png" class="lozad post-image"></p><p style="text-indent:2em">4. 安装Microsoft Visual Studio，USD 暂时不支持较新的版本，本案例使用的是VS2017版本，可以<a href="https://my.visualstudio.com/Downloads?q=visual%20studio%202017&wt.mc_id=o~msft~vscom~older-downloads" title="" target="">从这里下载</a>，选择一个合适的版本，安装过程中选择使用C++的桌面开发。</p><p style="text-indent:2em">5. 安装Microsoft Visual Studio Code，如果没有VSCode，可以<a href="https://code.visualstudio.com/download" title="" target="">从这里下载</a>，选择一个合适的版本，下载后默认安装好，打开下载Python拓展插件，并将上面安装的Python2的执行程序路径填入对应位置，如下图所示。</p><table><tr><td><img src="/images/USD框架的搭建/下载VSCode.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/USD框架的搭建/下载VSCode.png" class="lozad post-image"></td><td><img src="/images/USD框架的搭建/安装Python插件.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/USD框架的搭建/安装Python插件.png" class="lozad post-image"></td></tr></table>接下来我们还需要为Python2安装一些功能模块：PySide、pyd、pyopengl、Jinja2，在cmd中依次执行下面的指令即可<p style="text-indent:2em">pip install PySide</p><p style="text-indent:2em">pip install pyd</p><p style="text-indent:2em">pip install pyopengl</p><p style="text-indent:2em">pip install Jinja2</p>注：这里如果出现“pip Fatal error in launcher: Unable to create process...”错误，可以通过python安装文件的修复功能来解决，点击repair。<h4 id="构建-USD"><a href="#构建-USD" class="headerlink" title="构建 USD"></a>构建 USD</h4><p style="text-indent:2em">先从USD 的Github仓库<a href="https://github.com/PixarAnimationStudios/USD" title="" target="">下载 USD 源码</a>到本地，打开“x86 Native Tools Command Prompt VS 2017”界面，这里不能使用x64,并且对于高版本的VS,不管是"X64" 还是 "x86" 均不能安装成功。输入 python "你的USD源码下载位置"\build_scripts\build_usd.py "C:\USD" ，其中"C:\USD"是你的安装位置（安装位置中似乎不能有空格，我尝试了几次将usd安装在带空格的"Program Files (x86)"中，都没有成功）。程序会自动为你安装zlib，boost，TBB，OpenSubdiv用来构建USD环境。这个过程只有简单的几条语句提示，没有进度条，并且可能会报错或者安装不成功（也许是下载速度的原因），多执行几次上面的构建指令就好了，我也是安装了三次才成功。成功后会提示你，需要将 "C:\USD\lib\python"添加进系统变量PYTHONPATH中，再在系统变量 PATH 中添加 "C:\USD\bin" 和 "C:\USD\lib"两个路径，如下图所示。<p><p><img src="/images/USD%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/%E6%9E%84%E5%BB%BA%E7%95%8C%E9%9D%A2.png" alt="构建界面" srcset="/images/home/Myhead.jpg" data-src="/images/USD%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/%E6%9E%84%E5%BB%BA%E7%95%8C%E9%9D%A2.png" class="lozad post-image"></p><p>至此USD环境就搭建好了。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>打开一个cmd窗口，cd 进入你的USD源代码目录,然后输入指令：“usdview .\extras\usd\tutorials\convertingLayerFormats\Sphere.usd”，出现下面的界面就表示成功了。</p><p><img src="/images/USD%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/USD%E7%95%8C%E9%9D%A2.png" alt="USD界面" srcset="/images/home/Myhead.jpg" data-src="/images/USD%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/USD%E7%95%8C%E9%9D%A2.png" class="lozad post-image"></p><p>接下来就可以愉快地<a href="https://graphics.pixar.com/usd/release/tut_usd_tutorials.html#" title="" target="">学习案例</a>了！！！</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ol><li><a href="https://zhuanlan.zhihu.com/p/437422802">https://zhuanlan.zhihu.com/p/437422802</a></li><li><a href="https://github.com/PixarAnimationStudios/USD/blob/release/README.md#getting-and-building-the-code">https://github.com/PixarAnimationStudios/USD/blob/release/README.md#getting-and-building-the-code</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> USD </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT中的异形窗口</title>
      <link href="/posts/20220326a2.html"/>
      <url>/posts/20220326a2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录一下 QT 中异形窗口的创建。<span id="more"></span></p><h4 id="主要标志"><a href="#主要标志" class="headerlink" title="主要标志"></a>主要标志</h4><p>在 QWidget 中，通过给窗口设置特定的标志，可以将窗口设置为不同的形状，比如让窗口无标题，或者直接让主窗口透明</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">setWindowFlags(Qt.FramelessWindowHint)      # 去掉标题栏setMask(QPixmap(img).mask())                # 设置图片透明的地方为穿透setAttribute(Qt.WA_TranslucentBackground)   # 设置窗口透明<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当为窗口设置了使用图片作为 Mask 遮罩后，Qt.FramelessWindowHint 标志会自动指定。</p><h4 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h4><h5 id="创建一个基本窗口"><a href="#创建一个基本窗口" class="headerlink" title="创建一个基本窗口"></a>创建一个基本窗口</h5><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># Author: Mirrorimport sysfrom PySide2.QtWidgets import QApplication, QWidgetfrom PySide2.QtCore import Qtfrom PySide2.QtGui import QPixmapclass MainWindow(QWidget):    def __init__(self,):        super().__init__()if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    app &#x3D; QApplication(sys.argv)    form &#x3D; MainWindow()  # 实例化窗口小部件    form.show()    sys.exit(app.exec_())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>窗口效果<br><img src="/images/Qt%E4%B8%AD%E7%9A%84%E5%BC%82%E5%BD%A2%E7%AA%97%E5%8F%A3/%E5%8E%9F%E7%AA%97%E5%8F%A3.png" alt="原窗口.png" srcset="/images/home/Myhead.jpg" data-src="/images/Qt%E4%B8%AD%E7%9A%84%E5%BC%82%E5%BD%A2%E7%AA%97%E5%8F%A3/%E5%8E%9F%E7%AA%97%E5%8F%A3.png" class="lozad post-image"></p><h5 id="设置窗口标志"><a href="#设置窗口标志" class="headerlink" title="设置窗口标志"></a>设置窗口标志</h5><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">self.setWindowFlags(Qt.FramelessWindowHint)  # 去掉标题<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>窗口效果<br>窗口会变成一块没有标题的白板<br><img src="/images/Qt%E4%B8%AD%E7%9A%84%E5%BC%82%E5%BD%A2%E7%AA%97%E5%8F%A3/%E6%97%A0%E6%A0%87%E9%A2%98%E7%AA%97%E5%8F%A3.png" alt="无标题窗口.png" srcset="/images/home/Myhead.jpg" data-src="/images/Qt%E4%B8%AD%E7%9A%84%E5%BC%82%E5%BD%A2%E7%AA%97%E5%8F%A3/%E6%97%A0%E6%A0%87%E9%A2%98%E7%AA%97%E5%8F%A3.png" class="lozad post-image"></p><h5 id="设置窗口Mask"><a href="#设置窗口Mask" class="headerlink" title="设置窗口Mask"></a>设置窗口Mask</h5><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">self.starticon &#x3D; QPixmap(r&quot;ImagePath&quot;)self.setMask(self.starticon.mask())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>窗口效果窗口会根据你使用的 Mask 图片进行裁剪<br><img src="/images/Qt%E4%B8%AD%E7%9A%84%E5%BC%82%E5%BD%A2%E7%AA%97%E5%8F%A3/%E8%AE%BE%E7%BD%AEMask%E7%9A%84%E7%AA%97%E5%8F%A3.png" alt="设置Mask的窗口.png" srcset="/images/home/Myhead.jpg" data-src="/images/Qt%E4%B8%AD%E7%9A%84%E5%BC%82%E5%BD%A2%E7%AA%97%E5%8F%A3/%E8%AE%BE%E7%BD%AEMask%E7%9A%84%E7%AA%97%E5%8F%A3.png" class="lozad post-image"></p><h4 id="窗口重写事件"><a href="#窗口重写事件" class="headerlink" title="窗口重写事件"></a>窗口重写事件</h4><p>由于窗口被设置为无标题窗口后，鼠标不能对窗口进行移动，因此，我们还需要将窗口的鼠标事件进行重写。<br>完整代码：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"># !&#x2F;user&#x2F;bin&#x2F;python37# -*- coding: utf-8 -*-# Author:Mirror# Time: 2022&#x2F;03&#x2F;26# &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;import sysfrom PySide2.QtWidgets import QApplication,QWidgetfrom PySide2.QtCore import Qtfrom PySide2.QtGui import QPixmap, QCursorclass MainWindow(QWidget):    def __init__(self,):        super().__init__()        self.setWindowFlags(Qt.FramelessWindowHint)  # 去掉标题（还有一些别的窗口类型选择，请自行查阅）        self.starticon &#x3D; QPixmap(r&quot;E:\Python_study\startLauncher\Icon\startBackgroundMask.svg&quot;)        self.setMask(self.starticon.mask())    # 鼠标按下    def mousePressEvent(self, event):        if event.button() &#x3D;&#x3D; Qt.LeftButton:            self.m_drag &#x3D; True  # 鼠标按下或抬起标志位            self.m_DragPosition &#x3D; event.globalPos() - self.pos()  # 当前单击点相对于窗口本身的坐标(只检测窗口中的点击)            self.setCursor(QCursor(Qt.SizeAllCursor))  # 设置光标形状 小手抓取        if event.button() &#x3D;&#x3D; Qt.RightButton:  # 按下右键 取消左键按下，结束鼠标移动时间            if self.m_drag &#x3D;&#x3D; True:                self.m_drag &#x3D; False    # 鼠标移动    def mouseMoveEvent(self, QMouseEvent):        if Qt.LeftButton and self.m_drag:            # 当左键移动窗体修改偏移值            self.move(QMouseEvent.globalPos() - self.m_DragPosition)    # 鼠标抬起    def mouseReleaseEvent(self, QMouseEvent):        self.m_drag &#x3D; False        self.setCursor(QCursor(Qt.ArrowCursor))if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    app &#x3D; QApplication(sys.argv)    form &#x3D; MainWindow()    form.show()    sys.exit(app.exec_())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的代码，我们就可以获得一个可以被鼠标移动的异形窗口啦。</p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT事件 </tag>
            
            <tag> 异形窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT中QToolButton的双击事件</title>
      <link href="/posts/20220326a1.html"/>
      <url>/posts/20220326a1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p style="text-indent:2em">写工具界面的时候，发现 QPushButton 按钮不能被图标完全覆盖，而选择使用 QToolButton 按钮，但是 QToolButton 按钮本身是没有双击事件的，我在写工具的时候又对这个双击事件很执着，就自己实现一下<span id="more"></span>，并为该结果做记录。</p><h4 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h4><p style="text-indent:2em">要实现 QToolButton 按钮的双击事件：需要新建一个继承于 QToolButton 的子类，该类继承 QToolButton 的 click 鼠标单击事件，添加 singleClicked 和 doubleClicked 两个信号用于发送我们想要的单/双击信号，并在子类中添加一个 Qtimer 作为判断依据：将 QTimer 设置为单次触发, 并为QTimer 设定一个较短的时间，在该时间内，click信号链接到事件判断函数，如果再次点击该按钮则判断为双击事件，同时将 QTimer 停止；反之 QTimer 超时，QTimer 发送超时信号到单击事件函数，也需要将Qtimer 停止。当实例化这个子类后，点击按钮，该 click 信号即在实例内部进行判断。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !/user/bin/python37</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Author:Mirror</span><span class="token comment"># Time: 2022/03/26</span><span class="token comment"># ================================</span><span class="token keyword">import</span> sys<span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QToolButton<span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt<span class="token punctuation">,</span> Signal<span class="token punctuation">,</span> QTimer<span class="token keyword">class</span> <span class="token class-name">DccButton</span><span class="token punctuation">(</span>QToolButton<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""定义ToolButton按钮双击事件"""</span>    doubleClicked <span class="token operator">=</span> Signal<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 双击信号</span>    singleClicked <span class="token operator">=</span> Signal<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 单击信号</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>DccButton<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setToolButtonStyle<span class="token punctuation">(</span>Qt<span class="token punctuation">.</span>ToolButtonTextUnderIcon<span class="token punctuation">)</span>  <span class="token comment"># 设置图标在字体之上</span>        self<span class="token punctuation">.</span>timer <span class="token operator">=</span> QTimer<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建触发器</span>        self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>setSingleShot<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 仅单次触发</span>        self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>setInterval<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment"># 触发间隔，用于判断是否为双击</span>        self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>timeout<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>singleClick<span class="token punctuation">)</span> <span class="token comment"># 超时信号连接至单击</span>        self<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>checkDoubleClick<span class="token punctuation">)</span> <span class="token comment"># 连接至成员函数判断是否为双击</span>    <span class="token keyword">def</span> <span class="token function">singleClick</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""            发送单击信号        """</span>        self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setDown<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>singleClicked<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"单击"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">checkDoubleClick</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""            判断是否为双击信号，否则信号超时        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>isDown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>setDown<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>isActive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>setDown<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>doubleClicked<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"双击"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    form <span class="token operator">=</span> DccButton<span class="token punctuation">(</span><span class="token punctuation">)</span>    form<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT事件 </tag>
            
            <tag> 信号&amp;槽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rez安装使用</title>
      <link href="/posts/20220314a1.html"/>
      <url>/posts/20220314a1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Rez 是一个跨平台程序包管理器，通过它可以给程序配置独立的环境<span id="more"></span>，每个独立环境中只是引用了这些包。所以它的环境配置是轻量级的，与其它程序包环境管理不同的是，所有的程序包都安装在一个中央统一的位置，尽管有几百个包，通常也只需要几秒就可以进行配置。将 Rez 作为工作室 DCC 软件启动器依赖项，是个不错的选择。下面将简单介绍 Windows 环境下，Rez 包管理器如何安装使用。</p><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><p>从 GitHub 上拉取 <a href="https://github.com/nerdvegas/rez" title="" target="">Rez 原项目的的相关仓库</a>，然后打开CMD<br>进入拉取仓库所在的目录中执行：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">python .&#x2F;install.py </code></pre><p>这将会把包安装在当前位置的 &#x2F;opt&#x2F;rez 目录下<br>也可以使用Pip进行安装：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">pip install rez</code></pre><p>但使用 pip 的安装方式并不能很好的用在生产环境中,使用 install 脚本安装是推荐的方法，它可以保证 Rez 拥有独立 python 于的环境独立运行。</p><h4 id="创建基本的-Rez-包"><a href="#创建基本的-Rez-包" class="headerlink" title="创建基本的 Rez 包"></a>创建基本的 Rez 包</h4><p>这里需要使用管理员权限去安装包，rez-bind 工具创建基于已安装在系统上的软件的 Rez 包：（–quickstart是以标准形式安装包）</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">rez-bind --quickstart</code></pre><p>你也可以分开安装</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">rez-bind platformrez-bind archrez-bind osrez-bind python</code></pre><p>安装好之后，会在 %userprofile%&#x2F;packages 目录下找到已经安装的 Rez 包</p><h4 id="验证安装结果"><a href="#验证安装结果" class="headerlink" title="验证安装结果"></a>验证安装结果</h4><p>为了验证是否安装成功，可以使用下面的命令：（其中 “which python”是你的python版本）</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">rez-env python-which python</code></pre><p>使用 exit 退出环境。</p><h4 id="构建第一个包"><a href="#构建第一个包" class="headerlink" title="构建第一个包"></a>构建第一个包</h4><p>.需要确认%userprofile%&#x2F;packages 存在且可写入<br>.需要确认cmake 工具安装且可用（注：官方文档中会使用这个工具在ios系统上安装下面的包，但我还未在Windows10系统上成功安装该包，似乎有些依赖包的冲突问题，但好像不影响使用，正在求证中。。。）<br>rez-build 工具用于构建包并在本地安装它们（%userprofile%&#x2F;packages下）。 完成后，您可以通过 rez-env 使用它们，就像任何其他软件包一样：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">cd example_packages&#x2F;hello_worldrez-build --install</code></pre><h4 id="测试构建的包"><a href="#测试构建的包" class="headerlink" title="测试构建的包"></a>测试构建的包</h4><p>使用rez-env命令来请求一个（或多个）你已经安装的软件包环境</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">rez-env hello_world</code></pre><p>提示符前的插入符号 (&gt;) 是一个视觉提示，告诉你现在位于 rez 配置的子 shell 中。 Rez 不会更新当前环境，而是配置一个子shell 并将你置于其中。<br>如果你已经在rez shell的配置环境中，并且忘记了当前可用的软件包列表。可以使用 rez-context 工具查看：</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">rez-context</code></pre><p>退出这个环境，使用exit命令。</p><p>你还可以创建一个已配置的环境并在其中运行一个命令，只需一个命令。 当您使用这种形式时，shell 会在命令运行后立即退出：</p>]]></content>
      
      
      <categories>
          
          <category> Rez </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pipeline </tag>
            
            <tag> 包管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CG流程中&quot;USD&quot;的探索与运用</title>
      <link href="/posts/20220307a1.html"/>
      <url>/posts/20220307a1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> USD </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deadline中的事件示例</title>
      <link href="/posts/20220306a1.html"/>
      <url>/posts/20220306a1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>此文章是记录Deadline农场管理软件中的消息事件插件编写的示例。<span id="more"></span></p><h3 id="事件插件的作用和执行顺序"><a href="#事件插件的作用和执行顺序" class="headerlink" title="事件插件的作用和执行顺序"></a>事件插件的作用和执行顺序</h3><p>Deadline 的所有插件都是Python写的，事件插件可用于更新新快照或任务的状态，或者可用于在一个作业状态更改时处理相关的作业。并且插件都是以非交互式的方式执行，编写插件时不应该包含阻塞操作(如无限循环)或需要用户输入的界面。当我们的事件插件被执行时，日志中会显示插件是从哪里加载的。<br>Deadline中有很多事件，事件插件的触发是按顺序的，并且顺序是可配置的：</p><p><img src="/images/Deadline%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%A4%BA%E4%BE%8B/event%E9%A1%BA%E5%BA%8F%E4%BF%AE%E6%94%B9.png" alt="event顺序修改" srcset="/images/home/Myhead.jpg" data-src="/images/Deadline%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%A4%BA%E4%BE%8B/event%E9%A1%BA%E5%BA%8F%E4%BF%AE%E6%94%B9.png" class="lozad post-image"></p><h3 id="创建事件脚本"><a href="#创建事件脚本" class="headerlink" title="创建事件脚本"></a>创建事件脚本</h3><p>首先要在存储库的custom\events文件夹中创建一个文件夹，并为其命名您的事件插件，如：</p><p><img src="/images/Deadline%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%A4%BA%E4%BE%8B/event%E5%88%9B%E5%BB%BA%E4%BA%8B%E4%BB%B6%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="event创建事件文件夹" srcset="/images/home/Myhead.jpg" data-src="/images/Deadline%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%A4%BA%E4%BE%8B/event%E5%88%9B%E5%BB%BA%E4%BA%8B%E4%BB%B6%E6%96%87%E4%BB%B6%E5%A4%B9.png" class="lozad post-image"></p><p>创建好文件夹后，我们需要新建一个和该文件夹相同明明的 .py 文件，并在文件中写入相应的基本内容（导入deadline事件命名空间；GetDeadlineEventListener()函数获取MyEvent类的一个实例，没有会报错；MyEvent类将需要基于想要响应的事件实现某些回调；当不再使用该事件插件，CleanupDeadlineEventListener()函数进行自动清理。）：</p><p><img src="/images/Deadline%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%A4%BA%E4%BE%8B/event%E5%88%9B%E5%BB%BA%E4%BA%8B%E4%BB%B6%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6.png" alt="event创建事件脚本文件" srcset="/images/home/Myhead.jpg" data-src="/images/Deadline%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%A4%BA%E4%BE%8B/event%E5%88%9B%E5%BB%BA%E4%BA%8B%E4%BB%B6%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6.png" class="lozad post-image"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Deadline<span class="token punctuation">.</span>Events <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">GetDeadlineEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""This is the function that Deadline calls to get an instance of the    main DeadlineEventListener class.    """</span>    <span class="token keyword">return</span> MyEvent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">CleanupDeadlineEventListener</span><span class="token punctuation">(</span>deadlinePlugin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""This is the function that Deadline calls when the event plugin is    no longer in use so that it can get cleaned up.    """</span>    deadlinePlugin<span class="token punctuation">.</span>Cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyEvent</span><span class="token punctuation">(</span>DeadlineEventListener<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""This is the main DeadlineEventListener class for MyEvent"""</span>    <span class="token comment"># TODO: Place code here to replace "pass"</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们完成上述脚本文件的内容后，我们将会得到下面的脚本内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token comment"># @Auther: Mirror</span><span class="token comment"># @Time: 2020/07/01</span><span class="token comment"># =========================================</span><span class="token keyword">from</span> System <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Specialized <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> System<span class="token punctuation">.</span>IO <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> System<span class="token punctuation">.</span>Text <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Deadline<span class="token punctuation">.</span>Scripting <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Deadline<span class="token punctuation">.</span>Events <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token comment">######################################################################</span><span class="token comment">## This is the function that Deadline calls to get an instance of the</span><span class="token comment">## main DeadlineEventListener class.</span><span class="token comment">######################################################################</span><span class="token keyword">def</span> <span class="token function">GetDeadlineEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> MyEvent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">######################################################################</span><span class="token comment">## This is the function that Deadline calls when the event plugin is</span><span class="token comment">## no longer in use so that it can get cleaned up.</span><span class="token comment">######################################################################</span><span class="token keyword">def</span> <span class="token function">CleanupDeadlineEventListener</span><span class="token punctuation">(</span>deadlinePlugin<span class="token punctuation">)</span><span class="token punctuation">:</span>    deadlinePlugin<span class="token punctuation">.</span>Cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">######################################################################</span><span class="token comment">## This is the main DeadlineEventListener class for MyEvent.</span><span class="token comment">######################################################################</span><span class="token keyword">class</span> <span class="token class-name">MyEvent</span><span class="token punctuation">(</span>DeadlineEventListener<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Set up the event callbacks here</span>        self<span class="token punctuation">.</span>OnJobFinishedCallback <span class="token operator">+=</span> self<span class="token punctuation">.</span>OnJobFinished        self<span class="token punctuation">.</span>OnJobFailedCallback <span class="token operator">+=</span> self<span class="token punctuation">.</span>OnJobFailed    <span class="token keyword">def</span> <span class="token function">Cleanup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>OnJobFinishedCallback        <span class="token keyword">del</span> self<span class="token punctuation">.</span>OnJobFailedCallback    <span class="token keyword">def</span> <span class="token function">OnJobFinished</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># TODO: Connect to pipeline site to notify it that the job for a particular</span>        <span class="token comment"># shot or task is complete.</span>        job_name <span class="token operator">=</span> job<span class="token punctuation">.</span>JobName        job_mach <span class="token operator">=</span> job<span class="token punctuation">.</span>GetJobInfoKeyValue<span class="token punctuation">(</span><span class="token string">"MachineName"</span><span class="token punctuation">)</span>        job_user <span class="token operator">=</span> job<span class="token punctuation">.</span>JobUserName        <span class="token keyword">if</span> job_mach<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"renderfarm"</span><span class="token punctuation">:</span>            slaves <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            slaves <span class="token operator">=</span> <span class="token punctuation">[</span>job_mach<span class="token punctuation">]</span>        <span class="token keyword">if</span> slaves<span class="token punctuation">:</span>            <span class="token keyword">for</span> each <span class="token keyword">in</span> slaves<span class="token punctuation">:</span>                curr_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                slave <span class="token operator">=</span> each                massages <span class="token operator">=</span> <span class="token string">"Cur_time:  &#123;curtime&#125;\nJob_user:  &#123;user&#125;\n\nmassages:  Job named \'&#123;jobname&#125;\' had been complate"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>                    curtime<span class="token operator">=</span>curr_time<span class="token punctuation">,</span> user<span class="token operator">=</span>job_user<span class="token punctuation">,</span> jobname<span class="token operator">=</span>job_name<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>sendmessages<span class="token punctuation">(</span>slave<span class="token punctuation">,</span> massages<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"================================================================================================"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>LogInfo<span class="token punctuation">(</span><span class="token string">"\'%s\' is complated"</span> <span class="token operator">%</span> job_name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>LogInfo<span class="token punctuation">(</span><span class="token string">"================================================================================================"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">OnJobFailed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Deadline will to do sometion when job or task is faild        :param job: which Work being monitored        :return: None        """</span>        job_name <span class="token operator">=</span> job<span class="token punctuation">.</span>JobName        job_mach <span class="token operator">=</span> job<span class="token punctuation">.</span>GetJobInfoKeyValue<span class="token punctuation">(</span><span class="token string">"MachineName"</span><span class="token punctuation">)</span>        job_user <span class="token operator">=</span> job<span class="token punctuation">.</span>JobUserName        <span class="token keyword">if</span> job_mach<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"renderfarm"</span><span class="token punctuation">:</span>            slaves <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"DESKTOP-Mirror"</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> job_mach <span class="token operator">==</span> <span class="token string">"DESKTOP-Mirror"</span><span class="token punctuation">:</span>                slaves <span class="token operator">=</span> <span class="token punctuation">[</span>job_mach<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                slaves <span class="token operator">=</span> <span class="token punctuation">[</span>job_mach<span class="token punctuation">,</span> <span class="token string">"DESKTOP-Mirror"</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> each <span class="token keyword">in</span> slaves<span class="token punctuation">:</span>            curr_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            slave <span class="token operator">=</span> each            massages <span class="token operator">=</span> <span class="token string">"Cur_time:  &#123;curtime&#125;\nJob_user:  &#123;user&#125;\nmassages:  Job named \'&#123;jobname&#125;\' had been failed"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>                curtime<span class="token operator">=</span>curr_time<span class="token punctuation">,</span> user<span class="token operator">=</span>job_user<span class="token punctuation">,</span> jobname<span class="token operator">=</span>job_name<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>sendmessages<span class="token punctuation">(</span>slave<span class="token punctuation">,</span> massages<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"================================================================================================"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>LogInfo<span class="token punctuation">(</span><span class="token string">"\'%s\' is failed"</span> <span class="token operator">%</span> job_name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>LogInfo<span class="token punctuation">(</span><span class="token string">"================================================================================================"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sendmessages</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> slaves<span class="token punctuation">,</span> messages<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param            slaves: machines`s machines name or IP address.            messages: the messages which is send by current serve]        :return            cmd is executed by system        """</span>        args <span class="token operator">=</span> StringCollection<span class="token punctuation">(</span><span class="token punctuation">)</span>        args<span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token string">"-SendPopupMessage"</span><span class="token punctuation">)</span>        args<span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token string">"%s"</span> <span class="token operator">%</span> slaves<span class="token punctuation">)</span>        args<span class="token punctuation">.</span>Add<span class="token punctuation">(</span><span class="token string">"%s"</span> <span class="token operator">%</span> messages<span class="token punctuation">)</span>        ClientUtils<span class="token punctuation">.</span>ExecuteCommand<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建事件参数文件"><a href="#创建事件参数文件" class="headerlink" title="创建事件参数文件"></a>创建事件参数文件</h3><p>创建完事件插件的脚本后，我们需要在上述文件夹中为事件插件添加与文件夹同名的参数文件（.param）供 Deadline 进行读取，创建参数界面：</p><p><img src="/images/Deadline%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%A4%BA%E4%BE%8B/event%E5%88%9B%E5%BB%BA%E4%BA%8B%E4%BB%B6%E5%8F%82%E6%95%B0%E6%96%87%E4%BB%B6.png" alt="event创建事件参数文件" srcset="/images/home/Myhead.jpg" data-src="/images/Deadline%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%A4%BA%E4%BE%8B/event%E5%88%9B%E5%BB%BA%E4%BA%8B%E4%BB%B6%E5%8F%82%E6%95%B0%E6%96%87%E4%BB%B6.png" class="lozad post-image"><br>参数文件内容：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">[State]Type=EnumItems=Global Enabled;Opt-In;DisabledCategory=OptionsCategoryOrder=0Index=0Label=StateDefault=DisabledDescription=How this event plug-in should respond to events. If Global, all jobs and slaves will trigger the events for this plugin. If Opt-In, jobs and slaves can choose to trigger the events for this plugin. If Disabled, no events are triggered for this plugin.[EventCallbacks]Type=LabelDescription=The Event Callbacks that this Event Plugin subscribes to.Default=OnJobFailed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它将声明 Monitor 用来生成用户界面的属性，该用户界面用于修改数据库中的自定义设置，创建该文件后，打开监视器并进入超级用户模式。然后选择Tools -&gt; Configure Events，在左边的列表中查找该事件插件。</p><p><img src="/images/Deadline%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%A4%BA%E4%BE%8B/event%E4%BA%8B%E4%BB%B6%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE.png" alt="event事件插件配置" srcset="/images/home/Myhead.jpg" data-src="/images/Deadline%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%A4%BA%E4%BE%8B/event%E4%BA%8B%E4%BB%B6%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE.png" class="lozad post-image"></p><p>至此，在 Deadline 中创建自定义任务消息失败&#x2F;成功的事件已经完成，每当Deadline 中有任务失败时&#x2F;成功时，Deadline 会自动给任务的提交者发送一条相关的消息弹框，用于给制作人员反馈及时的渲染消息。</p><p>注意：需要注意 Deadline 当前使用的 Python 版本，避免出现不兼容的情况</p><p>咱们有空可以看看<a href="https://docs.thinkboxsoftware.com/products/deadline/10.1/1_User%20Manual/manual/event-plugins.html" title="" target="">官方文档</a>是怎么说的，里面有更加详细的内容哦。</p>]]></content>
      
      
      <categories>
          
          <category> Deadline </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建个人博客</title>
      <link href="/posts/20220302a2.html"/>
      <url>/posts/20220302a2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">作为一名学习任何技术都习惯做笔记的好学生，还在使用思维导图记录知识点？或是用word写文档，甚至是"白纸黑字"码字！！！都2202年了，是不是该寻找一种既方便自己随时查找翻看，又可以和小朋友们一起分享知识和经验的方式呢？这时，拥有一个属于自己的个人博客，实属是一个迫在眉睫的需求。于是，我有了自己的博客。接下来将介绍从无到有搭建属于自己的个人博客过程。<span id="more"></span></p><h4 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h4><p>1.一台能联网、没有脑梗的计算机<br>2.Windows系统（我就只会用“窗口”）<br>3.git包管理工具<br>4.一个知道账号和密码的github账号<br>5.记住这个网址，一会儿要用：<a href="https://www.nodejs.org/">https://www.nodejs.org/</a><br>6.随时准备问候度娘，因为我也不清楚你会遇到些什么疑难杂症</p><h4 id="开始搭建本地环境"><a href="#开始搭建本地环境" class="headerlink" title="开始搭建本地环境"></a>开始搭建本地环境</h4><p style="text-indent:2em">首先，点击<a href="https://git-scm.com/download/win" title="" target="">下载git</a>，下载适合自己系统的最新git版本安装包，以默认方式安装。 </p><p style="text-indent:2em">然后，我们再在电脑上访问刚才让你记住的<a href="https://www.nodejs.org/" title="" target="">网址</a>，从网址上下载我们需要的LTS版node.js安装包，直接双击安装它。不出意外的话，安装好的node.js会给你反馈安装了两个组件（node.js和npm包管理工具），我们可以直接去cmd中验证。</p><p style="text-indent:2em">打开cmd,利用npm包管理工具安装今天的主角Hexo博客，先输入命令行安装cnpm的同时将镜像源指向淘宝：</p><pre class="line-numbers language-dos" data-language="dos"><code class="language-dos">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">安装hexo-cli：</p><pre class="line-numbers language-dos" data-language="dos"><code class="language-dos">cnpm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">找个你觉得合适的位置创建一个文件夹，用于存放你的博客产生的所有文件，在cmd中将路径切换到创建的文件夹：</p><pre class="line-numbers language-dos" data-language="dos"><code class="language-dos">cd &#x2F;d &quot;你刚刚创建的文件夹路径&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">初始化咱们的博客目录：</p><pre class="line-numbers language-dos" data-language="dos"><code class="language-dos">hexo init <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">启动我们的Hexo本地服务，可在https://localhost:4000访问，但博客中只有一篇和hexo用户指南相关的文章：</p><pre class="line-numbers language-dos" data-language="dos"><code class="language-dos">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">如果网页打不开，win10执行下面代码后再重复上一步： </p><pre class="line-numbers language-dos" data-language="dos"><code class="language-dos">npm install hexo-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">创建新的博客文章： </p><pre class="line-numbers language-dos" data-language="dos"><code class="language-dos">hexo new &quot;我的第一篇博客文章&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">创建好后，在刚刚创建的博客文件夹的\source\_posts\路径下能看到刚才创建的"我的第一篇博客文章.md"文件，用文本编辑器即可对内容进行编辑，然后刷新https://localhost:4000，就能看到刚刚创建的博客文章出现在网页上，ctrl + C 退出本地服务，。</p><p style="text-indent:2em">清除产生的静态博客文件(public)文件夹： </p><pre class="line-numbers language-dos" data-language="dos"><code class="language-dos">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="构建存储库"><a href="#构建存储库" class="headerlink" title="构建存储库"></a>构建存储库</h4><p style="text-indent:2em">登录github,创建一个新的仓库用于存储从本地推送的静态博客文件：repository neme 必须是："GitHub昵称加.github.io"，description添加自定义描述，创建库。</p><p style="text-indent:2em">cmd下载hexo插件：</p><pre class="line-numbers language-dos" data-language="dos"><code class="language-dos">cnpm install --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">文本打开博客文件夹根目录下的"_config.yml"文件，在文件尾部添加在文件尾部添加：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> 添加储存库配置</span>deploy:  type: git  repo: (你的储存库地址)  branch: master <span class="token title important"><span class="token punctuation">##</span> 注意：冒号后面有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p style="text-indent:2em">要将博客部署到github上，需要先配置git全局用户名和邮箱：</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git config --global user.email <span class="token string">"github中的邮箱地址"</span>git config --global user.name <span class="token string">"github中的用户名"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p style="text-indent:2em">从22021年8月14日(七夕)那天开始，推送代码到GitHub需要使用token登录而不是密码，因此，我们需要先<a href="https://docs.github.com/cn/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token" title="" target="">获取token</a>。</p><p style="text-indent:2em">使用git生成SSH，运行 git Bash 客户端，检测是否存在ssh文件,换句话说就是检查是否存在 id_rsa.pub 或 id_dsa.pub 文件,如果存在可以跳过下面两步，输入如下代码：</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">cd ~/.sshls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p style="text-indent:2em">创建SSH：</p><pre class="line-numbers language-hexo" data-language="hexo"><code class="language-hexo">ssh-keygen -t rsa -C &quot;你的邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">等待一会儿，当看到"Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:............."内容时，表示创建成功。在C盘User文件夹（可能会在桌面）可以找到ssh文件夹， 需要把id_rsa.pub文件中的内容添加到github。步骤是 Settings-->SSH and GPG Keys --->News SSH key，然后把id_rsa里的内容复制进去。</p><p style="text-indent:2em">回到cmd,部署博客到Github,两次输入都需要输入用户名和令牌(令牌不要手动输入，可以直接复制粘贴，尽管看不到粘贴内容，但还是要操作，才能成功):</p><pre class="line-numbers language-hexo" data-language="hexo"><code class="language-hexo">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">稍等两分钟，就可以访问博客页啦：https://github昵称加.github.io</p><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><p style="text-indent:2em">可以 <a href="https://hexo.io/themes/" title="" target="">点击这里</a> 获取更多主题仓库地址，克隆主题到本地：</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone https://github.com/litten/hexo-theme-yilia.git themes/主题名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">修改博客根目录_config.yml文件，修改theme字段后的内容为 “主题名称”。</p><p style="text-indent:2em">清理hexo目录：</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">重新生成hexo静态博客文件夹及其内容：</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">推送远端：</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p style="text-indent:2em">大佬的博客搭建教程视频：<a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=3925172907707222671&spm_id_from=333.337.0.0" title="" target="">点击这里</a>，更多的部署细节可在视频中找到哦。</p>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CG流程中使用ACES色彩管理</title>
      <link href="/posts/20220302a1.html"/>
      <url>/posts/20220302a1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>构建CG流程中的ACES色彩管理流程 <span id="more"></span>,为什么要构建呢？因为：1.色域更高，能容纳更多的色彩，显示的色彩更丰富；2.能接受更高的灯光强度，画面比较不会过曝（不要调皮地将灯光强度调的特别高哦）;3.更物理更真实，颜色会随着亮度地提升，饱和度逐渐降低。相对的就会有些缺点：图片占用存储空间会变大(对影视动画没什么影响)。</p><p>在CG流程中的大概过程就是，sRGB图片进入DCC软件被AECScg线性转换函数转换编码到ACES色域中被管理&gt;渲染器处理贴图信息后生成ACES色域图片&gt;经过编码转换到视图中显示或输出为指定色域的图片用于存储(srgb或ACES)、进一步编辑（ACES）</p><h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h4><pre><code>Substance painter 7.1 + Maya 2020.4 + Nukel2.3 + ACES1.1</code></pre><h4 id="SP软件配置"><a href="#SP软件配置" class="headerlink" title="SP软件配置"></a>SP软件配置</h4><p style="text-indent:2em">由于SP要在7.4版本以后才支持 OCIO 配置文件，并且目前大部分资产贴图都采用sRGB色域编码，因此默认使用传统 SP(sRGB)到 MAYA(ACES) 中进行 sRGB 色域空间转换到 ACES 色域空间的方式。传统SP流程可以通过LMT(外观转换)的LUT(查找表)文件用于显示（只是看起来和AECES差不多，但实除上还是SRGB色域的图片）具体方法是：file > import resource > 添加资源 > 选择Lut文件 > 修改定义为 colorLut > 导入到"工具架" > 导入，然后在显示设置中将 activate post effects恢复默认,勾选activate post effects，勾选activate post effects > tone mapping(色调映射),将 activate post effects > tone mapping > function(功能)设置为log(日志)，并勾选activate color porfile > porfile 修改为 ACES_Standard_log,white_Point 设置为默认值，此时我们从SP软件的视口中看见的色彩在视觉上基本等同ACES色域图显示的效果。</p><h4 id="May启动时配置-ACES-色彩管理"><a href="#May启动时配置-ACES-色彩管理" class="headerlink" title="May启动时配置 ACES 色彩管理"></a>May启动时配置 ACES 色彩管理</h4><p style="text-indent:2em">Maya中使用 ACES 色彩管理空间，在具备有效的 config.ocio 配置文件的情况下，为 Maya 设置环境变量"OCIO = 文件全路径",此时Maya中的色彩管理空间将使用 OCIO 配置文样中的设置，该设置会在基于ACES 色彩管理的基础上自动修改渲染预览界面和视图界面的色彩空间，我们在显示器中看到的色彩信息并非线性空间的色彩信息，Maya后台输出的图片也是经 ACES 色彩空间编码后的图片，此时将渲染图片放入使用相同 ACES 配置文件的 Nuke 软件中，即可直接对 ACES 图片进行线性数据的操作。</p><p><img src="/images/CG%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84ACES%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86/Maya%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86%E4%B8%AD%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE.png" alt="Maya色彩管理中环境变量设置" srcset="/images/home/Myhead.jpg" data-src="/images/CG%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84ACES%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86/Maya%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86%E4%B8%AD%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE.png" class="lozad post-image"></p><h4 id="Maya-应用-OCIO-输入色彩空间规则到图片"><a href="#Maya-应用-OCIO-输入色彩空间规则到图片" class="headerlink" title="Maya 应用 OCIO 输入色彩空间规则到图片"></a>Maya 应用 OCIO 输入色彩空间规则到图片</h4><p style="text-indent:2em">使用 OCIO 配置文件后，若勾选"使用 OCIO 输入颜色空间规则"则会使用"OCIO Standard Rule"对输入的文件进行色彩空间的转换，若不使用，则需要手动制定规则（自定义的配置不起作用时，可尝试将软件切成英文版)，然后将自定义的标准的色彩管理策略导出为 CM 文件,并添加环境变量"MAYA_COLOR_MANAGEMENT_POLICY_FILE=CM文件全路径"、"MAYA_COLOR_MANAGEMENT_POLICY_LOCK=1",用以全局配置所有渲染制作机，使保持相同的色彩配置，手动指定规则将按照规则的从上往下的顺序应用规则，由匹配成功的第一个规则指定输入的色彩空间。</p><p><img src="/images/CG%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84ACES%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86/Maya%E4%B8%AD%E4%BD%BF%E7%94%A8OCIO%E9%85%8D%E7%BD%AE.png" alt="Maya中使用OCIO配置" srcset="/images/home/Myhead.jpg" data-src="/images/CG%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84ACES%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86/Maya%E4%B8%AD%E4%BD%BF%E7%94%A8OCIO%E9%85%8D%E7%BD%AE.png" class="lozad post-image"></p><h4 id="色彩空间管理的其他设置"><a href="#色彩空间管理的其他设置" class="headerlink" title="色彩空间管理的其他设置"></a>色彩空间管理的其他设置</h4><p style="text-indent:2em">Ui 设置:启用后 Maya中的色彩盒子会显示得较灰一些，但不影响 ACES 色域着色。<p><img src="/images/CG%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84ACES%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86/Maya%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84UI%E8%AE%BE%E7%BD%AE.png" alt="Maya色彩管理中的UI设置" srcset="/images/home/Myhead.jpg" data-src="/images/CG%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84ACES%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86/Maya%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84UI%E8%AE%BE%E7%BD%AE.png" class="lozad post-image"><br>浮点渲染目标:开启色彩管理后，该选项也应该开启,才能在 Maya2020 中查看到正确的显示结果，并且应该使用32位格式，否则可能会出现色彩信息的裁剪，显示不正确，吸管吸取不到正确的色彩信息等情况。<br><img src="/images/CG%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84ACES%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86/Maya%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E6%B5%AE%E7%82%B9%E8%AE%A1%E7%AE%97.png" alt="Maya色彩管理中的浮点计算" srcset="/images/home/Myhead.jpg" data-src="/images/CG%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84ACES%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86/Maya%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84%E6%B5%AE%E7%82%B9%E8%AE%A1%E7%AE%97.png" class="lozad post-image"><br>导出 CM 首选项：将自定义的色采管理首选项导出到指定的 CM 文件中，可用于软件启动的环境变量。</p><br><img src="/images/CG%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84ACES%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86/Maya%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84CM%E7%AD%96%E7%95%A5.png" alt="Maya色彩管理中的CM策略" srcset="/images/home/Myhead.jpg" data-src="/images/CG%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84ACES%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86/Maya%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86%E4%B8%AD%E7%9A%84CM%E7%AD%96%E7%95%A5.png" class="lozad post-image"></p><h4 id="Nuke-中配置使用-ACES-色彩管理"><a href="#Nuke-中配置使用-ACES-色彩管理" class="headerlink" title="Nuke 中配置使用 ACES 色彩管理"></a>Nuke 中配置使用 ACES 色彩管理</h4><p>手动配置：</p><p style="text-indent:2em">仅为当前项目配置 ACES:</p><p style="text-indent:2em">打开软件后，按S键进行项目配置：点击 project setting >color栏，将"color management"修改为"OCIO",将COIO_config 修改为"custom", 然后将 OCIO 配置文件填入“custom_OCIO_config"选项中（需保证Nuke中使用的 OCIO 配置文件和 MAYA 中使用的保持一致)或选择 Nuke 自带的 OCIO 配置文件，然后Nuke 即可自动设置部分常用的色彩空间编码设置。对于实拍源素材需要单独配置 Lut格式。</p><p><img src="/images/CG%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84ACES%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86/Nuke%E4%B8%AD%E9%85%8D%E7%BD%AEACES.png" alt="Nuke中配置ACES" srcset="/images/home/Myhead.jpg" data-src="/images/CG%E6%B5%81%E7%A8%8B%E4%B8%AD%E7%9A%84ACES%E8%89%B2%E5%BD%A9%E7%AE%A1%E7%90%86/Nuke%E4%B8%AD%E9%85%8D%E7%BD%AEACES.png" class="lozad post-image">  </p><p>为 Nuke 默认启动配置 ACES</p><p style="text-indent:2em">为软件默认配置:</p><p style="text-indent:2em">1.打开Nuke首选项:选择 Color Management 选择 Nuke 自带的 OCIO 配置或使用自己的 OCIO 配置，即可为软件配置 ACES 色彩管理空间，重启软件即可生效。2.环境变量配置，启动环境中添加环境变量：OCIO = 文件位置</p><h4 id="Nuke-输出sRGB素材"><a href="#Nuke-输出sRGB素材" class="headerlink" title="Nuke 输出sRGB素材"></a>Nuke 输出sRGB素材</h4><p style="text-indent:2em">对于使用EXR输出作为合成过程的中间素材，使用默认的 ACES 色域编码的exr格式文件，保持图片信息的完整，勾选"输出保持ACES 兼容的EXR"；输出序列时，则直接转回sRGB色域编码（使用output_srgb编码方式输出）</p><table><tr><td><img src="/images/CG流程中的ACES色彩管理/Nuke中ACES输出EXR.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/CG流程中的ACES色彩管理/Nuke中ACES输出EXR.png" class="lozad post-image"></td><td><img src="/images/CG流程中的ACES色彩管理/Nuke中ACES输出sRGB序列.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/CG流程中的ACES色彩管理/Nuke中ACES输出sRGB序列.png" class="lozad post-image"></td></tr></table><h4 id="相关软件插件下载链接"><a href="#相关软件插件下载链接" class="headerlink" title="相关软件插件下载链接"></a>相关软件插件下载链接</h4><p>Substance Painter插件滤镜：<a href="https://pan.baidu.com/s/1FFpBeih902gMJWVQrzEwbw">https://pan.baidu.com/s/1FFpBeih902gMJWVQrzEwbw</a> 提取码: anqq<br>OCIO配置文件下载地址：<a href="https://github.com/colour-science/OpenColorIO-Configs/tree/feature/aces-1.2-config">https://github.com/colour-science/OpenColorIO-Configs/tree/feature/aces-1.2-config</a></p>]]></content>
      
      
      <categories>
          
          <category> Maya </category>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 灯光 </tag>
            
            <tag> 合成 </tag>
            
            <tag> ACES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maya获取选中相机视角中的所有对象</title>
      <link href="/posts/20220228a1.html"/>
      <url>/posts/20220228a1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p style="text-indent:2em">从Maya视图窗口中获取相机视角中所有的对象，可以利用OpenMaya和OpenMayaUI两个模块来完成此功能，<span id="more"></span>首先需要指定相机，并通过遍历相机视口，来获取相机视口中的对象：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token comment"># @Auth0r: Mirror</span><span class="token comment"># @Time: ----</span><span class="token comment"># =========================================</span><span class="token keyword">import</span> maya<span class="token punctuation">.</span>cmds <span class="token keyword">as</span> cmds<span class="token keyword">import</span> maya<span class="token punctuation">.</span>OpenMaya <span class="token keyword">as</span> OpenMaya<span class="token keyword">import</span> maya<span class="token punctuation">.</span>OpenMayaUI <span class="token keyword">as</span> OpenMayaUI<span class="token keyword">def</span> <span class="token function">getObjInView</span><span class="token punctuation">(</span>cam<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 添加相机到 MDagPath</span>    mdag_path <span class="token operator">=</span> OpenMaya<span class="token punctuation">.</span>MDagPath<span class="token punctuation">(</span><span class="token punctuation">)</span>    sel <span class="token operator">=</span> OpenMaya<span class="token punctuation">.</span>MSelectionList<span class="token punctuation">(</span><span class="token punctuation">)</span>    sel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cam<span class="token punctuation">)</span>    sel<span class="token punctuation">.</span>getDagPath<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mdag_path<span class="token punctuation">)</span>    <span class="token comment"># 遍历视口</span>    draw_traversal <span class="token operator">=</span> OpenMayaUI<span class="token punctuation">.</span>MDrawTraversal<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 创建视锥</span>    draw_traversal<span class="token punctuation">.</span>setFrustum<span class="token punctuation">(</span>mdag_path<span class="token punctuation">,</span> cmds<span class="token punctuation">.</span>getAttr<span class="token punctuation">(</span><span class="token string">"defaultResolution.width"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmds<span class="token punctuation">.</span>getAttr<span class="token punctuation">(</span><span class="token string">"defaultResolution.height"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    draw_traversal<span class="token punctuation">.</span>traverse<span class="token punctuation">(</span><span class="token punctuation">)</span>    frustum_objs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># Loop through obiects within frustum</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>draw_traversal<span class="token punctuation">.</span>numberOfItems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 先返回shape, 所以需要先获取它的transforn</span>        shape_dag_path <span class="token operator">=</span> OpenMaya<span class="token punctuation">.</span>MDagPath<span class="token punctuation">(</span><span class="token punctuation">)</span>        draw_traversal<span class="token punctuation">.</span>itemPath<span class="token punctuation">(</span>i<span class="token punctuation">,</span> shape_dag_path<span class="token punctuation">)</span>        transform_dag_path <span class="token operator">=</span> OpenMaya<span class="token punctuation">.</span>MDagPath<span class="token punctuation">(</span><span class="token punctuation">)</span>        OpenMaya<span class="token punctuation">.</span>MDagPath<span class="token punctuation">.</span>getAPathTo<span class="token punctuation">(</span>shape_dag_path<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> transform_dag_path<span class="token punctuation">)</span>        <span class="token comment"># 获取物体的长名并且确保它是有效的transform</span>        obj <span class="token operator">=</span> transform_dag_path<span class="token punctuation">.</span>fullPathName<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> cmds<span class="token punctuation">.</span>objExists<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>            frustum_objs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>            cmds<span class="token punctuation">.</span>select<span class="token punctuation">(</span>frustum_objs<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># 需要指定相机</span>    cam <span class="token operator">=</span> <span class="token string">'persp'</span>  <span class="token comment"># 指定相机</span>    getObjInView<span class="token punctuation">(</span>cam<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> ]]></content>
      
      
      <categories>
          
          <category> Maya </category>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenMaya </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maya获取指定物体到Camera焦点平面的距离</title>
      <link href="/posts/20220227a1.html"/>
      <url>/posts/20220227a1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="文章介绍"><a href="#文章介绍" class="headerlink" title="文章介绍"></a>文章介绍</h3><p style="text-indent:2em">在Maya中获取物体到相机焦点所在平面的距离，并将获取到的距离写入相机的焦距属性，使用Arnold渲染。<span id="more"></span></p><p style="text-indent:2em">本文介绍两种获取相机焦距的方法提供参考：一种是利用向量计算的办法计算向量之间的投射长度获取焦距，另一种是使用约束的方式获取焦距。</p><h3 id="方法一：计算向量"><a href="#方法一：计算向量" class="headerlink" title="方法一：计算向量"></a>方法一：计算向量</h3><p style="text-indent:2em">在三维空间中，已知相机单位向量、位置和物体坐标，可计算出相机焦点到物体的距离（该距离并非我们所要求的焦点平面到物体的距离），得到一个空间中存在的长方体，经过对物体和相机两点之间构成的向量投射到相机单位向量方向上的投影长度，即我们所求的相机焦点平面到物体的距离。如下图所示，空间中，我们需要获取线段ob之间的距离，其中线段oa之间的距离可根据相机和物体的坐标计算得出，相机法向量v可从相机中获取，由此我们可计算得出线段oa在向量v方向的投影。</p><p><img src="/images/Maya%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%89%A9%E4%BD%93%E5%88%B0Camera%E7%84%A6%E7%82%B9%E5%B9%B3%E9%9D%A2%E7%9A%84%E8%B7%9D%E7%A6%BB/%E7%A9%BA%E9%97%B4%E7%A4%BA%E6%84%8F%E5%9B%BE2.jpg" alt="空间示意图" srcset="/images/home/Myhead.jpg" data-src="/images/Maya%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%89%A9%E4%BD%93%E5%88%B0Camera%E7%84%A6%E7%82%B9%E5%B9%B3%E9%9D%A2%E7%9A%84%E8%B7%9D%E7%A6%BB/%E7%A9%BA%E9%97%B4%E7%A4%BA%E6%84%8F%E5%9B%BE2.jpg" class="lozad post-image"></p><p style="text-indent:2em">首先，我们需要通过xfrom方法获取相机的法向量：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Cam <span class="token operator">=</span> mc<span class="token punctuation">.</span>xform<span class="token punctuation">(</span>cam<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ws<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">]</span>  <span class="token comment"># 数组第8到第10位为相机法向量</span>Cam_vector <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>Cam<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span>   <span class="token comment"># 由于取出的数据是列表，这里需要转换成向量再取反，即为相机单位向量方向</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p style="text-indent:2em">获取相机的坐标和物体的坐标，计算得出向量oa：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getVector</span><span class="token punctuation">(</span>locatorP<span class="token punctuation">,</span> camP<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算向量坐标        locatorP: 物体坐标        camP：相机坐标    """</span>    newVector <span class="token operator">=</span> <span class="token punctuation">(</span>locatorP<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> camP<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> locatorP<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> camP<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> locatorP<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> camP<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newVector<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p style="text-indent:2em">由于需要区分向量之间的夹角，若为锐角，焦距为正，反之为负：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">judgeAngle</span><span class="token punctuation">(</span>_ang<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算向量角度为锐角还是钝角"""</span>    _flag <span class="token operator">=</span> <span class="token punctuation">(</span>_ang <span class="token operator">*</span> <span class="token number">180.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> pi    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">u"向量间的角度为: %s 度(角度制)"</span> <span class="token operator">%</span> _flag<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_flag <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>_flag <span class="token operator">&lt;=</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">elif</span> <span class="token punctuation">(</span>_flag <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>_flag <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">elif</span> _flag <span class="token operator">==</span> <span class="token number">90</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p style="text-indent:2em">使用上面获得的数据，即可求出相机焦点平面到物体的距离。以下为工具完整脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token comment"># @Author: MirrorCG</span><span class="token comment"># @Time: 2021/12/28</span><span class="token comment"># =========================================</span><span class="token keyword">import</span> maya<span class="token punctuation">.</span>cmds <span class="token keyword">as</span> mc<span class="token keyword">import</span> pymel<span class="token punctuation">.</span>core <span class="token keyword">as</span> pm<span class="token keyword">import</span> maya<span class="token punctuation">.</span>mel <span class="token keyword">as</span> mel<span class="token keyword">from</span> math <span class="token keyword">import</span> pi<span class="token punctuation">,</span> cos<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">getVector</span><span class="token punctuation">(</span>locatorP<span class="token punctuation">,</span> camP<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算向量坐标"""</span>    newVector <span class="token operator">=</span> <span class="token punctuation">(</span>locatorP<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> camP<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> locatorP<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> camP<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> locatorP<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> camP<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newVector<span class="token keyword">def</span> <span class="token function">squareRVector</span><span class="token punctuation">(</span>_vector<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算平方根，向量长度"""</span>    AB <span class="token operator">=</span> <span class="token punctuation">(</span>_vector<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> _vector<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> _vector<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> _vector<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> _vector<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> _vector<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>    <span class="token keyword">return</span> AB<span class="token keyword">def</span> <span class="token function">judgeAngle</span><span class="token punctuation">(</span>_ang<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算向量角度为锐角还是钝角"""</span>    _flag <span class="token operator">=</span> <span class="token punctuation">(</span>_ang <span class="token operator">*</span> <span class="token number">180.0</span><span class="token punctuation">)</span> <span class="token operator">/</span> pi    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">u"向量间的角度为: %s 度(角度制)"</span> <span class="token operator">%</span> _flag<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_flag <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>_flag <span class="token operator">&lt;=</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">elif</span> <span class="token punctuation">(</span>_flag <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>_flag <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">elif</span> _flag <span class="token operator">==</span> <span class="token number">90</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">getCam</span><span class="token punctuation">(</span>camName<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""获取选中的相机，填入窗口"""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        cam <span class="token operator">=</span> pm<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>sl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getChildren<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 选择相机</span>    <span class="token keyword">except</span> IndexError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        mc<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">u"未选中对象"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> cam<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>cam<span class="token punctuation">.</span>nodeType<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"camera"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mc<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">u"未选中相机"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    _camName <span class="token operator">=</span> cam<span class="token punctuation">.</span>longName<span class="token punctuation">(</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>camName<span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span>_camName<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">createLocator</span><span class="token punctuation">(</span>locName<span class="token punctuation">,</span> camName<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建/获取locator,移动至相机位置，并将改1ocator填入窗口中"""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        cam <span class="token operator">=</span> pm<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>camName<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getParent<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> IndexError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        mc<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">u"请选择并添加相机"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    camP <span class="token operator">=</span> cam<span class="token punctuation">.</span>getTranslation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 相机坐标</span>    <span class="token keyword">if</span> mc<span class="token punctuation">.</span>objExists<span class="token punctuation">(</span><span class="token string">"find_focous"</span><span class="token punctuation">)</span> <span class="token keyword">and</span> pm<span class="token punctuation">.</span>nodeType<span class="token punctuation">(</span>pm<span class="token punctuation">.</span>ls<span class="token punctuation">(</span><span class="token string">"find_focous"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getChildren<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"locator"</span><span class="token punctuation">:</span>        loc <span class="token operator">=</span> pm<span class="token punctuation">.</span>ls<span class="token punctuation">(</span><span class="token string">"find_focous"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        loc <span class="token operator">=</span> pm<span class="token punctuation">.</span>createNode<span class="token punctuation">(</span><span class="token string">"locator"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getParent<span class="token punctuation">(</span><span class="token punctuation">)</span>        loc<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"find_focous"</span><span class="token punctuation">)</span>    loc<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span><span class="token string">"translate"</span><span class="token punctuation">,</span> camP<span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>locName<span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span>loc<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>instName<span class="token punctuation">,</span> camName<span class="token punctuation">,</span> locName<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算焦距，判断距离方向"""</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>camName<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token keyword">not</span> mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>locName<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mc<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">u"请填入相机或locator(`find_focous`)"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    cam <span class="token operator">=</span> pm<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>camName<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getParent<span class="token punctuation">(</span><span class="token punctuation">)</span>    camP <span class="token operator">=</span> cam<span class="token punctuation">.</span>getTranslation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    loc <span class="token operator">=</span> pm<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>locName<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    cam_vector <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>mc<span class="token punctuation">.</span>xform<span class="token punctuation">(</span>cam<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ws<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token comment"># 获取相机单位向量(从maya获取的向量需要取反</span>    locatorP <span class="token operator">=</span> loc<span class="token punctuation">.</span>getAttr<span class="token punctuation">(</span><span class="token string">"translate"</span><span class="token punctuation">)</span>  <span class="token comment"># 定位器坐标</span>    AB_vector <span class="token operator">=</span> getVector<span class="token punctuation">(</span>locatorP<span class="token punctuation">,</span> camP<span class="token punctuation">)</span>    AB <span class="token operator">=</span> squareRVector<span class="token punctuation">(</span>AB_vector<span class="token punctuation">)</span>  <span class="token comment"># 定位器距离相机距离</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">u"定位器距离相机: %s 个单位"</span> <span class="token operator">%</span> AB<span class="token punctuation">)</span>    x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>cam_vector<span class="token punctuation">)</span>    y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>AB_vector<span class="token punctuation">)</span>    lx <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    ly <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>y<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>    cos_angle <span class="token operator">=</span> x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>lx <span class="token operator">*</span> ly<span class="token punctuation">)</span>    _angle <span class="token operator">=</span> np<span class="token punctuation">.</span>arccos<span class="token punctuation">(</span>cos_angle<span class="token punctuation">)</span>    _flag <span class="token operator">=</span> judgeAngle<span class="token punctuation">(</span>_angle<span class="token punctuation">)</span>    <span class="token keyword">if</span> AB <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        focus <span class="token operator">=</span> <span class="token number">0.1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        focus <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>cos<span class="token punctuation">(</span>_angle<span class="token punctuation">)</span> <span class="token operator">*</span> AB<span class="token punctuation">)</span>    <span class="token keyword">if</span> _flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">elif</span> _flag <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        focus <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> focus<span class="token punctuation">)</span>    <span class="token keyword">elif</span> _flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        focus <span class="token operator">=</span> <span class="token number">0.1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">u"相机焦距为: %s 个单位"</span> <span class="token operator">%</span> focus<span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>instName<span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span><span class="token string">"%s"</span> <span class="token operator">%</span> focus<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        cam<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span><span class="token string">"focusDistance"</span><span class="token punctuation">,</span> focus<span class="token punctuation">)</span>    <span class="token keyword">except</span> RuntimeError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">u"焦距小于默认最小值,设定为0.1"</span><span class="token punctuation">)</span>    cam<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span><span class="token string">"focusDistance"</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">toolDoc</span><span class="token punctuation">(</span>winName<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""工具帮助"""</span>    win_name <span class="token operator">=</span> <span class="token string">u"工具帮助"</span>    <span class="token keyword">if</span> mc<span class="token punctuation">.</span>window<span class="token punctuation">(</span>win_name<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mc<span class="token punctuation">.</span>deleteUI<span class="token punctuation">(</span>win_name<span class="token punctuation">,</span> window<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    helpWin<span class="token operator">=</span> mc<span class="token punctuation">.</span>window<span class="token punctuation">(</span><span class="token string">u"工具帮助"</span><span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token string">u"工具帮助"</span><span class="token punctuation">,</span> wh<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token operator">=</span>winName<span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>paneLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>textScrollList<span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">,</span>                      append<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">u"1.选择相机：先选择要测量焦距的相机，再点击按钮(相机名可以手动填入，但相机名为长名，防止错误选择相机)"</span><span class="token punctuation">,</span>                              <span class="token string">u"2.创建locator：点击后创建定位器，或手动填入已有的locator(默认创建的1ocator为'find_focous',手动填入不用点击)"</span><span class="token punctuation">,</span>                              <span class="token string">u"3.计算焦距按钮：先移动调整好位置的1ocator，点击'移动locator，计算焦距'按钮，即可测出想要的焦距"</span><span class="token punctuation">,</span>                              <span class="token string">u"4.帮 助：本工具的使用说明"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>textScrollList<span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">,</span> edit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> lf<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"fixedWidthFont"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"fixedWidthFont"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"fixedWidthFont"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"fixedWidthFont"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>showWindow<span class="token punctuation">(</span>helpWin<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    win_name <span class="token operator">=</span> <span class="token string">u"测量相机焦距"</span>    <span class="token keyword">if</span> mc<span class="token punctuation">.</span>window<span class="token punctuation">(</span>win_name<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mc<span class="token punctuation">.</span>deleteUI<span class="token punctuation">(</span>win_name<span class="token punctuation">,</span> window<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    win <span class="token operator">=</span> mc<span class="token punctuation">.</span>window<span class="token punctuation">(</span>win_name<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">u"测量相机焦距"</span><span class="token punctuation">,</span> iconName<span class="token operator">=</span><span class="token string">u"Short_Name"</span><span class="token punctuation">,</span> widthHeight<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>columnLayout<span class="token punctuation">(</span>adjustableColumn<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> rs<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>rowColumnLayout<span class="token punctuation">(</span>numberOfColumns<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> columnAttach<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"right"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columnWidth<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>text<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u'相 机 名:'</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    camName <span class="token operator">=</span> mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>button<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u'选择相机'</span><span class="token punctuation">,</span> command<span class="token operator">=</span><span class="token string">"getCam(camName)"</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>setParent<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>rowColumnLayout<span class="token punctuation">(</span>numberOfColumns<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> columnAttach<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columnWidth<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>text<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u'locator: '</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    locName <span class="token operator">=</span> mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>button<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u'创建1ocator'</span><span class="token punctuation">,</span> command<span class="token operator">=</span><span class="token string">"createLocator(locName,camName)"</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>setParent<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>button<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u"移动locator,计算距离"</span><span class="token punctuation">,</span> command<span class="token operator">=</span><span class="token string">"getInstance(instName, camName, 1ocName)"</span><span class="token punctuation">,</span> bgc<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.73</span><span class="token punctuation">,</span> <span class="token number">0.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>rowColumnLayout<span class="token punctuation">(</span>numberOfColumns<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> columnAttach<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columnWidth<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>text<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u'焦  距:'</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    instName <span class="token operator">=</span> mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>ed<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> bgc<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.64</span><span class="token punctuation">,</span> <span class="token number">0.79</span><span class="token punctuation">,</span> <span class="token number">10.48</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>text<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u" "</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>button<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u'帮助'</span><span class="token punctuation">,</span> command<span class="token operator">=</span><span class="token string">"toolDoc(win)"</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>setParent<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>setParent<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>    mc<span class="token punctuation">.</span>showWindow<span class="token punctuation">(</span>win<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p style="text-indent:2em">若要动态获取相机焦距，可将下面的脚本修改后填入相机属性的表达式中。</p><pre class="line-numbers language-mel" data-language="mel"><code class="language-mel"><span class="token keyword">vector</span> <span class="token variable">$camP</span> <span class="token operator">=</span> <span class="token code italic"><span class="token delimiter punctuation">`</span><span class="token function">getAttr</span> camera1<span class="token punctuation">.</span>translate<span class="token delimiter punctuation">`</span></span><span class="token punctuation">;</span> <span class="token comment">//相机坐标</span><span class="token keyword">float</span> <span class="token variable">$camVct</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token code italic"><span class="token delimiter punctuation">`</span><span class="token function">xform</span> <span class="token flag operator">-q</span> <span class="token flag operator">-m</span> <span class="token flag operator">-ws</span> camera1<span class="token delimiter punctuation">`</span></span><span class="token punctuation">;</span> <span class="token comment">//相机世界空间矩阵</span><span class="token keyword">vector</span> <span class="token variable">$camVector</span> <span class="token operator">=</span> <span class="token punctuation">&lt;&lt;</span><span class="token variable">$camVct</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$camVct</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$camVct</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">>></span><span class="token operator">*</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//从maya中获取的相机向量，需要取反</span><span class="token keyword">vector</span> <span class="token variable">$locP</span> <span class="token operator">=</span> <span class="token code italic"><span class="token delimiter punctuation">`</span><span class="token function">getAttr</span> find_focous<span class="token punctuation">.</span>translate<span class="token delimiter punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">vector</span> <span class="token variable">$lcInstance</span> <span class="token operator">=</span> <span class="token variable">$locP</span> <span class="token operator">-</span> <span class="token variable">$camP</span><span class="token punctuation">;</span><span class="token keyword">float</span> <span class="token variable">$inst</span> <span class="token operator">=</span> <span class="token function">mag</span><span class="token punctuation">(</span><span class="token variable">$locP</span> <span class="token operator">-</span> <span class="token variable">$camP</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//物体距离相机的距离</span><span class="token keyword">float</span> <span class="token variable">$_angle</span> <span class="token operator">=</span> <span class="token function">angle</span><span class="token punctuation">(</span><span class="token variable">$camVector</span><span class="token punctuation">,</span><span class="token variable">$lcInstance</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//向量间的夹角</span><span class="token keyword">float</span> <span class="token variable">$_focus</span> <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token variable">$_angle</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token variable">$inst</span><span class="token punctuation">;</span> <span class="token comment">//焦距</span><span class="token keyword">float</span> <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$_angle</span><span class="token operator">*</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3.141592657</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$flag</span> <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$focus</span> <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">print</span> <span class="token variable">$_focus</span><span class="token punctuation">;</span>cameraShape1<span class="token punctuation">.</span>focusDistance <span class="token operator">=</span> <span class="token variable">$_focus</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="方法二：添加约束"><a href="#方法二：添加约束" class="headerlink" title="方法二：添加约束"></a>方法二：添加约束</h3><p style="text-indent:2em">在相机位置创建两个定位器：其中一号定位器p到相机上，使用二号定位器约束一号定位器的Z轴，并设置Z轴数值的最大值（因为方向是反的，所以设置最大值，可以自己尝试一下），将二号定位器移动到物体的位置并添加约束，此时，一号定位器的Z轴数值即是相机焦距，将此属性连接到相机的aifocus属性即可动态获取相机焦距，如下图所示：</p><p><img src="/images/Maya%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%89%A9%E4%BD%93%E5%88%B0Camera%E7%84%A6%E7%82%B9%E5%B9%B3%E9%9D%A2%E7%9A%84%E8%B7%9D%E7%A6%BB/%E7%A9%BA%E9%97%B4%E7%A4%BA%E6%84%8F%E5%9B%BE3.jpg" alt="空间示意图" srcset="/images/home/Myhead.jpg" data-src="/images/Maya%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%89%A9%E4%BD%93%E5%88%B0Camera%E7%84%A6%E7%82%B9%E5%B9%B3%E9%9D%A2%E7%9A%84%E8%B7%9D%E7%A6%BB/%E7%A9%BA%E9%97%B4%E7%A4%BA%E6%84%8F%E5%9B%BE3.jpg" class="lozad post-image"></p><p style="text-indent:2em">约束工具如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token comment"># @Auth0r: MirrorCG</span><span class="token comment"># @Time: 2021/12/28</span><span class="token comment"># =========================================</span><span class="token keyword">import</span> maya<span class="token punctuation">.</span>cmds <span class="token keyword">as</span> mc<span class="token keyword">import</span> pymel<span class="token punctuation">.</span>core <span class="token keyword">as</span> pm<span class="token keyword">class</span> <span class="token class-name">getDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        win_name <span class="token operator">=</span> <span class="token string">u"测量相机焦距"</span>        <span class="token keyword">if</span> mc<span class="token punctuation">.</span>window<span class="token punctuation">(</span>win_name<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            mc<span class="token punctuation">.</span>deleteUI<span class="token punctuation">(</span>win_name<span class="token punctuation">,</span> window<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>win <span class="token operator">=</span> mc<span class="token punctuation">.</span>window<span class="token punctuation">(</span>win_name<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">u"测量相机焦距"</span><span class="token punctuation">,</span> iconName<span class="token operator">=</span><span class="token string">u'short Name'</span><span class="token punctuation">,</span> widthHeight<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>columnLayout<span class="token punctuation">(</span>adjustableColumn<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> rs<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>rowColumnLayout<span class="token punctuation">(</span>numberOfColumns<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> columnAttach<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columnWidth<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>text<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u"相 机 名:"</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>camName <span class="token operator">=</span> mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>button<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u"选择相机"</span><span class="token punctuation">,</span> command<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> self<span class="token punctuation">.</span>getCam<span class="token punctuation">(</span>self<span class="token punctuation">.</span>camName<span class="token punctuation">)</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>setParent<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>rowColumnLayout<span class="token punctuation">(</span>numberOfColumns<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> columnAttach<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columnWidth<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>text<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u"locator:"</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>locName <span class="token operator">=</span> mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>button<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u"创建locator"</span><span class="token punctuation">,</span> command<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> self<span class="token punctuation">.</span>createLocators<span class="token punctuation">(</span>self<span class="token punctuation">.</span>locName<span class="token punctuation">)</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>setParent<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>rowColumnLayout<span class="token punctuation">(</span>numberOfColumns<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> columnWidth<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>button<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u"约束到选择的物体"</span><span class="token punctuation">,</span> command<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> self<span class="token punctuation">.</span>addCtrlWithObj<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bgc<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.73</span><span class="token punctuation">,</span> <span class="token number">0.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>text<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u' '</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>button<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u"清除产生的对象"</span><span class="token punctuation">,</span> command<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> self<span class="token punctuation">.</span>cleanAll<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bgc<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.73</span><span class="token punctuation">,</span> <span class="token number">0.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>setParent<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>rowColumnLayout<span class="token punctuation">(</span>numberOfColumns<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> columnAttach<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columnWidth<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>text<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u' '</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>button<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">u"帮助"</span><span class="token punctuation">,</span> command<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> self<span class="token punctuation">.</span>toolDoc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>setParent<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>setParent<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>showWindow<span class="token punctuation">(</span>self<span class="token punctuation">.</span>win<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getCam</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""获取选中的相机，填入窗口"""</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cam <span class="token operator">=</span> pm<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>sl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getChildren<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 选择相机</span>        <span class="token keyword">except</span> IndexError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            mc<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">u"未选中对象"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> cam<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>cam<span class="token punctuation">.</span>nodeType<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"camera"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            mc<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">u"未选中相机"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        _camName <span class="token operator">=</span> cam<span class="token punctuation">.</span>longName<span class="token punctuation">(</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>self<span class="token punctuation">.</span>camName<span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span>_camName<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">connectParm</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> loc_a<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""连接相机属性"""</span>        cam <span class="token operator">=</span> pm<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>self<span class="token punctuation">.</span>camName<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># cam.setAttr("aiEnableDOF",1)</span>        node_name <span class="token operator">=</span> <span class="token string">"distance_data"</span>        <span class="token keyword">if</span> mc<span class="token punctuation">.</span>objExists<span class="token punctuation">(</span>node_name<span class="token punctuation">)</span><span class="token punctuation">:</span>            mc<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>node_name<span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>createNode<span class="token punctuation">(</span><span class="token string">"floatMath"</span><span class="token punctuation">,</span> n<span class="token operator">=</span>node_name<span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>node_name <span class="token operator">+</span> <span class="token string">".operation"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>node_name <span class="token operator">+</span> <span class="token string">".floatB"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>connectAttr<span class="token punctuation">(</span>loc_a<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".translateZ"</span><span class="token punctuation">,</span> node_name <span class="token operator">+</span> <span class="token string">".floatA"</span><span class="token punctuation">,</span> f<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>connectAttr<span class="token punctuation">(</span>node_name <span class="token operator">+</span> <span class="token string">".outFloat"</span><span class="token punctuation">,</span> cam<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".aiFocusDistance"</span><span class="token punctuation">,</span> f<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">addCtrl</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> loc_m<span class="token punctuation">,</span> loc_a<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""m添加约束和设置可见性"""</span>        cam <span class="token operator">=</span> mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>self<span class="token punctuation">.</span>camName<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>parent<span class="token punctuation">(</span>loc_a<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cam<span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>transformLimits<span class="token punctuation">(</span>loc_a<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tz<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.02</span><span class="token punctuation">)</span><span class="token punctuation">,</span> etz<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>loc_a<span class="token punctuation">.</span>fullPath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".visibility"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span>loc_a<span class="token punctuation">.</span>fullPath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".visibility"</span><span class="token punctuation">,</span> lock<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>parentConstraint<span class="token punctuation">(</span>loc_m<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loc_a<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> st<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">createLocators</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建 / 获取1ocator, 移动至相机位置，并将该主1ocator填入窗口中"""</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            cam <span class="token operator">=</span> pm<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>self<span class="token punctuation">.</span>camName<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getParent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fullPath<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> IndexError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            mc<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">u"请选择并添加正确的相机"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        cam_p <span class="token operator">=</span> mc<span class="token punctuation">.</span>xform<span class="token punctuation">(</span>cam<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ws<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 相机世界坐标</span>        <span class="token keyword">if</span> mc<span class="token punctuation">.</span>objExists<span class="token punctuation">(</span><span class="token string">"find_focus"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 用于移动的locator</span>            loc_m <span class="token operator">=</span> pm<span class="token punctuation">.</span>ls<span class="token punctuation">(</span><span class="token string">"find_focus"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            pm<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>loc_m<span class="token punctuation">)</span>        loc_m <span class="token operator">=</span> pm<span class="token punctuation">.</span>createNode<span class="token punctuation">(</span><span class="token string">"locator"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getParent<span class="token punctuation">(</span><span class="token punctuation">)</span>        loc_m<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"find_focus"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> mc<span class="token punctuation">.</span>objExists<span class="token punctuation">(</span><span class="token string">"cam_center"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            loc_a <span class="token operator">=</span> pm<span class="token punctuation">.</span>ls<span class="token punctuation">(</span><span class="token string">"cam_center"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            pm<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>loc_a<span class="token punctuation">)</span>        loc_a <span class="token operator">=</span> pm<span class="token punctuation">.</span>createNode<span class="token punctuation">(</span><span class="token string">"locator"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getParent<span class="token punctuation">(</span><span class="token punctuation">)</span>        loc_a<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"cam_center"</span><span class="token punctuation">)</span>        loc_m<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span><span class="token string">"translate"</span><span class="token punctuation">,</span> cam_p<span class="token punctuation">)</span>        loc_a<span class="token punctuation">.</span>setAttr<span class="token punctuation">(</span><span class="token string">"translate"</span><span class="token punctuation">,</span> cam_p<span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>self<span class="token punctuation">.</span>locName<span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span>loc_m<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>addCtrl<span class="token punctuation">(</span>loc_m<span class="token punctuation">,</span> loc_a<span class="token punctuation">)</span>  <span class="token comment"># 添加约束和设置可见性</span>        self<span class="token punctuation">.</span>connectParm<span class="token punctuation">(</span>loc_a<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">addCtrlWithObj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""约束到物体"""</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            loc_m <span class="token operator">=</span> pm<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>mc<span class="token punctuation">.</span>textField<span class="token punctuation">(</span>self<span class="token punctuation">.</span>locName<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> tx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fullPath<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> IndexError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            mc<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">u"未创建或填入定位器"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        obj <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> mc<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>sl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">"find focus"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> i<span class="token punctuation">:</span>                obj <span class="token operator">=</span> i                <span class="token keyword">break</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> obj<span class="token punctuation">:</span>            mc<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">u"未选择约束物体，或约束物体名称中含有'find_focus'字符串"</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>parentConstraint<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> loc_m<span class="token punctuation">,</span> mo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> sr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">cleanAll</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>arqs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""清除本工具产生的所有节点"""</span>        node_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"distance_data"</span><span class="token punctuation">,</span> <span class="token string">"find_focus"</span><span class="token punctuation">,</span> <span class="token string">"cam_center"</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> node_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> mc<span class="token punctuation">.</span>objExists<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                mc<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">toolDoc</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""工具帮助"""</span>        win_name <span class="token operator">=</span> <span class="token string">u"工具帮助"</span>        <span class="token keyword">if</span> mc<span class="token punctuation">.</span>window<span class="token punctuation">(</span>win_name<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            mc<span class="token punctuation">.</span>deleteUI<span class="token punctuation">(</span>win_name<span class="token punctuation">,</span> window<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        help_win <span class="token operator">=</span> mc<span class="token punctuation">.</span>window<span class="token punctuation">(</span><span class="token string">u"工具帮助"</span><span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token string">u"工具帮助"</span><span class="token punctuation">,</span> wh<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token operator">=</span>self<span class="token punctuation">.</span>win<span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>paneLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>textScrollList<span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">,</span> append<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">u"1.选择相机:先选择要测量焦距的相机，再点击按钮(相机名可以手动填入，但相机名为长名，防止错误选择相机)"</span><span class="token punctuation">,</span>                                          <span class="token string">u"2,创建locator:点击后，在相机处创建定位器，创建的1ocator名称为'find focous'"</span><span class="token punctuation">,</span>                                          <span class="token string">u"3.约束到选择物体:先调整好locator(find focous)的位置，选择约束物体，点击'约束到选择物体'，即测出想要的焦距，属性将自动连接"</span><span class="token punctuation">,</span>                                          <span class="token string">u"4.清除对象，清除本工具产生的相关节点"</span><span class="token punctuation">,</span> <span class="token string">u"5.帮助:本工具的使用说明"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>textScrollList<span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">,</span> edit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> lf<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"fixedWidthFont"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"fixedWidthFont"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"fixedWidthFont"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                 <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"fixedWidthFont"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"fixedWidthFont"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        mc<span class="token punctuation">.</span>showWindow<span class="token punctuation">(</span>help_win<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    tool <span class="token operator">=</span> getDistance<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Maya </category>
          
          <category> Arnold </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 灯光 </tag>
            
            <tag> 向量计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Aitoon材质灯光分层的探索</title>
      <link href="/posts/20220226a1.html"/>
      <url>/posts/20220226a1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p style="text-indent:2em">前段时间，开始对在 Maya 中进行三渲二的渲染分层有了兴趣。于是，我就尝试自己探索一下：在 Maya 中使用 Aitoon 材质进行三渲二的灯光分层，以及在 Nuke中进行合成的流程。<span id="more"></span>现在的三渲二影视作品普遍采用亮面、暗面加边缘光的方式进行灯光分层，部分镜头需要以亮面、灰面和暗面加边缘光的方式进行灯光分层，灯光师仅完成灯光角度的设计即可，最终画面氛围和效果需要合成师完成，这种分层方式使用aitoon材质球可以很容易地完成。</p><p>测试环境:maya 2018.5+Arnold 6.0.1.0<br>测试角色:不要钱的派大星</p><h3 id="一-材质相关"><a href="#一-材质相关" class="headerlink" title="一. 材质相关"></a>一. 材质相关</h3><p style="text-indent:2em">前期部门仅制作卡通材质，不需要在材质球中为rim、highlight 指定灯光。材质球的base 权重需要设定为1（下图1），关闭材质的能量守恒选项和间接反射（下图2），材质的baseTonemap属性都链接ramp节点并保持只有两个点。调节材质、线框效果与贴图的阴影融合等步骤需要前期部门调整到最终效果。如果做了材质阴影融合，材质部门需要提供另一套只带有阴影贴图的 aimatte 材质球用于切换，供灯光部门渲染阴影通道使用。</p><table><tr><td><img src="/images/关于Aitoon材质灯光分层的探索/图1-1.png" border=1 srcset="/images/home/Myhead.jpg" data-src="/images/关于Aitoon材质灯光分层的探索/图1-1.png" class="lozad post-image"></td><td><img src="/images/关于Aitoon材质灯光分层的探索/图1-2.png" border=1 srcset="/images/home/Myhead.jpg" data-src="/images/关于Aitoon材质灯光分层的探索/图1-2.png" class="lozad post-image"></td></tr></table><h3 id="二．灯光环节流程"><a href="#二．灯光环节流程" class="headerlink" title="二．灯光环节流程"></a>二．灯光环节流程</h3><pre><code>1.灯光使用要求</code></pre><p style="text-indent:2em">由于卡通材质的特殊性，灯光渲染需要至少一盏光源即可区分亮暗，根据官方介绍虽然 aitoon 材质并不挑剔灯光类型，但由于面光源和skydome等灯光的性质，可能会导致受光面的强度大于1，从而导致莫名的错误，灯光的要求使用平行光、点光源或者聚光灯，并且这三种光源对于风格化高光的形成效果较好，可控性更高。</p>    2.Aov及渲染分层<p style="text-indent:2em">通过对aitoon材质的渲染，我们可以获取Arnold提供的所有的Aov通道，但由于aitoon材质球并非基干物理的材质球，并不能按照LPE的方式进行分层，传统的分成方式需要考虑灯光的强度和颜色对贴图的影响以及材质之间的影响，而卡通渲染并不计算diffuse的灯光颜色信息，因此我们可以采用diffusealbedo+主光照射范围+暗部颜色+平面反射+透射的方式进行分层，此方法能保持合成的可调性的同时也最大限度保留了材质的效果。通过读取模型的材质信息，给模型添加附加属性，用aiuserdata节点传递已经记录的每个模型的材质球信息，即可确认模型被灯光照射的亮暗面的范围，最终输出通道，具体方式如下：</p>    (1)主光照射范围+暗部颜色<p style="text-indent:2em">给每一个材质为aitoon的物体添加Arnold额外属性(color1,color2.pos1,pos2.interpolation)用于记录数据（下图左一），该属性记录材质球的basetonemap中ramp 的信息（下图右一），其中颜色数据使用vector类型 ，位置数据使用float类型，ramp的过度类型使用int类型，这三种类型分别可对应用户数据节点的 aiUserDataColor、aiUserDataFloat、aiUserDatalnt。</p><table><tr><td><img src="/images/关于Aitoon材质灯光分层的探索/图2-1.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/关于Aitoon材质灯光分层的探索/图2-1.png" class="lozad post-image"></td><td><img src="/images/关于Aitoon材质灯光分层的探索/图2-2.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/关于Aitoon材质灯光分层的探索/图2-2.png" class="lozad post-image"></td></tr></table><p style="text-indent:2em">以 toon_key 为例创建自定义 aov（下图左一），通过创建自定义的aov，将aov色器选择为新创建的 aitoon 卡通材质球 关闭该aitoon 材质球的能量守恒，边缘，高光。将basecolor调为1，并给basetonemap链接一个默认的ramp节点。创建2个aiUserDataColor2个aiUserDataFloat1个aiUserDatalnt节点，并将color1、color2分别填入aiUserDataColor，pos1、pos2分别填入aiUserDataFloat，interpolation填入aiUserDatalnt，将五个节点链接到上一步的ramp中即可渲染出，所需要的包含有灯光照射的两部范围信息的aov，该aov的色彩信息为仅为灯光照射的亮面（toon_key）(不含材质信息)，以此类推，可获得暗面的颜色（toon_env），渲染出的aov（下图右一）</p><table><tr><td><img src="/images/关于Aitoon材质灯光分层的探索/图2-3.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/关于Aitoon材质灯光分层的探索/图2-3.png" class="lozad post-image"></td><td><img src="/images/关于Aitoon材质灯光分层的探索/图2-4.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/关于Aitoon材质灯光分层的探索/图2-4.png" class="lozad post-image"></td></tr></table><p>至此，我们获得需要的灯光层，该灯光层保留材质的 ramp 亮暗面信息和亮暗部区域(非aitoon 材质渲染为黑色。</p>    (2) Diffuse abedle、高光和透射<p style="text-indent:2em">材质本身的高光和透射可利用maya自身的aov输出，分别为specular direct、specular indirect，transmission direct， transmission indirect。</p>    (3) edge<p style="text-indent:2em">物体的边缘线输出，需要通过自定义edge aov进行输出，需要将aov的filter设定为 contour类型否则渲染不出线框（如下图）。</p><table><tr><td><img src="/images/关于Aitoon材质灯光分层的探索/图2-5.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/关于Aitoon材质灯光分层的探索/图2-5.png" class="lozad post-image"></td><td><img src="/images/关于Aitoon材质灯光分层的探索/图2-6.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/关于Aitoon材质灯光分层的探索/图2-6.png" class="lozad post-image"></td></tr></table>    (4) 边缘光和风格化高光<p style="text-indent:2em">为了便于调节，aitoon材质的rim边缘光和风格化高光可通过单独分层并对层中的物体进行材质覆盖的方式进行提取aov，单独分层也有利于控制效果。</p>    (5) 其他需要的aov<p style="text-indent:2em">除上述aov外,其他一些aov可根据需求添加，本文考虑使用的辅助aov包括:N、 fresnel、OCC、RBzd、P、crypto_matte(三种)、direct和indirect 可在含有非aitoon材质时输出，用于调整非aitoon材质物体。</p>    (6)文件分层<p style="text-indent:2em">文件的分层方式通过maya的renderSetup分层方式进行分层，最后以模板的形式导出渲染层，供流程使用。使用render Setup的方 式分层可以很方便地对模型进行材质覆盖、属性覆盖和导出自定义aov的操作，以边光和风格化层高光为例，为保持物体边缘光的统一性，需要整体赋予一个aitoon材质球，用于调整边缘光效果;而材质球的边缘光和风格化高光属性是没有填入对应灯光的shape名称的，因此可以在覆盖材质或者属性的基础上，统一给相关的模型覆盖属性或材质球，达到渲染效果。</p><h3 id="三．合成"><a href="#三．合成" class="headerlink" title="三．合成"></a>三．合成</h3><p style="text-indent:2em">通过上面的方法，我们可以得到合成所需要的aov，通过合成树即可还原灯光渲染的效果（合成树中的图片不是本例的图片，此处仅做示范），并在此基础上由合成师进行环境氛围和灯光效果的调整即可（如下图）。</p><table><tr><td><img src="/images/关于Aitoon材质灯光分层的探索/图3-1.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/关于Aitoon材质灯光分层的探索/图3-1.png" class="lozad post-image"></td><td><img src="/images/关于Aitoon材质灯光分层的探索/图3-2.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/关于Aitoon材质灯光分层的探索/图3-2.png" class="lozad post-image"></td></tr></table><h3 id="四．写在最后"><a href="#四．写在最后" class="headerlink" title="四．写在最后"></a>四．写在最后</h3><p style="text-indent:2em">此方法按照aitoon材质球的非基于物理渲染的特性，以basetonemap的ramp与贴图相乘得出最终颜色信息的特点，进行aov分层;它相对于单纯使用aitoon材质球对物体进行材质覆盖的方式进行亮暗部区分的优点在于，不以单一的材质覆盖的亮暗部过度信息、能更准确地保留材质的亮暗部范围和过度方式、能分别获取到材质的亮暗部rgb信息。相对于传统基于物理的分层方式，能单独调整亮暗面颜色信息，由于三渲二不能在灯光中处理氛围，此方式在合成中可调性更高。</p><p>注意：在输出AOV通道时，若自定义的AOV和Arnold渲染器自带的AOV一起渲染出图时，会导致Arnold渲染器自带的Aov渲染错误，不渲染出正确的信息，因此，自定义的AOV需要单独分层渲染。</p>]]></content>
      
      
      <categories>
          
          <category> Maya </category>
          
          <category> Arnold </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 灯光 </tag>
            
            <tag> Aitoon </tag>
            
            <tag> aiUserData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客文章语法示例</title>
      <link href="/posts/20220220a2.html"/>
      <url>/posts/20220220a2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这是文章摘要 <span id="more"></span>，下面是废话</p><p>文件最上方以 — 分隔的区域称为”Front_matter”</p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>首行缩进</p><p style="text-indent:2em">内容</p><p>这是引用块</p><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io/">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://www.baidu.com">www.baidu.com</a></cite></footer></blockquote><p>这是文字链接</p><a href="https://git-scm.com/download/win" title="" target="">下载git</a><p>这是代码块</p><pre class="language-none"><code class="language-none">alert(&#39;Hello World!&#39;);</code></pre><pre class="line-numbers language-objc" data-language="objc"><code class="language-objc">[rectangle setX: 10 y: 10 width: 20 height: 20];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><div class="caption"><span>Array.map</span></div><code class="language-none">array.map(callback[, thisArg])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><div class="caption"><span>_.compact</span><a href="http://underscorejs.org/#compact">Underscore.js</a></div><code class="language-none">_.compact([0, 1, false, 2, &#39;&#39;, 3]);&#x3D;&gt; [1, 2, 3]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是反引号代码块<br><code> [1, 2, 3] 标题  https://www.baidu.com 百度地址 code snippet array.map(callback[, thisArg])</code></p><p>pull quote</p><blockquote class="pullquote [class]"><p>content<br>sss<br>sss<br>sss</p></blockquote><p>这是jsFiddle(jsFiddle是一个在线的shell编辑器)</p><iframe scrolling="no" width="[width]" height="[height]" src="https://jsfiddle.net/shorttag/embedded/[tabs]/[skin]" frameborder="0" loading="lazy" allowfullscreen></iframe><p>在文章中插入指定大小的图片</p><img src="/images/%E6%B5%B7.jpg" class="[文章jpg] lozad post-image" width="200" height="100" title="title text" alt="alt text" srcset="/images/home/Myhead.jpg" data-src="/images/%E6%B5%B7.jpg"><p><img src="/images/%E6%B5%B7.jpg" alt="img jpg" srcset="/images/home/Myhead.jpg" data-src="/images/%E6%B5%B7.jpg" class="lozad post-image">  </p><p>html支持的使用表放置图片的方式</p><table><tr><td><img src="/images/关于Aitoon材质灯光分层的探索/图2-3.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/关于Aitoon材质灯光分层的探索/图2-3.png" class="lozad post-image"></td><td><img src="/images/关于Aitoon材质灯光分层的探索/图2-4.png" border=0 srcset="/images/home/Myhead.jpg" data-src="/images/关于Aitoon材质灯光分层的探索/图2-4.png" class="lozad post-image"></td></tr></table><p>这是视频</p><div class="video-container"><iframe src="https://www.youtube.com/embed/lJIrF4YjHfQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>这是文本引用</p><a href="#">Post not found: hexo-4-released How to use <b> tag</b> in title</a><p>这是数据引用<br>&lt;% for (var link in site.data.menu) { %&gt;<br>  <a href="<%= site.data.menu[link] %>"> &lt;%&#x3D; link %&gt; </a><br>&lt;% } %&gt;</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.codesheep.cn/">www.codesheep.cn</a></p><!-- 下面是评论界面 --><div id="gitalk-container"></div><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"><script src="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"></script><script type="text/javascript">var gitalk = new Gitalk({    id: '',    clientID: '',    clientSecret: '',    repo: 'gitalk',    owner: 'JairusTse',    admin: ['JairusTse'],    labels: ['Gitalk'],    perPage: 50})gitalk.render('gitalk-container')</script>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo文档</title>
      <link href="/posts/20220220a1.html"/>
      <url>/posts/20220220a1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. <span id="more"></span>If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
